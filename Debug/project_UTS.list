
project_UTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003198  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080032a4  080032a4  000132a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800339c  0800339c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800339c  0800339c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800339c  0800339c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800339c  0800339c  0001339c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080033a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000078  0800341c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  0800341c  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c229  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f0c  00000000  00000000  0002c2ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be8  00000000  00000000  0002e1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad0  00000000  00000000  0002edc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014e47  00000000  00000000  0002f890  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000977e  00000000  00000000  000446d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000723cf  00000000  00000000  0004de55  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c0224  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000332c  00000000  00000000  000c02a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	0800328c 	.word	0x0800328c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	0800328c 	.word	0x0800328c

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f945 	bl	80003ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fdf2 	bl	8001d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f95d 	bl	8000456 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f925 	bl	8000402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	200000a0 	.word	0x200000a0

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	200000a0 	.word	0x200000a0

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	db0b      	blt.n	80002e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	f003 021f 	and.w	r2, r3, #31
 80002d0:	4906      	ldr	r1, [pc, #24]	; (80002ec <__NVIC_EnableIRQ+0x34>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	095b      	lsrs	r3, r3, #5
 80002d8:	2001      	movs	r0, #1
 80002da:	fa00 f202 	lsl.w	r2, r0, r2
 80002de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	db0a      	blt.n	800031a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	b2da      	uxtb	r2, r3
 8000308:	490c      	ldr	r1, [pc, #48]	; (800033c <__NVIC_SetPriority+0x4c>)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	0112      	lsls	r2, r2, #4
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000318:	e00a      	b.n	8000330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4908      	ldr	r1, [pc, #32]	; (8000340 <__NVIC_SetPriority+0x50>)
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 030f 	and.w	r3, r3, #15
 8000326:	3b04      	subs	r3, #4
 8000328:	0112      	lsls	r2, r2, #4
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	440b      	add	r3, r1
 800032e:	761a      	strb	r2, [r3, #24]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000344:	b480      	push	{r7}
 8000346:	b089      	sub	sp, #36	; 0x24
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	60b9      	str	r1, [r7, #8]
 800034e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f003 0307 	and.w	r3, r3, #7
 8000356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000358:	69fb      	ldr	r3, [r7, #28]
 800035a:	f1c3 0307 	rsb	r3, r3, #7
 800035e:	2b04      	cmp	r3, #4
 8000360:	bf28      	it	cs
 8000362:	2304      	movcs	r3, #4
 8000364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3304      	adds	r3, #4
 800036a:	2b06      	cmp	r3, #6
 800036c:	d902      	bls.n	8000374 <NVIC_EncodePriority+0x30>
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3b03      	subs	r3, #3
 8000372:	e000      	b.n	8000376 <NVIC_EncodePriority+0x32>
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	f04f 32ff 	mov.w	r2, #4294967295
 800037c:	69bb      	ldr	r3, [r7, #24]
 800037e:	fa02 f303 	lsl.w	r3, r2, r3
 8000382:	43da      	mvns	r2, r3
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	401a      	ands	r2, r3
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800038c:	f04f 31ff 	mov.w	r1, #4294967295
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	43d9      	mvns	r1, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	4313      	orrs	r3, r2
         );
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3724      	adds	r7, #36	; 0x24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b8:	d301      	bcc.n	80003be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ba:	2301      	movs	r3, #1
 80003bc:	e00f      	b.n	80003de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <SysTick_Config+0x40>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003c6:	210f      	movs	r1, #15
 80003c8:	f04f 30ff 	mov.w	r0, #4294967295
 80003cc:	f7ff ff90 	bl	80002f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <SysTick_Config+0x40>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003d6:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <SysTick_Config+0x40>)
 80003d8:	2207      	movs	r2, #7
 80003da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	e000e010 	.word	0xe000e010

080003ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f7ff ff2d 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000402:	b580      	push	{r7, lr}
 8000404:	b086      	sub	sp, #24
 8000406:	af00      	add	r7, sp, #0
 8000408:	4603      	mov	r3, r0
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
 800040e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000414:	f7ff ff42 	bl	800029c <__NVIC_GetPriorityGrouping>
 8000418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	68b9      	ldr	r1, [r7, #8]
 800041e:	6978      	ldr	r0, [r7, #20]
 8000420:	f7ff ff90 	bl	8000344 <NVIC_EncodePriority>
 8000424:	4602      	mov	r2, r0
 8000426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800042a:	4611      	mov	r1, r2
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff5f 	bl	80002f0 <__NVIC_SetPriority>
}
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	b082      	sub	sp, #8
 800043e:	af00      	add	r7, sp, #0
 8000440:	4603      	mov	r3, r0
 8000442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff35 	bl	80002b8 <__NVIC_EnableIRQ>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b082      	sub	sp, #8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ffa2 	bl	80003a8 <SysTick_Config>
 8000464:	4603      	mov	r3, r0
}
 8000466:	4618      	mov	r0, r3
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000470:	b480      	push	{r7}
 8000472:	b08b      	sub	sp, #44	; 0x2c
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800047a:	2300      	movs	r3, #0
 800047c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800047e:	2300      	movs	r3, #0
 8000480:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000482:	e127      	b.n	80006d4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000484:	2201      	movs	r2, #1
 8000486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000488:	fa02 f303 	lsl.w	r3, r2, r3
 800048c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	69fa      	ldr	r2, [r7, #28]
 8000494:	4013      	ands	r3, r2
 8000496:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000498:	69ba      	ldr	r2, [r7, #24]
 800049a:	69fb      	ldr	r3, [r7, #28]
 800049c:	429a      	cmp	r2, r3
 800049e:	f040 8116 	bne.w	80006ce <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	2b12      	cmp	r3, #18
 80004a8:	d034      	beq.n	8000514 <HAL_GPIO_Init+0xa4>
 80004aa:	2b12      	cmp	r3, #18
 80004ac:	d80d      	bhi.n	80004ca <HAL_GPIO_Init+0x5a>
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	d02b      	beq.n	800050a <HAL_GPIO_Init+0x9a>
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d804      	bhi.n	80004c0 <HAL_GPIO_Init+0x50>
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d031      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d01c      	beq.n	80004f8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004be:	e048      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d043      	beq.n	800054c <HAL_GPIO_Init+0xdc>
 80004c4:	2b11      	cmp	r3, #17
 80004c6:	d01b      	beq.n	8000500 <HAL_GPIO_Init+0x90>
          break;
 80004c8:	e043      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004ca:	4a89      	ldr	r2, [pc, #548]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d026      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004d0:	4a87      	ldr	r2, [pc, #540]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d806      	bhi.n	80004e4 <HAL_GPIO_Init+0x74>
 80004d6:	4a87      	ldr	r2, [pc, #540]	; (80006f4 <HAL_GPIO_Init+0x284>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d020      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004dc:	4a86      	ldr	r2, [pc, #536]	; (80006f8 <HAL_GPIO_Init+0x288>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d01d      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004e2:	e036      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004e4:	4a85      	ldr	r2, [pc, #532]	; (80006fc <HAL_GPIO_Init+0x28c>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d019      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ea:	4a85      	ldr	r2, [pc, #532]	; (8000700 <HAL_GPIO_Init+0x290>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d016      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004f0:	4a84      	ldr	r2, [pc, #528]	; (8000704 <HAL_GPIO_Init+0x294>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d013      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004f6:	e02c      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	623b      	str	r3, [r7, #32]
          break;
 80004fe:	e028      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	3304      	adds	r3, #4
 8000506:	623b      	str	r3, [r7, #32]
          break;
 8000508:	e023      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	3308      	adds	r3, #8
 8000510:	623b      	str	r3, [r7, #32]
          break;
 8000512:	e01e      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	330c      	adds	r3, #12
 800051a:	623b      	str	r3, [r7, #32]
          break;
 800051c:	e019      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d102      	bne.n	800052c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000526:	2304      	movs	r3, #4
 8000528:	623b      	str	r3, [r7, #32]
          break;
 800052a:	e012      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d105      	bne.n	8000540 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000534:	2308      	movs	r3, #8
 8000536:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	611a      	str	r2, [r3, #16]
          break;
 800053e:	e008      	b.n	8000552 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000540:	2308      	movs	r3, #8
 8000542:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	69fa      	ldr	r2, [r7, #28]
 8000548:	615a      	str	r2, [r3, #20]
          break;
 800054a:	e002      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
          break;
 8000550:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000552:	69bb      	ldr	r3, [r7, #24]
 8000554:	2bff      	cmp	r3, #255	; 0xff
 8000556:	d801      	bhi.n	800055c <HAL_GPIO_Init+0xec>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	e001      	b.n	8000560 <HAL_GPIO_Init+0xf0>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3304      	adds	r3, #4
 8000560:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	2bff      	cmp	r3, #255	; 0xff
 8000566:	d802      	bhi.n	800056e <HAL_GPIO_Init+0xfe>
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	e002      	b.n	8000574 <HAL_GPIO_Init+0x104>
 800056e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000570:	3b08      	subs	r3, #8
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	210f      	movs	r1, #15
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	fa01 f303 	lsl.w	r3, r1, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	401a      	ands	r2, r3
 8000586:	6a39      	ldr	r1, [r7, #32]
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	431a      	orrs	r2, r3
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	2b00      	cmp	r3, #0
 800059e:	f000 8096 	beq.w	80006ce <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005a2:	4b59      	ldr	r3, [pc, #356]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a58      	ldr	r2, [pc, #352]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6193      	str	r3, [r2, #24]
 80005ae:	4b56      	ldr	r3, [pc, #344]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005ba:	4a54      	ldr	r2, [pc, #336]	; (800070c <HAL_GPIO_Init+0x29c>)
 80005bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005be:	089b      	lsrs	r3, r3, #2
 80005c0:	3302      	adds	r3, #2
 80005c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ca:	f003 0303 	and.w	r3, r3, #3
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	220f      	movs	r2, #15
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	43db      	mvns	r3, r3
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	4013      	ands	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a4b      	ldr	r2, [pc, #300]	; (8000710 <HAL_GPIO_Init+0x2a0>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d013      	beq.n	800060e <HAL_GPIO_Init+0x19e>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a4a      	ldr	r2, [pc, #296]	; (8000714 <HAL_GPIO_Init+0x2a4>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d00d      	beq.n	800060a <HAL_GPIO_Init+0x19a>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a49      	ldr	r2, [pc, #292]	; (8000718 <HAL_GPIO_Init+0x2a8>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d007      	beq.n	8000606 <HAL_GPIO_Init+0x196>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a48      	ldr	r2, [pc, #288]	; (800071c <HAL_GPIO_Init+0x2ac>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d101      	bne.n	8000602 <HAL_GPIO_Init+0x192>
 80005fe:	2303      	movs	r3, #3
 8000600:	e006      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000602:	2304      	movs	r3, #4
 8000604:	e004      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000606:	2302      	movs	r3, #2
 8000608:	e002      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060a:	2301      	movs	r3, #1
 800060c:	e000      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060e:	2300      	movs	r3, #0
 8000610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000612:	f002 0203 	and.w	r2, r2, #3
 8000616:	0092      	lsls	r2, r2, #2
 8000618:	4093      	lsls	r3, r2
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	4313      	orrs	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000620:	493a      	ldr	r1, [pc, #232]	; (800070c <HAL_GPIO_Init+0x29c>)
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	089b      	lsrs	r3, r3, #2
 8000626:	3302      	adds	r3, #2
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000636:	2b00      	cmp	r3, #0
 8000638:	d006      	beq.n	8000648 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800063a:	4b39      	ldr	r3, [pc, #228]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	4938      	ldr	r1, [pc, #224]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	4313      	orrs	r3, r2
 8000644:	600b      	str	r3, [r1, #0]
 8000646:	e006      	b.n	8000656 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000648:	4b35      	ldr	r3, [pc, #212]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	43db      	mvns	r3, r3
 8000650:	4933      	ldr	r1, [pc, #204]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000652:	4013      	ands	r3, r2
 8000654:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065e:	2b00      	cmp	r3, #0
 8000660:	d006      	beq.n	8000670 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000662:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000664:	685a      	ldr	r2, [r3, #4]
 8000666:	492e      	ldr	r1, [pc, #184]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	4313      	orrs	r3, r2
 800066c:	604b      	str	r3, [r1, #4]
 800066e:	e006      	b.n	800067e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	43db      	mvns	r3, r3
 8000678:	4929      	ldr	r1, [pc, #164]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800067a:	4013      	ands	r3, r2
 800067c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000686:	2b00      	cmp	r3, #0
 8000688:	d006      	beq.n	8000698 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800068c:	689a      	ldr	r2, [r3, #8]
 800068e:	4924      	ldr	r1, [pc, #144]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	4313      	orrs	r3, r2
 8000694:	608b      	str	r3, [r1, #8]
 8000696:	e006      	b.n	80006a6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800069a:	689a      	ldr	r2, [r3, #8]
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	43db      	mvns	r3, r3
 80006a0:	491f      	ldr	r1, [pc, #124]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006a2:	4013      	ands	r3, r2
 80006a4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d006      	beq.n	80006c0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b4:	68da      	ldr	r2, [r3, #12]
 80006b6:	491a      	ldr	r1, [pc, #104]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	60cb      	str	r3, [r1, #12]
 80006be:	e006      	b.n	80006ce <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006c2:	68da      	ldr	r2, [r3, #12]
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	43db      	mvns	r3, r3
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	3301      	adds	r3, #1
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	fa22 f303 	lsr.w	r3, r2, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	f47f aed0 	bne.w	8000484 <HAL_GPIO_Init+0x14>
  }
}
 80006e4:	bf00      	nop
 80006e6:	372c      	adds	r7, #44	; 0x2c
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	10210000 	.word	0x10210000
 80006f4:	10110000 	.word	0x10110000
 80006f8:	10120000 	.word	0x10120000
 80006fc:	10310000 	.word	0x10310000
 8000700:	10320000 	.word	0x10320000
 8000704:	10220000 	.word	0x10220000
 8000708:	40021000 	.word	0x40021000
 800070c:	40010000 	.word	0x40010000
 8000710:	40010800 	.word	0x40010800
 8000714:	40010c00 	.word	0x40010c00
 8000718:	40011000 	.word	0x40011000
 800071c:	40011400 	.word	0x40011400
 8000720:	40010400 	.word	0x40010400

08000724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	689a      	ldr	r2, [r3, #8]
 8000734:	887b      	ldrh	r3, [r7, #2]
 8000736:	4013      	ands	r3, r2
 8000738:	2b00      	cmp	r3, #0
 800073a:	d002      	beq.n	8000742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800073c:	2301      	movs	r3, #1
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	e001      	b.n	8000746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000746:	7bfb      	ldrb	r3, [r7, #15]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000752:	b480      	push	{r7}
 8000754:	b083      	sub	sp, #12
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	460b      	mov	r3, r1
 800075c:	807b      	strh	r3, [r7, #2]
 800075e:	4613      	mov	r3, r2
 8000760:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000762:	787b      	ldrb	r3, [r7, #1]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d003      	beq.n	8000770 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000768:	887a      	ldrh	r2, [r7, #2]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800076e:	e003      	b.n	8000778 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000770:	887b      	ldrh	r3, [r7, #2]
 8000772:	041a      	lsls	r2, r3, #16
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	611a      	str	r2, [r3, #16]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
	...

08000784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d101      	bne.n	8000796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
 8000794:	e26c      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	2b00      	cmp	r3, #0
 80007a0:	f000 8087 	beq.w	80008b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007a4:	4b92      	ldr	r3, [pc, #584]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	f003 030c 	and.w	r3, r3, #12
 80007ac:	2b04      	cmp	r3, #4
 80007ae:	d00c      	beq.n	80007ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007b0:	4b8f      	ldr	r3, [pc, #572]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	f003 030c 	and.w	r3, r3, #12
 80007b8:	2b08      	cmp	r3, #8
 80007ba:	d112      	bne.n	80007e2 <HAL_RCC_OscConfig+0x5e>
 80007bc:	4b8c      	ldr	r3, [pc, #560]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007c8:	d10b      	bne.n	80007e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007ca:	4b89      	ldr	r3, [pc, #548]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d06c      	beq.n	80008b0 <HAL_RCC_OscConfig+0x12c>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d168      	bne.n	80008b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e246      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007ea:	d106      	bne.n	80007fa <HAL_RCC_OscConfig+0x76>
 80007ec:	4b80      	ldr	r3, [pc, #512]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a7f      	ldr	r2, [pc, #508]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80007f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	e02e      	b.n	8000858 <HAL_RCC_OscConfig+0xd4>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10c      	bne.n	800081c <HAL_RCC_OscConfig+0x98>
 8000802:	4b7b      	ldr	r3, [pc, #492]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a7a      	ldr	r2, [pc, #488]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800080c:	6013      	str	r3, [r2, #0]
 800080e:	4b78      	ldr	r3, [pc, #480]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a77      	ldr	r2, [pc, #476]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000818:	6013      	str	r3, [r2, #0]
 800081a:	e01d      	b.n	8000858 <HAL_RCC_OscConfig+0xd4>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000824:	d10c      	bne.n	8000840 <HAL_RCC_OscConfig+0xbc>
 8000826:	4b72      	ldr	r3, [pc, #456]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a71      	ldr	r2, [pc, #452]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 800082c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000830:	6013      	str	r3, [r2, #0]
 8000832:	4b6f      	ldr	r3, [pc, #444]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a6e      	ldr	r2, [pc, #440]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800083c:	6013      	str	r3, [r2, #0]
 800083e:	e00b      	b.n	8000858 <HAL_RCC_OscConfig+0xd4>
 8000840:	4b6b      	ldr	r3, [pc, #428]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a6a      	ldr	r2, [pc, #424]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b68      	ldr	r3, [pc, #416]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a67      	ldr	r2, [pc, #412]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000856:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d013      	beq.n	8000888 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000860:	f7ff fccc 	bl	80001fc <HAL_GetTick>
 8000864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000866:	e008      	b.n	800087a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000868:	f7ff fcc8 	bl	80001fc <HAL_GetTick>
 800086c:	4602      	mov	r2, r0
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	2b64      	cmp	r3, #100	; 0x64
 8000874:	d901      	bls.n	800087a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000876:	2303      	movs	r3, #3
 8000878:	e1fa      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800087a:	4b5d      	ldr	r3, [pc, #372]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0f0      	beq.n	8000868 <HAL_RCC_OscConfig+0xe4>
 8000886:	e014      	b.n	80008b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000888:	f7ff fcb8 	bl	80001fc <HAL_GetTick>
 800088c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800088e:	e008      	b.n	80008a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000890:	f7ff fcb4 	bl	80001fc <HAL_GetTick>
 8000894:	4602      	mov	r2, r0
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	2b64      	cmp	r3, #100	; 0x64
 800089c:	d901      	bls.n	80008a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800089e:	2303      	movs	r3, #3
 80008a0:	e1e6      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008a2:	4b53      	ldr	r3, [pc, #332]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d1f0      	bne.n	8000890 <HAL_RCC_OscConfig+0x10c>
 80008ae:	e000      	b.n	80008b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d063      	beq.n	8000986 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008be:	4b4c      	ldr	r3, [pc, #304]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f003 030c 	and.w	r3, r3, #12
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d00b      	beq.n	80008e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80008ca:	4b49      	ldr	r3, [pc, #292]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	f003 030c 	and.w	r3, r3, #12
 80008d2:	2b08      	cmp	r3, #8
 80008d4:	d11c      	bne.n	8000910 <HAL_RCC_OscConfig+0x18c>
 80008d6:	4b46      	ldr	r3, [pc, #280]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d116      	bne.n	8000910 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008e2:	4b43      	ldr	r3, [pc, #268]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d005      	beq.n	80008fa <HAL_RCC_OscConfig+0x176>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	691b      	ldr	r3, [r3, #16]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d001      	beq.n	80008fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e1ba      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008fa:	4b3d      	ldr	r3, [pc, #244]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	00db      	lsls	r3, r3, #3
 8000908:	4939      	ldr	r1, [pc, #228]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 800090a:	4313      	orrs	r3, r2
 800090c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800090e:	e03a      	b.n	8000986 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	691b      	ldr	r3, [r3, #16]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d020      	beq.n	800095a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000918:	4b36      	ldr	r3, [pc, #216]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 800091a:	2201      	movs	r2, #1
 800091c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800091e:	f7ff fc6d 	bl	80001fc <HAL_GetTick>
 8000922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000924:	e008      	b.n	8000938 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000926:	f7ff fc69 	bl	80001fc <HAL_GetTick>
 800092a:	4602      	mov	r2, r0
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	2b02      	cmp	r3, #2
 8000932:	d901      	bls.n	8000938 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000934:	2303      	movs	r3, #3
 8000936:	e19b      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000938:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f003 0302 	and.w	r3, r3, #2
 8000940:	2b00      	cmp	r3, #0
 8000942:	d0f0      	beq.n	8000926 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000944:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	4927      	ldr	r1, [pc, #156]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 8000954:	4313      	orrs	r3, r2
 8000956:	600b      	str	r3, [r1, #0]
 8000958:	e015      	b.n	8000986 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800095a:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <HAL_RCC_OscConfig+0x270>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000960:	f7ff fc4c 	bl	80001fc <HAL_GetTick>
 8000964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000966:	e008      	b.n	800097a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000968:	f7ff fc48 	bl	80001fc <HAL_GetTick>
 800096c:	4602      	mov	r2, r0
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	2b02      	cmp	r3, #2
 8000974:	d901      	bls.n	800097a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000976:	2303      	movs	r3, #3
 8000978:	e17a      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	2b00      	cmp	r3, #0
 8000984:	d1f0      	bne.n	8000968 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	2b00      	cmp	r3, #0
 8000990:	d03a      	beq.n	8000a08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d019      	beq.n	80009ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <HAL_RCC_OscConfig+0x274>)
 800099c:	2201      	movs	r2, #1
 800099e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009a0:	f7ff fc2c 	bl	80001fc <HAL_GetTick>
 80009a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009a6:	e008      	b.n	80009ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009a8:	f7ff fc28 	bl	80001fc <HAL_GetTick>
 80009ac:	4602      	mov	r2, r0
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d901      	bls.n	80009ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80009b6:	2303      	movs	r3, #3
 80009b8:	e15a      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <HAL_RCC_OscConfig+0x26c>)
 80009bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0f0      	beq.n	80009a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80009c6:	2001      	movs	r0, #1
 80009c8:	f000 fada 	bl	8000f80 <RCC_Delay>
 80009cc:	e01c      	b.n	8000a08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <HAL_RCC_OscConfig+0x274>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009d4:	f7ff fc12 	bl	80001fc <HAL_GetTick>
 80009d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009da:	e00f      	b.n	80009fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009dc:	f7ff fc0e 	bl	80001fc <HAL_GetTick>
 80009e0:	4602      	mov	r2, r0
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d908      	bls.n	80009fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80009ea:	2303      	movs	r3, #3
 80009ec:	e140      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000
 80009f4:	42420000 	.word	0x42420000
 80009f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009fc:	4b9e      	ldr	r3, [pc, #632]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 80009fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a00:	f003 0302 	and.w	r3, r3, #2
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1e9      	bne.n	80009dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	f000 80a6 	beq.w	8000b62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a1a:	4b97      	ldr	r3, [pc, #604]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d10d      	bne.n	8000a42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	4b94      	ldr	r3, [pc, #592]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	4a93      	ldr	r2, [pc, #588]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a30:	61d3      	str	r3, [r2, #28]
 8000a32:	4b91      	ldr	r3, [pc, #580]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a42:	4b8e      	ldr	r3, [pc, #568]	; (8000c7c <HAL_RCC_OscConfig+0x4f8>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d118      	bne.n	8000a80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a4e:	4b8b      	ldr	r3, [pc, #556]	; (8000c7c <HAL_RCC_OscConfig+0x4f8>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a8a      	ldr	r2, [pc, #552]	; (8000c7c <HAL_RCC_OscConfig+0x4f8>)
 8000a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a5a:	f7ff fbcf 	bl	80001fc <HAL_GetTick>
 8000a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a60:	e008      	b.n	8000a74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a62:	f7ff fbcb 	bl	80001fc <HAL_GetTick>
 8000a66:	4602      	mov	r2, r0
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	2b64      	cmp	r3, #100	; 0x64
 8000a6e:	d901      	bls.n	8000a74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a70:	2303      	movs	r3, #3
 8000a72:	e0fd      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a74:	4b81      	ldr	r3, [pc, #516]	; (8000c7c <HAL_RCC_OscConfig+0x4f8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d0f0      	beq.n	8000a62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d106      	bne.n	8000a96 <HAL_RCC_OscConfig+0x312>
 8000a88:	4b7b      	ldr	r3, [pc, #492]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000a8a:	6a1b      	ldr	r3, [r3, #32]
 8000a8c:	4a7a      	ldr	r2, [pc, #488]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6213      	str	r3, [r2, #32]
 8000a94:	e02d      	b.n	8000af2 <HAL_RCC_OscConfig+0x36e>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d10c      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x334>
 8000a9e:	4b76      	ldr	r3, [pc, #472]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000aa0:	6a1b      	ldr	r3, [r3, #32]
 8000aa2:	4a75      	ldr	r2, [pc, #468]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000aa4:	f023 0301 	bic.w	r3, r3, #1
 8000aa8:	6213      	str	r3, [r2, #32]
 8000aaa:	4b73      	ldr	r3, [pc, #460]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000aac:	6a1b      	ldr	r3, [r3, #32]
 8000aae:	4a72      	ldr	r2, [pc, #456]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ab0:	f023 0304 	bic.w	r3, r3, #4
 8000ab4:	6213      	str	r3, [r2, #32]
 8000ab6:	e01c      	b.n	8000af2 <HAL_RCC_OscConfig+0x36e>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	2b05      	cmp	r3, #5
 8000abe:	d10c      	bne.n	8000ada <HAL_RCC_OscConfig+0x356>
 8000ac0:	4b6d      	ldr	r3, [pc, #436]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ac2:	6a1b      	ldr	r3, [r3, #32]
 8000ac4:	4a6c      	ldr	r2, [pc, #432]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ac6:	f043 0304 	orr.w	r3, r3, #4
 8000aca:	6213      	str	r3, [r2, #32]
 8000acc:	4b6a      	ldr	r3, [pc, #424]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ace:	6a1b      	ldr	r3, [r3, #32]
 8000ad0:	4a69      	ldr	r2, [pc, #420]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6213      	str	r3, [r2, #32]
 8000ad8:	e00b      	b.n	8000af2 <HAL_RCC_OscConfig+0x36e>
 8000ada:	4b67      	ldr	r3, [pc, #412]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000adc:	6a1b      	ldr	r3, [r3, #32]
 8000ade:	4a66      	ldr	r2, [pc, #408]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ae0:	f023 0301 	bic.w	r3, r3, #1
 8000ae4:	6213      	str	r3, [r2, #32]
 8000ae6:	4b64      	ldr	r3, [pc, #400]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ae8:	6a1b      	ldr	r3, [r3, #32]
 8000aea:	4a63      	ldr	r2, [pc, #396]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000aec:	f023 0304 	bic.w	r3, r3, #4
 8000af0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d015      	beq.n	8000b26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000afa:	f7ff fb7f 	bl	80001fc <HAL_GetTick>
 8000afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b00:	e00a      	b.n	8000b18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b02:	f7ff fb7b 	bl	80001fc <HAL_GetTick>
 8000b06:	4602      	mov	r2, r0
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d901      	bls.n	8000b18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b14:	2303      	movs	r3, #3
 8000b16:	e0ab      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b18:	4b57      	ldr	r3, [pc, #348]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000b1a:	6a1b      	ldr	r3, [r3, #32]
 8000b1c:	f003 0302 	and.w	r3, r3, #2
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0ee      	beq.n	8000b02 <HAL_RCC_OscConfig+0x37e>
 8000b24:	e014      	b.n	8000b50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b26:	f7ff fb69 	bl	80001fc <HAL_GetTick>
 8000b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b2c:	e00a      	b.n	8000b44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b2e:	f7ff fb65 	bl	80001fc <HAL_GetTick>
 8000b32:	4602      	mov	r2, r0
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d901      	bls.n	8000b44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b40:	2303      	movs	r3, #3
 8000b42:	e095      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b44:	4b4c      	ldr	r3, [pc, #304]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000b46:	6a1b      	ldr	r3, [r3, #32]
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1ee      	bne.n	8000b2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b50:	7dfb      	ldrb	r3, [r7, #23]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d105      	bne.n	8000b62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b56:	4b48      	ldr	r3, [pc, #288]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	4a47      	ldr	r2, [pc, #284]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f000 8081 	beq.w	8000c6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b6c:	4b42      	ldr	r3, [pc, #264]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f003 030c 	and.w	r3, r3, #12
 8000b74:	2b08      	cmp	r3, #8
 8000b76:	d061      	beq.n	8000c3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	69db      	ldr	r3, [r3, #28]
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d146      	bne.n	8000c0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b80:	4b3f      	ldr	r3, [pc, #252]	; (8000c80 <HAL_RCC_OscConfig+0x4fc>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b86:	f7ff fb39 	bl	80001fc <HAL_GetTick>
 8000b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b8c:	e008      	b.n	8000ba0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b8e:	f7ff fb35 	bl	80001fc <HAL_GetTick>
 8000b92:	4602      	mov	r2, r0
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d901      	bls.n	8000ba0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	e067      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ba0:	4b35      	ldr	r3, [pc, #212]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d1f0      	bne.n	8000b8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a1b      	ldr	r3, [r3, #32]
 8000bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bb4:	d108      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bb6:	4b30      	ldr	r3, [pc, #192]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	492d      	ldr	r1, [pc, #180]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a19      	ldr	r1, [r3, #32]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd8:	430b      	orrs	r3, r1
 8000bda:	4927      	ldr	r1, [pc, #156]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000be0:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <HAL_RCC_OscConfig+0x4fc>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be6:	f7ff fb09 	bl	80001fc <HAL_GetTick>
 8000bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bec:	e008      	b.n	8000c00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bee:	f7ff fb05 	bl	80001fc <HAL_GetTick>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d901      	bls.n	8000c00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e037      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c00:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d0f0      	beq.n	8000bee <HAL_RCC_OscConfig+0x46a>
 8000c0c:	e02f      	b.n	8000c6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <HAL_RCC_OscConfig+0x4fc>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c14:	f7ff faf2 	bl	80001fc <HAL_GetTick>
 8000c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c1a:	e008      	b.n	8000c2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c1c:	f7ff faee 	bl	80001fc <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d901      	bls.n	8000c2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	e020      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1f0      	bne.n	8000c1c <HAL_RCC_OscConfig+0x498>
 8000c3a:	e018      	b.n	8000c6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69db      	ldr	r3, [r3, #28]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d101      	bne.n	8000c48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e013      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_RCC_OscConfig+0x4f4>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a1b      	ldr	r3, [r3, #32]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d106      	bne.n	8000c6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d001      	beq.n	8000c6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e000      	b.n	8000c70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40007000 	.word	0x40007000
 8000c80:	42420060 	.word	0x42420060

08000c84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d101      	bne.n	8000c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e0d0      	b.n	8000e3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c98:	4b6a      	ldr	r3, [pc, #424]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0307 	and.w	r3, r3, #7
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d910      	bls.n	8000cc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ca6:	4b67      	ldr	r3, [pc, #412]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f023 0207 	bic.w	r2, r3, #7
 8000cae:	4965      	ldr	r1, [pc, #404]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cb6:	4b63      	ldr	r3, [pc, #396]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d001      	beq.n	8000cc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e0b8      	b.n	8000e3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d020      	beq.n	8000d16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d005      	beq.n	8000cec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ce0:	4b59      	ldr	r3, [pc, #356]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	4a58      	ldr	r2, [pc, #352]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000ce6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000cea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 0308 	and.w	r3, r3, #8
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d005      	beq.n	8000d04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cf8:	4b53      	ldr	r3, [pc, #332]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	4a52      	ldr	r2, [pc, #328]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000cfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d04:	4b50      	ldr	r3, [pc, #320]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	494d      	ldr	r1, [pc, #308]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d12:	4313      	orrs	r3, r2
 8000d14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d040      	beq.n	8000da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d107      	bne.n	8000d3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2a:	4b47      	ldr	r3, [pc, #284]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d115      	bne.n	8000d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e07f      	b.n	8000e3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d107      	bne.n	8000d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d42:	4b41      	ldr	r3, [pc, #260]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d109      	bne.n	8000d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e073      	b.n	8000e3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d52:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e06b      	b.n	8000e3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d62:	4b39      	ldr	r3, [pc, #228]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f023 0203 	bic.w	r2, r3, #3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	4936      	ldr	r1, [pc, #216]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d70:	4313      	orrs	r3, r2
 8000d72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d74:	f7ff fa42 	bl	80001fc <HAL_GetTick>
 8000d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d7a:	e00a      	b.n	8000d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d7c:	f7ff fa3e 	bl	80001fc <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d901      	bls.n	8000d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e053      	b.n	8000e3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d92:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 020c 	and.w	r2, r3, #12
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d1eb      	bne.n	8000d7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000da4:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d210      	bcs.n	8000dd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000db2:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f023 0207 	bic.w	r2, r3, #7
 8000dba:	4922      	ldr	r1, [pc, #136]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <HAL_RCC_ClockConfig+0x1c0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d001      	beq.n	8000dd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e032      	b.n	8000e3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d008      	beq.n	8000df2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	4916      	ldr	r1, [pc, #88]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000dee:	4313      	orrs	r3, r2
 8000df0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d009      	beq.n	8000e12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	691b      	ldr	r3, [r3, #16]
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	490e      	ldr	r1, [pc, #56]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e12:	f000 f821 	bl	8000e58 <HAL_RCC_GetSysClockFreq>
 8000e16:	4601      	mov	r1, r0
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_RCC_ClockConfig+0x1c4>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	091b      	lsrs	r3, r3, #4
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_RCC_ClockConfig+0x1c8>)
 8000e24:	5cd3      	ldrb	r3, [r2, r3]
 8000e26:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2a:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <HAL_RCC_ClockConfig+0x1cc>)
 8000e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <HAL_RCC_ClockConfig+0x1d0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff f9a0 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40022000 	.word	0x40022000
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	08003350 	.word	0x08003350
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20000000 	.word	0x20000000

08000e58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e58:	b490      	push	{r4, r7}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e60:	1d3c      	adds	r4, r7, #4
 8000e62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e68:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e82:	4b23      	ldr	r3, [pc, #140]	; (8000f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f003 030c 	and.w	r3, r3, #12
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d002      	beq.n	8000e98 <HAL_RCC_GetSysClockFreq+0x40>
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d003      	beq.n	8000e9e <HAL_RCC_GetSysClockFreq+0x46>
 8000e96:	e02d      	b.n	8000ef4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e98:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e9a:	623b      	str	r3, [r7, #32]
      break;
 8000e9c:	e02d      	b.n	8000efa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	0c9b      	lsrs	r3, r3, #18
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000eaa:	4413      	add	r3, r2
 8000eac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000eb0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d013      	beq.n	8000ee4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	0c5b      	lsrs	r3, r3, #17
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000eca:	4413      	add	r3, r2
 8000ecc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000ed0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ed6:	fb02 f203 	mul.w	r2, r2, r3
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ee2:	e004      	b.n	8000eee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000ee8:	fb02 f303 	mul.w	r3, r2, r3
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	623b      	str	r3, [r7, #32]
      break;
 8000ef2:	e002      	b.n	8000efa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ef6:	623b      	str	r3, [r7, #32]
      break;
 8000ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000efa:	6a3b      	ldr	r3, [r7, #32]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc90      	pop	{r4, r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	080032a4 	.word	0x080032a4
 8000f0c:	080032b4 	.word	0x080032b4
 8000f10:	40021000 	.word	0x40021000
 8000f14:	007a1200 	.word	0x007a1200
 8000f18:	003d0900 	.word	0x003d0900

08000f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f20:	4b02      	ldr	r3, [pc, #8]	; (8000f2c <HAL_RCC_GetHCLKFreq+0x10>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	20000008 	.word	0x20000008

08000f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f34:	f7ff fff2 	bl	8000f1c <HAL_RCC_GetHCLKFreq>
 8000f38:	4601      	mov	r1, r0
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	0a1b      	lsrs	r3, r3, #8
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	4a03      	ldr	r2, [pc, #12]	; (8000f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f46:	5cd3      	ldrb	r3, [r2, r3]
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40021000 	.word	0x40021000
 8000f54:	08003360 	.word	0x08003360

08000f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f5c:	f7ff ffde 	bl	8000f1c <HAL_RCC_GetHCLKFreq>
 8000f60:	4601      	mov	r1, r0
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	0adb      	lsrs	r3, r3, #11
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	4a03      	ldr	r2, [pc, #12]	; (8000f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f6e:	5cd3      	ldrb	r3, [r2, r3]
 8000f70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	08003360 	.word	0x08003360

08000f80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <RCC_Delay+0x34>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <RCC_Delay+0x38>)
 8000f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f92:	0a5b      	lsrs	r3, r3, #9
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	fb02 f303 	mul.w	r3, r2, r3
 8000f9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f9c:	bf00      	nop
  }
  while (Delay --);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	1e5a      	subs	r2, r3, #1
 8000fa2:	60fa      	str	r2, [r7, #12]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f9      	bne.n	8000f9c <RCC_Delay+0x1c>
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	10624dd3 	.word	0x10624dd3

08000fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e01d      	b.n	800100a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d106      	bne.n	8000fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 fee6 	bl	8001db4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2202      	movs	r2, #2
 8000fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3304      	adds	r3, #4
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	f000 fa18 	bl	8001430 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001012:	b480      	push	{r7}
 8001014:	b085      	sub	sp, #20
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f042 0201 	orr.w	r2, r2, #1
 8001028:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2b06      	cmp	r3, #6
 800103a:	d007      	beq.n	800104c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0201 	orr.w	r2, r2, #1
 800104a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b02      	cmp	r3, #2
 800106c:	d122      	bne.n	80010b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b02      	cmp	r3, #2
 800107a:	d11b      	bne.n	80010b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f06f 0202 	mvn.w	r2, #2
 8001084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 f9ad 	bl	80013fa <HAL_TIM_IC_CaptureCallback>
 80010a0:	e005      	b.n	80010ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f9a0 	bl	80013e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 f9af 	bl	800140c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d122      	bne.n	8001108 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d11b      	bne.n	8001108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f06f 0204 	mvn.w	r2, #4
 80010d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2202      	movs	r2, #2
 80010de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 f983 	bl	80013fa <HAL_TIM_IC_CaptureCallback>
 80010f4:	e005      	b.n	8001102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 f976 	bl	80013e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 f985 	bl	800140c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	2b08      	cmp	r3, #8
 8001114:	d122      	bne.n	800115c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	f003 0308 	and.w	r3, r3, #8
 8001120:	2b08      	cmp	r3, #8
 8001122:	d11b      	bne.n	800115c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f06f 0208 	mvn.w	r2, #8
 800112c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2204      	movs	r2, #4
 8001132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f959 	bl	80013fa <HAL_TIM_IC_CaptureCallback>
 8001148:	e005      	b.n	8001156 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f94c 	bl	80013e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 f95b 	bl	800140c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	2b10      	cmp	r3, #16
 8001168:	d122      	bne.n	80011b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	f003 0310 	and.w	r3, r3, #16
 8001174:	2b10      	cmp	r3, #16
 8001176:	d11b      	bne.n	80011b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f06f 0210 	mvn.w	r2, #16
 8001180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2208      	movs	r2, #8
 8001186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f92f 	bl	80013fa <HAL_TIM_IC_CaptureCallback>
 800119c:	e005      	b.n	80011aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f922 	bl	80013e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 f931 	bl	800140c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d10e      	bne.n	80011dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d107      	bne.n	80011dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f06f 0201 	mvn.w	r2, #1
 80011d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 f8fd 	bl	80013d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e6:	2b80      	cmp	r3, #128	; 0x80
 80011e8:	d10e      	bne.n	8001208 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f4:	2b80      	cmp	r3, #128	; 0x80
 80011f6:	d107      	bne.n	8001208 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 fa59 	bl	80016ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001212:	2b40      	cmp	r3, #64	; 0x40
 8001214:	d10e      	bne.n	8001234 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001220:	2b40      	cmp	r3, #64	; 0x40
 8001222:	d107      	bne.n	8001234 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800122c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f8f5 	bl	800141e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	f003 0320 	and.w	r3, r3, #32
 800123e:	2b20      	cmp	r3, #32
 8001240:	d10e      	bne.n	8001260 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f003 0320 	and.w	r3, r3, #32
 800124c:	2b20      	cmp	r3, #32
 800124e:	d107      	bne.n	8001260 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f06f 0220 	mvn.w	r2, #32
 8001258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 fa24 	bl	80016a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001278:	2b01      	cmp	r3, #1
 800127a:	d101      	bne.n	8001280 <HAL_TIM_ConfigClockSource+0x18>
 800127c:	2302      	movs	r3, #2
 800127e:	e0a6      	b.n	80013ce <HAL_TIM_ConfigClockSource+0x166>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2202      	movs	r2, #2
 800128c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800129e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80012a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b40      	cmp	r3, #64	; 0x40
 80012b6:	d067      	beq.n	8001388 <HAL_TIM_ConfigClockSource+0x120>
 80012b8:	2b40      	cmp	r3, #64	; 0x40
 80012ba:	d80b      	bhi.n	80012d4 <HAL_TIM_ConfigClockSource+0x6c>
 80012bc:	2b10      	cmp	r3, #16
 80012be:	d073      	beq.n	80013a8 <HAL_TIM_ConfigClockSource+0x140>
 80012c0:	2b10      	cmp	r3, #16
 80012c2:	d802      	bhi.n	80012ca <HAL_TIM_ConfigClockSource+0x62>
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d06f      	beq.n	80013a8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80012c8:	e078      	b.n	80013bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80012ca:	2b20      	cmp	r3, #32
 80012cc:	d06c      	beq.n	80013a8 <HAL_TIM_ConfigClockSource+0x140>
 80012ce:	2b30      	cmp	r3, #48	; 0x30
 80012d0:	d06a      	beq.n	80013a8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80012d2:	e073      	b.n	80013bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80012d4:	2b70      	cmp	r3, #112	; 0x70
 80012d6:	d00d      	beq.n	80012f4 <HAL_TIM_ConfigClockSource+0x8c>
 80012d8:	2b70      	cmp	r3, #112	; 0x70
 80012da:	d804      	bhi.n	80012e6 <HAL_TIM_ConfigClockSource+0x7e>
 80012dc:	2b50      	cmp	r3, #80	; 0x50
 80012de:	d033      	beq.n	8001348 <HAL_TIM_ConfigClockSource+0xe0>
 80012e0:	2b60      	cmp	r3, #96	; 0x60
 80012e2:	d041      	beq.n	8001368 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80012e4:	e06a      	b.n	80013bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80012e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012ea:	d066      	beq.n	80013ba <HAL_TIM_ConfigClockSource+0x152>
 80012ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012f0:	d017      	beq.n	8001322 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80012f2:	e063      	b.n	80013bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6818      	ldr	r0, [r3, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	6899      	ldr	r1, [r3, #8]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	f000 f96d 	bl	80015e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001316:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	609a      	str	r2, [r3, #8]
      break;
 8001320:	e04c      	b.n	80013bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	6899      	ldr	r1, [r3, #8]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	f000 f956 	bl	80015e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001344:	609a      	str	r2, [r3, #8]
      break;
 8001346:	e039      	b.n	80013bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6818      	ldr	r0, [r3, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	6859      	ldr	r1, [r3, #4]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	461a      	mov	r2, r3
 8001356:	f000 f8cd 	bl	80014f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2150      	movs	r1, #80	; 0x50
 8001360:	4618      	mov	r0, r3
 8001362:	f000 f924 	bl	80015ae <TIM_ITRx_SetConfig>
      break;
 8001366:	e029      	b.n	80013bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6818      	ldr	r0, [r3, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	6859      	ldr	r1, [r3, #4]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	461a      	mov	r2, r3
 8001376:	f000 f8eb 	bl	8001550 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2160      	movs	r1, #96	; 0x60
 8001380:	4618      	mov	r0, r3
 8001382:	f000 f914 	bl	80015ae <TIM_ITRx_SetConfig>
      break;
 8001386:	e019      	b.n	80013bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	6859      	ldr	r1, [r3, #4]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	461a      	mov	r2, r3
 8001396:	f000 f8ad 	bl	80014f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2140      	movs	r1, #64	; 0x40
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 f904 	bl	80015ae <TIM_ITRx_SetConfig>
      break;
 80013a6:	e009      	b.n	80013bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	4610      	mov	r0, r2
 80013b4:	f000 f8fb 	bl	80015ae <TIM_ITRx_SetConfig>
      break;
 80013b8:	e000      	b.n	80013bc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80013ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr

080013fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a29      	ldr	r2, [pc, #164]	; (80014e8 <TIM_Base_SetConfig+0xb8>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d00b      	beq.n	8001460 <TIM_Base_SetConfig+0x30>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800144e:	d007      	beq.n	8001460 <TIM_Base_SetConfig+0x30>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a26      	ldr	r2, [pc, #152]	; (80014ec <TIM_Base_SetConfig+0xbc>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d003      	beq.n	8001460 <TIM_Base_SetConfig+0x30>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a25      	ldr	r2, [pc, #148]	; (80014f0 <TIM_Base_SetConfig+0xc0>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d108      	bne.n	8001472 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	4313      	orrs	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a1c      	ldr	r2, [pc, #112]	; (80014e8 <TIM_Base_SetConfig+0xb8>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d00b      	beq.n	8001492 <TIM_Base_SetConfig+0x62>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001480:	d007      	beq.n	8001492 <TIM_Base_SetConfig+0x62>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a19      	ldr	r2, [pc, #100]	; (80014ec <TIM_Base_SetConfig+0xbc>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d003      	beq.n	8001492 <TIM_Base_SetConfig+0x62>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a18      	ldr	r2, [pc, #96]	; (80014f0 <TIM_Base_SetConfig+0xc0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d108      	bne.n	80014a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <TIM_Base_SetConfig+0xb8>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d103      	bne.n	80014d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	691a      	ldr	r2, [r3, #16]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	615a      	str	r2, [r3, #20]
}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	40012c00 	.word	0x40012c00
 80014ec:	40000400 	.word	0x40000400
 80014f0:	40000800 	.word	0x40000800

080014f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	f023 0201 	bic.w	r2, r3, #1
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800151e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f023 030a 	bic.w	r3, r3, #10
 8001530:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	4313      	orrs	r3, r2
 8001538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	621a      	str	r2, [r3, #32]
}
 8001546:	bf00      	nop
 8001548:	371c      	adds	r7, #28
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	f023 0210 	bic.w	r2, r3, #16
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800157a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	031b      	lsls	r3, r3, #12
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	4313      	orrs	r3, r2
 8001584:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800158c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	621a      	str	r2, [r3, #32]
}
 80015a4:	bf00      	nop
 80015a6:	371c      	adds	r7, #28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b085      	sub	sp, #20
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	f043 0307 	orr.w	r3, r3, #7
 80015d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	609a      	str	r2, [r3, #8]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b087      	sub	sp, #28
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80015fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	021a      	lsls	r2, r3, #8
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	431a      	orrs	r2, r3
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	4313      	orrs	r3, r2
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	4313      	orrs	r3, r2
 800160e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	609a      	str	r2, [r3, #8]
}
 8001616:	bf00      	nop
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001634:	2302      	movs	r3, #2
 8001636:	e032      	b.n	800169e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2202      	movs	r2, #2
 8001644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800165e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	4313      	orrs	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001670:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	4313      	orrs	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr

080016ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e03f      	b.n	800175e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d106      	bne.n	80016f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 fb96 	bl	8001e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2224      	movs	r2, #36	; 0x24
 80016fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800170e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f829 	bl	8001768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	691a      	ldr	r2, [r3, #16]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001724:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	695a      	ldr	r2, [r3, #20]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001734:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001744:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2220      	movs	r2, #32
 8001750:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2220      	movs	r2, #32
 8001758:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	4313      	orrs	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80017a2:	f023 030c 	bic.w	r3, r3, #12
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	68f9      	ldr	r1, [r7, #12]
 80017ac:	430b      	orrs	r3, r1
 80017ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699a      	ldr	r2, [r3, #24]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a52      	ldr	r2, [pc, #328]	; (8001914 <UART_SetConfig+0x1ac>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d14e      	bne.n	800186e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80017d0:	f7ff fbc2 	bl	8000f58 <HAL_RCC_GetPCLK2Freq>
 80017d4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	009a      	lsls	r2, r3, #2
 80017e0:	441a      	add	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ec:	4a4a      	ldr	r2, [pc, #296]	; (8001918 <UART_SetConfig+0x1b0>)
 80017ee:	fba2 2303 	umull	r2, r3, r2, r3
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	0119      	lsls	r1, r3, #4
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	009a      	lsls	r2, r3, #2
 8001800:	441a      	add	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	fbb2 f2f3 	udiv	r2, r2, r3
 800180c:	4b42      	ldr	r3, [pc, #264]	; (8001918 <UART_SetConfig+0x1b0>)
 800180e:	fba3 0302 	umull	r0, r3, r3, r2
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	2064      	movs	r0, #100	; 0x64
 8001816:	fb00 f303 	mul.w	r3, r0, r3
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	3332      	adds	r3, #50	; 0x32
 8001820:	4a3d      	ldr	r2, [pc, #244]	; (8001918 <UART_SetConfig+0x1b0>)
 8001822:	fba2 2303 	umull	r2, r3, r2, r3
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800182c:	4419      	add	r1, r3
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	009a      	lsls	r2, r3, #2
 8001838:	441a      	add	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	fbb2 f2f3 	udiv	r2, r2, r3
 8001844:	4b34      	ldr	r3, [pc, #208]	; (8001918 <UART_SetConfig+0x1b0>)
 8001846:	fba3 0302 	umull	r0, r3, r3, r2
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	2064      	movs	r0, #100	; 0x64
 800184e:	fb00 f303 	mul.w	r3, r0, r3
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	3332      	adds	r3, #50	; 0x32
 8001858:	4a2f      	ldr	r2, [pc, #188]	; (8001918 <UART_SetConfig+0x1b0>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	f003 020f 	and.w	r2, r3, #15
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	440a      	add	r2, r1
 800186a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800186c:	e04d      	b.n	800190a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800186e:	f7ff fb5f 	bl	8000f30 <HAL_RCC_GetPCLK1Freq>
 8001872:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	009a      	lsls	r2, r3, #2
 800187e:	441a      	add	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	fbb2 f3f3 	udiv	r3, r2, r3
 800188a:	4a23      	ldr	r2, [pc, #140]	; (8001918 <UART_SetConfig+0x1b0>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	095b      	lsrs	r3, r3, #5
 8001892:	0119      	lsls	r1, r3, #4
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	009a      	lsls	r2, r3, #2
 800189e:	441a      	add	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80018aa:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <UART_SetConfig+0x1b0>)
 80018ac:	fba3 0302 	umull	r0, r3, r3, r2
 80018b0:	095b      	lsrs	r3, r3, #5
 80018b2:	2064      	movs	r0, #100	; 0x64
 80018b4:	fb00 f303 	mul.w	r3, r0, r3
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	3332      	adds	r3, #50	; 0x32
 80018be:	4a16      	ldr	r2, [pc, #88]	; (8001918 <UART_SetConfig+0x1b0>)
 80018c0:	fba2 2303 	umull	r2, r3, r2, r3
 80018c4:	095b      	lsrs	r3, r3, #5
 80018c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018ca:	4419      	add	r1, r3
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	009a      	lsls	r2, r3, #2
 80018d6:	441a      	add	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	fbb2 f2f3 	udiv	r2, r2, r3
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <UART_SetConfig+0x1b0>)
 80018e4:	fba3 0302 	umull	r0, r3, r3, r2
 80018e8:	095b      	lsrs	r3, r3, #5
 80018ea:	2064      	movs	r0, #100	; 0x64
 80018ec:	fb00 f303 	mul.w	r3, r0, r3
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	3332      	adds	r3, #50	; 0x32
 80018f6:	4a08      	ldr	r2, [pc, #32]	; (8001918 <UART_SetConfig+0x1b0>)
 80018f8:	fba2 2303 	umull	r2, r3, r2, r3
 80018fc:	095b      	lsrs	r3, r3, #5
 80018fe:	f003 020f 	and.w	r2, r3, #15
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	440a      	add	r2, r1
 8001908:	609a      	str	r2, [r3, #8]
}
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40013800 	.word	0x40013800
 8001918:	51eb851f 	.word	0x51eb851f

0800191c <LCD_Write4Bit>:

#include "main.h"
#include "LCD_display2.h"
#include <stdio.h>

void LCD_Write4Bit(uint8_t data){
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(D4_LCD_GPIO_Port, D4_LCD_Pin, ((data>>0)&1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	b2db      	uxtb	r3, r3
 800192e:	461a      	mov	r2, r3
 8001930:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001934:	4814      	ldr	r0, [pc, #80]	; (8001988 <LCD_Write4Bit+0x6c>)
 8001936:	f7fe ff0c 	bl	8000752 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_LCD_GPIO_Port, D5_LCD_Pin, ((data>>1)&1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	085b      	lsrs	r3, r3, #1
 800193e:	b2db      	uxtb	r3, r3
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	b2db      	uxtb	r3, r3
 8001946:	461a      	mov	r2, r3
 8001948:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800194c:	480e      	ldr	r0, [pc, #56]	; (8001988 <LCD_Write4Bit+0x6c>)
 800194e:	f7fe ff00 	bl	8000752 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_LCD_GPIO_Port, D6_LCD_Pin, ((data>>2)&1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	b2db      	uxtb	r3, r3
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	461a      	mov	r2, r3
 8001960:	2108      	movs	r1, #8
 8001962:	480a      	ldr	r0, [pc, #40]	; (800198c <LCD_Write4Bit+0x70>)
 8001964:	f7fe fef5 	bl	8000752 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_LCD_GPIO_Port, D7_LCD_Pin, ((data>>3)&1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	08db      	lsrs	r3, r3, #3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	2110      	movs	r1, #16
 8001978:	4804      	ldr	r0, [pc, #16]	; (800198c <LCD_Write4Bit+0x70>)
 800197a:	f7fe feea 	bl	8000752 <HAL_GPIO_WritePin>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40010800 	.word	0x40010800
 800198c:	40010c00 	.word	0x40010c00

08001990 <LCD_send>:
void LCD_send(_Bool mode, uint8_t data){
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	460a      	mov	r2, r1
 800199a:	71fb      	strb	r3, [r7, #7]
 800199c:	4613      	mov	r3, r2
 800199e:	71bb      	strb	r3, [r7, #6]
	if (mode) {RS_LCD(1);}
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d006      	beq.n	80019b4 <LCD_send+0x24>
 80019a6:	2201      	movs	r2, #1
 80019a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ac:	481d      	ldr	r0, [pc, #116]	; (8001a24 <LCD_send+0x94>)
 80019ae:	f7fe fed0 	bl	8000752 <HAL_GPIO_WritePin>
 80019b2:	e005      	b.n	80019c0 <LCD_send+0x30>
	else { RS_LCD(0);}
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ba:	481a      	ldr	r0, [pc, #104]	; (8001a24 <LCD_send+0x94>)
 80019bc:	f7fe fec9 	bl	8000752 <HAL_GPIO_WritePin>

	LCD_Write4Bit(data>>4);
 80019c0:	79bb      	ldrb	r3, [r7, #6]
 80019c2:	091b      	lsrs	r3, r3, #4
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ffa8 	bl	800191c <LCD_Write4Bit>
	E_LCD();
 80019cc:	2201      	movs	r2, #1
 80019ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d2:	4814      	ldr	r0, [pc, #80]	; (8001a24 <LCD_send+0x94>)
 80019d4:	f7fe febd 	bl	8000752 <HAL_GPIO_WritePin>
 80019d8:	2001      	movs	r0, #1
 80019da:	f7fe fc19 	bl	8000210 <HAL_Delay>
 80019de:	2200      	movs	r2, #0
 80019e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019e4:	480f      	ldr	r0, [pc, #60]	; (8001a24 <LCD_send+0x94>)
 80019e6:	f7fe feb4 	bl	8000752 <HAL_GPIO_WritePin>
 80019ea:	2001      	movs	r0, #1
 80019ec:	f7fe fc10 	bl	8000210 <HAL_Delay>
	LCD_Write4Bit(data);
 80019f0:	79bb      	ldrb	r3, [r7, #6]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff92 	bl	800191c <LCD_Write4Bit>
	E_LCD();
 80019f8:	2201      	movs	r2, #1
 80019fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019fe:	4809      	ldr	r0, [pc, #36]	; (8001a24 <LCD_send+0x94>)
 8001a00:	f7fe fea7 	bl	8000752 <HAL_GPIO_WritePin>
 8001a04:	2001      	movs	r0, #1
 8001a06:	f7fe fc03 	bl	8000210 <HAL_Delay>
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a10:	4804      	ldr	r0, [pc, #16]	; (8001a24 <LCD_send+0x94>)
 8001a12:	f7fe fe9e 	bl	8000752 <HAL_GPIO_WritePin>
 8001a16:	2001      	movs	r0, #1
 8001a18:	f7fe fbfa 	bl	8000210 <HAL_Delay>

}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40010c00 	.word	0x40010c00

08001a28 <LCD_clear>:
void LCD_clear(uint8_t x, uint8_t y){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	460a      	mov	r2, r1
 8001a32:	71fb      	strb	r3, [r7, #7]
 8001a34:	4613      	mov	r3, r2
 8001a36:	71bb      	strb	r3, [r7, #6]
	LCD_Commend(0x01);
 8001a38:	2101      	movs	r1, #1
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f7ff ffa8 	bl	8001990 <LCD_send>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <LCD_init>:
void LCD_init(void){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	LCD_Commend(0x33);
 8001a4c:	2133      	movs	r1, #51	; 0x33
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f7ff ff9e 	bl	8001990 <LCD_send>
	LCD_Commend(0x32);
 8001a54:	2132      	movs	r1, #50	; 0x32
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7ff ff9a 	bl	8001990 <LCD_send>
	LCD_Commend(0x28);
 8001a5c:	2128      	movs	r1, #40	; 0x28
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff ff96 	bl	8001990 <LCD_send>
	LCD_Commend(0x0c);
 8001a64:	210c      	movs	r1, #12
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7ff ff92 	bl	8001990 <LCD_send>
	LCD_Commend(0x06);
 8001a6c:	2106      	movs	r1, #6
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f7ff ff8e 	bl	8001990 <LCD_send>
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <LCD_print>:
void LCD_print(char *pData){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	while(*pData){
 8001a80:	e007      	b.n	8001a92 <LCD_print+0x1a>
		LCD_Data(*pData++);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f7ff ff7f 	bl	8001990 <LCD_send>
	while(*pData){
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f3      	bne.n	8001a82 <LCD_print+0xa>
	}
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <LCD_SetCursor>:
void LCD_SetCursor(uint8_t x, uint8_t y){
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	460a      	mov	r2, r1
 8001aac:	71fb      	strb	r3, [r7, #7]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	71bb      	strb	r3, [r7, #6]
	if (y == 0) LCD_Commend( 0x80 + x);
 8001ab2:	79bb      	ldrb	r3, [r7, #6]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d106      	bne.n	8001ac6 <LCD_SetCursor+0x24>
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	3b80      	subs	r3, #128	; 0x80
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	4619      	mov	r1, r3
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f7ff ff65 	bl	8001990 <LCD_send>
	if (y == 1) LCD_Commend( 0xc0 + x);
 8001ac6:	79bb      	ldrb	r3, [r7, #6]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d106      	bne.n	8001ada <LCD_SetCursor+0x38>
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	3b40      	subs	r3, #64	; 0x40
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f7ff ff5b 	bl	8001990 <LCD_send>
	if (y == 2) LCD_Commend( 0x94 + x);
 8001ada:	79bb      	ldrb	r3, [r7, #6]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d106      	bne.n	8001aee <LCD_SetCursor+0x4c>
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	3b6c      	subs	r3, #108	; 0x6c
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f7ff ff51 	bl	8001990 <LCD_send>
	if (y == 3) LCD_Commend( 0xd4 + x);
 8001aee:	79bb      	ldrb	r3, [r7, #6]
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d106      	bne.n	8001b02 <LCD_SetCursor+0x60>
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	3b2c      	subs	r3, #44	; 0x2c
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	4619      	mov	r1, r3
 8001afc:	2000      	movs	r0, #0
 8001afe:	f7ff ff47 	bl	8001990 <LCD_send>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <LCD_printnum>:

void LCD_printnum(uint16_t num){
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	80fb      	strh	r3, [r7, #6]
	char isi[20];
	sprintf(isi, "%d", num);
 8001b16:	88fa      	ldrh	r2, [r7, #6]
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	4906      	ldr	r1, [pc, #24]	; (8001b38 <LCD_printnum+0x2c>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 ffa2 	bl	8002a68 <siprintf>
	LCD_print(isi);
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ffa5 	bl	8001a78 <LCD_print>
}
 8001b2e:	bf00      	nop
 8001b30:	3720      	adds	r7, #32
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	080032b8 	.word	0x080032b8

08001b3c <SystemClock_Config>:
#include "stm32f1xx_it.h"
#include "main.h"
#include "hardwareinit.h"

void SystemClock_Config(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b090      	sub	sp, #64	; 0x40
 8001b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b42:	f107 0318 	add.w	r3, r7, #24
 8001b46:	2228      	movs	r2, #40	; 0x28
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 ff84 	bl	8002a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
 8001b5c:	611a      	str	r2, [r3, #16]


  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b70:	2302      	movs	r3, #2
 8001b72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b7a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b80:	f107 0318 	add.w	r3, r7, #24
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe fdfd 	bl	8000784 <HAL_RCC_OscConfig>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b90:	f000 f8d8 	bl	8001d44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b94:	230f      	movs	r3, #15
 8001b96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ba4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	2102      	movs	r1, #2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f868 	bl	8000c84 <HAL_RCC_ClockConfig>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001bba:	f000 f8c3 	bl	8001d44 <Error_Handler>
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	3740      	adds	r7, #64	; 0x40
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bce:	f107 0310 	add.w	r3, r7, #16
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bdc:	4b3b      	ldr	r3, [pc, #236]	; (8001ccc <MX_GPIO_Init+0x104>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a3a      	ldr	r2, [pc, #232]	; (8001ccc <MX_GPIO_Init+0x104>)
 8001be2:	f043 0310 	orr.w	r3, r3, #16
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b38      	ldr	r3, [pc, #224]	; (8001ccc <MX_GPIO_Init+0x104>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf4:	4b35      	ldr	r3, [pc, #212]	; (8001ccc <MX_GPIO_Init+0x104>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	4a34      	ldr	r2, [pc, #208]	; (8001ccc <MX_GPIO_Init+0x104>)
 8001bfa:	f043 0320 	orr.w	r3, r3, #32
 8001bfe:	6193      	str	r3, [r2, #24]
 8001c00:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <MX_GPIO_Init+0x104>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0320 	and.w	r3, r3, #32
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ccc <MX_GPIO_Init+0x104>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	4a2e      	ldr	r2, [pc, #184]	; (8001ccc <MX_GPIO_Init+0x104>)
 8001c12:	f043 0304 	orr.w	r3, r3, #4
 8001c16:	6193      	str	r3, [r2, #24]
 8001c18:	4b2c      	ldr	r3, [pc, #176]	; (8001ccc <MX_GPIO_Init+0x104>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c24:	4b29      	ldr	r3, [pc, #164]	; (8001ccc <MX_GPIO_Init+0x104>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a28      	ldr	r2, [pc, #160]	; (8001ccc <MX_GPIO_Init+0x104>)
 8001c2a:	f043 0308 	orr.w	r3, r3, #8
 8001c2e:	6193      	str	r3, [r2, #24]
 8001c30:	4b26      	ldr	r3, [pc, #152]	; (8001ccc <MX_GPIO_Init+0x104>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENA1_LAP_Pin|ENA2_LAP_Pin|ENA3_LAP_Pin|D0_LAP_Pin
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f249 01f0 	movw	r1, #37104	; 0x90f0
 8001c42:	4823      	ldr	r0, [pc, #140]	; (8001cd0 <MX_GPIO_Init+0x108>)
 8001c44:	f7fe fd85 	bl	8000752 <HAL_GPIO_WritePin>
                          |D4_LCD_Pin|D5_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D1_LAP_Pin|D2_LAP_Pin|D3_LAP_Pin|buzzer_Pin
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f24a 411f 	movw	r1, #42015	; 0xa41f
 8001c4e:	4821      	ldr	r0, [pc, #132]	; (8001cd4 <MX_GPIO_Init+0x10c>)
 8001c50:	f7fe fd7f 	bl	8000752 <HAL_GPIO_WritePin>
                          |RS_LCD_Pin|E_LCD_Pin|D6_LCD_Pin|D7_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button_RESET_Pin Button_StartStop_Pin */
  GPIO_InitStruct.Pin = Button_RESET_Pin|Button_StartStop_Pin;
 8001c54:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c62:	f107 0310 	add.w	r3, r7, #16
 8001c66:	4619      	mov	r1, r3
 8001c68:	481b      	ldr	r0, [pc, #108]	; (8001cd8 <MX_GPIO_Init+0x110>)
 8001c6a:	f7fe fc01 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pins : sens1_Pin sens2_Pin sens3_Pin */
  GPIO_InitStruct.Pin = sens1_Pin|sens2_Pin|sens3_Pin;
 8001c6e:	2307      	movs	r3, #7
 8001c70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7a:	f107 0310 	add.w	r3, r7, #16
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4813      	ldr	r0, [pc, #76]	; (8001cd0 <MX_GPIO_Init+0x108>)
 8001c82:	f7fe fbf5 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENA1_LAP_Pin ENA2_LAP_Pin ENA3_LAP_Pin D0_LAP_Pin
                           D4_LCD_Pin D5_LCD_Pin */
  GPIO_InitStruct.Pin = ENA1_LAP_Pin|ENA2_LAP_Pin|ENA3_LAP_Pin|D0_LAP_Pin
 8001c86:	f249 03f0 	movw	r3, #37104	; 0x90f0
 8001c8a:	613b      	str	r3, [r7, #16]
                          |D4_LCD_Pin|D5_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2302      	movs	r3, #2
 8001c96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	480c      	ldr	r0, [pc, #48]	; (8001cd0 <MX_GPIO_Init+0x108>)
 8001ca0:	f7fe fbe6 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_LAP_Pin D2_LAP_Pin D3_LAP_Pin buzzer_Pin
                           RS_LCD_Pin E_LCD_Pin D6_LCD_Pin D7_LCD_Pin */
  GPIO_InitStruct.Pin = D1_LAP_Pin|D2_LAP_Pin|D3_LAP_Pin|buzzer_Pin
 8001ca4:	f24a 431f 	movw	r3, #42015	; 0xa41f
 8001ca8:	613b      	str	r3, [r7, #16]
                          |RS_LCD_Pin|E_LCD_Pin|D6_LCD_Pin|D7_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb6:	f107 0310 	add.w	r3, r7, #16
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <MX_GPIO_Init+0x10c>)
 8001cbe:	f7fe fbd7 	bl	8000470 <HAL_GPIO_Init>

}
 8001cc2:	bf00      	nop
 8001cc4:	3720      	adds	r7, #32
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40010800 	.word	0x40010800
 8001cd4:	40010c00 	.word	0x40010c00
 8001cd8:	40011000 	.word	0x40011000

08001cdc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ce0:	f7fe fa34 	bl	800014c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001ce4:	f7ff ff2a 	bl	8001b3c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ce8:	f7ff ff6e 	bl	8001bc8 <MX_GPIO_Init>
	MX_TIM2_Init();
 8001cec:	f000 fda6 	bl	800283c <MX_TIM2_Init>
	MX_TIM3_Init();
 8001cf0:	f000 fdf0 	bl	80028d4 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8001cf4:	f000 fe3c 	bl	8002970 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	task_init();
 8001cf8:	f000 f976 	bl	8001fe8 <task_init>
	//	LCD_SetCursor(3,1);
	//	LCD_print("BALAPAN MOBIL");
	//	LCD_SetCursor(3,2);
	//	LCD_print("by : FIRMANWM")

	HAL_TIM_Base_Start_IT(&htim2);
 8001cfc:	480d      	ldr	r0, [pc, #52]	; (8001d34 <main+0x58>)
 8001cfe:	f7ff f988 	bl	8001012 <HAL_TIM_Base_Start_IT>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		//task_mulai();
		if (HAL_GPIO_ReadPin(Button_StartStop_GPIO_Port, Button_StartStop_Pin)==GPIO_PIN_SET){
 8001d02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d06:	480c      	ldr	r0, [pc, #48]	; (8001d38 <main+0x5c>)
 8001d08:	f7fe fd0c 	bl	8000724 <HAL_GPIO_ReadPin>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d107      	bne.n	8001d22 <main+0x46>
			LCD_SetCursor(0, 0);
 8001d12:	2100      	movs	r1, #0
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7ff fec4 	bl	8001aa2 <LCD_SetCursor>
			LCD_print("button bisa");
 8001d1a:	4808      	ldr	r0, [pc, #32]	; (8001d3c <main+0x60>)
 8001d1c:	f7ff feac 	bl	8001a78 <LCD_print>
 8001d20:	e7ef      	b.n	8001d02 <main+0x26>
		}
		else {
			LCD_SetCursor(0, 3);
 8001d22:	2103      	movs	r1, #3
 8001d24:	2000      	movs	r0, #0
 8001d26:	f7ff febc 	bl	8001aa2 <LCD_SetCursor>
			LCD_print("button tidak bisa");
 8001d2a:	4805      	ldr	r0, [pc, #20]	; (8001d40 <main+0x64>)
 8001d2c:	f7ff fea4 	bl	8001a78 <LCD_print>
		if (HAL_GPIO_ReadPin(Button_StartStop_GPIO_Port, Button_StartStop_Pin)==GPIO_PIN_SET){
 8001d30:	e7e7      	b.n	8001d02 <main+0x26>
 8001d32:	bf00      	nop
 8001d34:	20000124 	.word	0x20000124
 8001d38:	40011000 	.word	0x40011000
 8001d3c:	080032bc 	.word	0x080032bc
 8001d40:	080032c8 	.word	0x080032c8

08001d44 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_MspInit+0x5c>)
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	4a14      	ldr	r2, [pc, #80]	; (8001dac <HAL_MspInit+0x5c>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6193      	str	r3, [r2, #24]
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_MspInit+0x5c>)
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <HAL_MspInit+0x5c>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <HAL_MspInit+0x5c>)
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d78:	61d3      	str	r3, [r2, #28]
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_MspInit+0x5c>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_MspInit+0x60>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <HAL_MspInit+0x60>)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40010000 	.word	0x40010000

08001db4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc4:	d114      	bne.n	8001df0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_TIM_Base_MspInit+0x68>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <HAL_TIM_Base_MspInit+0x68>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	61d3      	str	r3, [r2, #28]
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_TIM_Base_MspInit+0x68>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2100      	movs	r1, #0
 8001de2:	201c      	movs	r0, #28
 8001de4:	f7fe fb0d 	bl	8000402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001de8:	201c      	movs	r0, #28
 8001dea:	f7fe fb26 	bl	800043a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001dee:	e010      	b.n	8001e12 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <HAL_TIM_Base_MspInit+0x6c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d10b      	bne.n	8001e12 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <HAL_TIM_Base_MspInit+0x68>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <HAL_TIM_Base_MspInit+0x68>)
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	61d3      	str	r3, [r2, #28]
 8001e06:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_TIM_Base_MspInit+0x68>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40000400 	.word	0x40000400

08001e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0310 	add.w	r3, r7, #16
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a1c      	ldr	r2, [pc, #112]	; (8001eb0 <HAL_UART_MspInit+0x8c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d131      	bne.n	8001ea8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e44:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_UART_MspInit+0x90>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	4a1a      	ldr	r2, [pc, #104]	; (8001eb4 <HAL_UART_MspInit+0x90>)
 8001e4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e4e:	6193      	str	r3, [r2, #24]
 8001e50:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <HAL_UART_MspInit+0x90>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5c:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_UART_MspInit+0x90>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	4a14      	ldr	r2, [pc, #80]	; (8001eb4 <HAL_UART_MspInit+0x90>)
 8001e62:	f043 0304 	orr.w	r3, r3, #4
 8001e66:	6193      	str	r3, [r2, #24]
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_UART_MspInit+0x90>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e82:	f107 0310 	add.w	r3, r7, #16
 8001e86:	4619      	mov	r1, r3
 8001e88:	480b      	ldr	r0, [pc, #44]	; (8001eb8 <HAL_UART_MspInit+0x94>)
 8001e8a:	f7fe faf1 	bl	8000470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <HAL_UART_MspInit+0x94>)
 8001ea4:	f7fe fae4 	bl	8000470 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ea8:	bf00      	nop
 8001eaa:	3720      	adds	r7, #32
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40013800 	.word	0x40013800
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40010800 	.word	0x40010800

08001ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <HardFault_Handler+0x4>

08001ece <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed2:	e7fe      	b.n	8001ed2 <MemManage_Handler+0x4>

08001ed4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <BusFault_Handler+0x4>

08001eda <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <UsageFault_Handler+0x4>

08001ee0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f08:	f7fe f966 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f14:	4803      	ldr	r0, [pc, #12]	; (8001f24 <TIM2_IRQHandler+0x14>)
 8001f16:	f7ff f89f 	bl	8001058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  task_mulai();
 8001f1a:	f000 f8e3 	bl	80020e4 <task_mulai>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000124 	.word	0x20000124

08001f28 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <_sbrk+0x50>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <_sbrk+0x16>
		heap_end = &end;
 8001f38:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <_sbrk+0x50>)
 8001f3a:	4a10      	ldr	r2, [pc, #64]	; (8001f7c <_sbrk+0x54>)
 8001f3c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <_sbrk+0x50>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <_sbrk+0x50>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	466a      	mov	r2, sp
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d907      	bls.n	8001f62 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f52:	f000 fd57 	bl	8002a04 <__errno>
 8001f56:	4602      	mov	r2, r0
 8001f58:	230c      	movs	r3, #12
 8001f5a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f60:	e006      	b.n	8001f70 <_sbrk+0x48>
	}

	heap_end += incr;
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <_sbrk+0x50>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	4a03      	ldr	r2, [pc, #12]	; (8001f78 <_sbrk+0x50>)
 8001f6c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000094 	.word	0x20000094
 8001f7c:	200001d8 	.word	0x200001d8

08001f80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001f84:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <SystemInit+0x5c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a14      	ldr	r2, [pc, #80]	; (8001fdc <SystemInit+0x5c>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <SystemInit+0x5c>)
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	4911      	ldr	r1, [pc, #68]	; (8001fdc <SystemInit+0x5c>)
 8001f96:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <SystemInit+0x60>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <SystemInit+0x5c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0e      	ldr	r2, [pc, #56]	; (8001fdc <SystemInit+0x5c>)
 8001fa2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001faa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <SystemInit+0x5c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <SystemInit+0x5c>)
 8001fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <SystemInit+0x5c>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <SystemInit+0x5c>)
 8001fbe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001fc2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <SystemInit+0x5c>)
 8001fc6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001fca:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <SystemInit+0x64>)
 8001fce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fd2:	609a      	str	r2, [r3, #8]
#endif 
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	f8ff0000 	.word	0xf8ff0000
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <task_init>:
unsigned char bouncing4=0xFF;
unsigned char bouncing5=0xFF;

_Bool stopwatchEna;

void task_init(void){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
	miliSecond=0;
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <task_init+0x20>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	801a      	strh	r2, [r3, #0]
	second=0;
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <task_init+0x24>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
	minute=0;
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <task_init+0x28>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
	LCD_init();
 8001ffe:	f7ff fd23 	bl	8001a48 <LCD_init>
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	2000016c 	.word	0x2000016c
 800200c:	20000168 	.word	0x20000168
 8002010:	20000169 	.word	0x20000169

08002014 <Stopwatch_Reset>:
				minute++;
			}
		}
	}
}
void Stopwatch_Reset(void){
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
	miliSecond=0; second=0; minute=0;
 800201a:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <Stopwatch_Reset+0x94>)
 800201c:	2200      	movs	r2, #0
 800201e:	801a      	strh	r2, [r3, #0]
 8002020:	4b22      	ldr	r3, [pc, #136]	; (80020ac <Stopwatch_Reset+0x98>)
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
 8002026:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <Stopwatch_Reset+0x9c>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]

	lap_1=0;	lap_2=0;	lap_3=0;
 800202c:	4b21      	ldr	r3, [pc, #132]	; (80020b4 <Stopwatch_Reset+0xa0>)
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
 8002032:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <Stopwatch_Reset+0xa4>)
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	4b20      	ldr	r3, [pc, #128]	; (80020bc <Stopwatch_Reset+0xa8>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; i<5; i++){
 800203e:	2300      	movs	r3, #0
 8002040:	71fb      	strb	r3, [r7, #7]
 8002042:	e029      	b.n	8002098 <Stopwatch_Reset+0x84>
			milisecondA[i]=0;	milisecondB[i]=0;	milisecondC[i]=0;
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <Stopwatch_Reset+0xac>)
 8002048:	2100      	movs	r1, #0
 800204a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	4a1c      	ldr	r2, [pc, #112]	; (80020c4 <Stopwatch_Reset+0xb0>)
 8002052:	2100      	movs	r1, #0
 8002054:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	4a1b      	ldr	r2, [pc, #108]	; (80020c8 <Stopwatch_Reset+0xb4>)
 800205c:	2100      	movs	r1, #0
 800205e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			secondA[i]=0;	secondB[i]=0;	secondC[i]=0;
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	4a19      	ldr	r2, [pc, #100]	; (80020cc <Stopwatch_Reset+0xb8>)
 8002066:	2100      	movs	r1, #0
 8002068:	54d1      	strb	r1, [r2, r3]
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	4a18      	ldr	r2, [pc, #96]	; (80020d0 <Stopwatch_Reset+0xbc>)
 800206e:	2100      	movs	r1, #0
 8002070:	54d1      	strb	r1, [r2, r3]
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	4a17      	ldr	r2, [pc, #92]	; (80020d4 <Stopwatch_Reset+0xc0>)
 8002076:	2100      	movs	r1, #0
 8002078:	54d1      	strb	r1, [r2, r3]
			minuteA[i]=0;	minuteB[i]=0;	minuteC[i]=0;
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <Stopwatch_Reset+0xc4>)
 800207e:	2100      	movs	r1, #0
 8002080:	54d1      	strb	r1, [r2, r3]
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	4a15      	ldr	r2, [pc, #84]	; (80020dc <Stopwatch_Reset+0xc8>)
 8002086:	2100      	movs	r1, #0
 8002088:	54d1      	strb	r1, [r2, r3]
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	4a14      	ldr	r2, [pc, #80]	; (80020e0 <Stopwatch_Reset+0xcc>)
 800208e:	2100      	movs	r1, #0
 8002090:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i=0; i<5; i++){
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	3301      	adds	r3, #1
 8002096:	71fb      	strb	r3, [r7, #7]
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	2b04      	cmp	r3, #4
 800209c:	d9d2      	bls.n	8002044 <Stopwatch_Reset+0x30>
		}
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	2000016c 	.word	0x2000016c
 80020ac:	20000168 	.word	0x20000168
 80020b0:	20000169 	.word	0x20000169
 80020b4:	20000164 	.word	0x20000164
 80020b8:	2000016f 	.word	0x2000016f
 80020bc:	2000016a 	.word	0x2000016a
 80020c0:	20000184 	.word	0x20000184
 80020c4:	20000190 	.word	0x20000190
 80020c8:	200001b4 	.word	0x200001b4
 80020cc:	200001c4 	.word	0x200001c4
 80020d0:	200001a0 	.word	0x200001a0
 80020d4:	2000017c 	.word	0x2000017c
 80020d8:	200001cc 	.word	0x200001cc
 80020dc:	20000174 	.word	0x20000174
 80020e0:	200001a8 	.word	0x200001a8

080020e4 <task_mulai>:

void task_mulai(void){
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(Button_StartStop_GPIO_Port, Button_StartStop_Pin)==GPIO_PIN_RESET){
 80020ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020ee:	4887      	ldr	r0, [pc, #540]	; (800230c <task_mulai+0x228>)
 80020f0:	f7fe fb18 	bl	8000724 <HAL_GPIO_ReadPin>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d11c      	bne.n	8002134 <task_mulai+0x50>
		if(timeout1++ > timeoutVal){
 80020fa:	4b85      	ldr	r3, [pc, #532]	; (8002310 <task_mulai+0x22c>)
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	b291      	uxth	r1, r2
 8002102:	4a83      	ldr	r2, [pc, #524]	; (8002310 <task_mulai+0x22c>)
 8002104:	8011      	strh	r1, [r2, #0]
 8002106:	4a83      	ldr	r2, [pc, #524]	; (8002314 <task_mulai+0x230>)
 8002108:	8812      	ldrh	r2, [r2, #0]
 800210a:	4293      	cmp	r3, r2
 800210c:	d907      	bls.n	800211e <task_mulai+0x3a>
			stopwatchEna = 0;
 800210e:	4b82      	ldr	r3, [pc, #520]	; (8002318 <task_mulai+0x234>)
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
			task_errordis(1, "Button START/STOP Error");
 8002114:	4981      	ldr	r1, [pc, #516]	; (800231c <task_mulai+0x238>)
 8002116:	2001      	movs	r0, #1
 8002118:	f000 f9fe 	bl	8002518 <task_errordis>
 800211c:	e013      	b.n	8002146 <task_mulai+0x62>
		}
		else
			bouncing1 = (bouncing1<<1)|1;
 800211e:	4b80      	ldr	r3, [pc, #512]	; (8002320 <task_mulai+0x23c>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	b25b      	sxtb	r3, r3
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	b25b      	sxtb	r3, r3
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4b7c      	ldr	r3, [pc, #496]	; (8002320 <task_mulai+0x23c>)
 8002130:	701a      	strb	r2, [r3, #0]
 8002132:	e008      	b.n	8002146 <task_mulai+0x62>
	}
	else{
		timeout1 = 0;
 8002134:	4b76      	ldr	r3, [pc, #472]	; (8002310 <task_mulai+0x22c>)
 8002136:	2200      	movs	r2, #0
 8002138:	801a      	strh	r2, [r3, #0]
		bouncing1 = bouncing1<<1;
 800213a:	4b79      	ldr	r3, [pc, #484]	; (8002320 <task_mulai+0x23c>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	b2da      	uxtb	r2, r3
 8002142:	4b77      	ldr	r3, [pc, #476]	; (8002320 <task_mulai+0x23c>)
 8002144:	701a      	strb	r2, [r3, #0]
	}
	if (bouncing1==3){
 8002146:	4b76      	ldr	r3, [pc, #472]	; (8002320 <task_mulai+0x23c>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b03      	cmp	r3, #3
 800214c:	d111      	bne.n	8002172 <task_mulai+0x8e>
		stopwatchEna = !(stopwatchEna);
 800214e:	4b72      	ldr	r3, [pc, #456]	; (8002318 <task_mulai+0x234>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	bf14      	ite	ne
 8002156:	2301      	movne	r3, #1
 8002158:	2300      	moveq	r3, #0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	f083 0301 	eor.w	r3, r3, #1
 8002160:	b2db      	uxtb	r3, r3
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	b2da      	uxtb	r2, r3
 8002168:	4b6b      	ldr	r3, [pc, #428]	; (8002318 <task_mulai+0x234>)
 800216a:	701a      	strb	r2, [r3, #0]
		task_display(0);
 800216c:	2000      	movs	r0, #0
 800216e:	f000 f9fd 	bl	800256c <task_display>
	}
	if (HAL_GPIO_ReadPin(Button_RESET_GPIO_Port, Button_RESET_Pin)==GPIO_PIN_RESET){
 8002172:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002176:	4865      	ldr	r0, [pc, #404]	; (800230c <task_mulai+0x228>)
 8002178:	f7fe fad4 	bl	8000724 <HAL_GPIO_ReadPin>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d11c      	bne.n	80021bc <task_mulai+0xd8>
		if(timeout2++ > timeoutVal){
 8002182:	4b68      	ldr	r3, [pc, #416]	; (8002324 <task_mulai+0x240>)
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	b291      	uxth	r1, r2
 800218a:	4a66      	ldr	r2, [pc, #408]	; (8002324 <task_mulai+0x240>)
 800218c:	8011      	strh	r1, [r2, #0]
 800218e:	4a61      	ldr	r2, [pc, #388]	; (8002314 <task_mulai+0x230>)
 8002190:	8812      	ldrh	r2, [r2, #0]
 8002192:	4293      	cmp	r3, r2
 8002194:	d907      	bls.n	80021a6 <task_mulai+0xc2>
			stopwatchEna = 0;
 8002196:	4b60      	ldr	r3, [pc, #384]	; (8002318 <task_mulai+0x234>)
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
			task_errordis(1, "Button Reset Error");
 800219c:	4962      	ldr	r1, [pc, #392]	; (8002328 <task_mulai+0x244>)
 800219e:	2001      	movs	r0, #1
 80021a0:	f000 f9ba 	bl	8002518 <task_errordis>
 80021a4:	e013      	b.n	80021ce <task_mulai+0xea>
		}
		else
			bouncing2 = (bouncing2<<1)|1;
 80021a6:	4b61      	ldr	r3, [pc, #388]	; (800232c <task_mulai+0x248>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	b25b      	sxtb	r3, r3
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	b25b      	sxtb	r3, r3
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b5d      	ldr	r3, [pc, #372]	; (800232c <task_mulai+0x248>)
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	e008      	b.n	80021ce <task_mulai+0xea>
	}
	else{
		timeout2 = 0;
 80021bc:	4b59      	ldr	r3, [pc, #356]	; (8002324 <task_mulai+0x240>)
 80021be:	2200      	movs	r2, #0
 80021c0:	801a      	strh	r2, [r3, #0]
		bouncing2 = bouncing2<<1;
 80021c2:	4b5a      	ldr	r3, [pc, #360]	; (800232c <task_mulai+0x248>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	4b58      	ldr	r3, [pc, #352]	; (800232c <task_mulai+0x248>)
 80021cc:	701a      	strb	r2, [r3, #0]
	}
	if (bouncing2==3){
 80021ce:	4b57      	ldr	r3, [pc, #348]	; (800232c <task_mulai+0x248>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d101      	bne.n	80021da <task_mulai+0xf6>
		Stopwatch_Reset();
 80021d6:	f7ff ff1d 	bl	8002014 <Stopwatch_Reset>
	}

	//sensor aktif saat stopwatch aktif

	if (stopwatchEna){
 80021da:	4b4f      	ldr	r3, [pc, #316]	; (8002318 <task_mulai+0x234>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8170 	beq.w	80024c4 <task_mulai+0x3e0>
		//sensor 1
		if (HAL_GPIO_ReadPin(sens1_GPIO_Port, sens1_Pin)==GPIO_PIN_RESET){
 80021e4:	2101      	movs	r1, #1
 80021e6:	4852      	ldr	r0, [pc, #328]	; (8002330 <task_mulai+0x24c>)
 80021e8:	f7fe fa9c 	bl	8000724 <HAL_GPIO_ReadPin>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d120      	bne.n	8002234 <task_mulai+0x150>
			if (timeout3++ > timeoutVal){
 80021f2:	4b50      	ldr	r3, [pc, #320]	; (8002334 <task_mulai+0x250>)
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	b291      	uxth	r1, r2
 80021fa:	4a4e      	ldr	r2, [pc, #312]	; (8002334 <task_mulai+0x250>)
 80021fc:	8011      	strh	r1, [r2, #0]
 80021fe:	4a45      	ldr	r2, [pc, #276]	; (8002314 <task_mulai+0x230>)
 8002200:	8812      	ldrh	r2, [r2, #0]
 8002202:	4293      	cmp	r3, r2
 8002204:	d90b      	bls.n	800221e <task_mulai+0x13a>
				stopwatchEna = 0;
 8002206:	4b44      	ldr	r3, [pc, #272]	; (8002318 <task_mulai+0x234>)
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
				LCD_clear(0, 0);
 800220c:	2100      	movs	r1, #0
 800220e:	2000      	movs	r0, #0
 8002210:	f7ff fc0a 	bl	8001a28 <LCD_clear>
				task_errordis(1, "Sensor 1 Error");
 8002214:	4948      	ldr	r1, [pc, #288]	; (8002338 <task_mulai+0x254>)
 8002216:	2001      	movs	r0, #1
 8002218:	f000 f97e 	bl	8002518 <task_errordis>
 800221c:	e013      	b.n	8002246 <task_mulai+0x162>
			}
			else
				bouncing3 = (bouncing3<<1)|1;
 800221e:	4b47      	ldr	r3, [pc, #284]	; (800233c <task_mulai+0x258>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	b25b      	sxtb	r3, r3
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	b25b      	sxtb	r3, r3
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4b43      	ldr	r3, [pc, #268]	; (800233c <task_mulai+0x258>)
 8002230:	701a      	strb	r2, [r3, #0]
 8002232:	e008      	b.n	8002246 <task_mulai+0x162>
		}
		else {
			timeout3=0;
 8002234:	4b3f      	ldr	r3, [pc, #252]	; (8002334 <task_mulai+0x250>)
 8002236:	2200      	movs	r2, #0
 8002238:	801a      	strh	r2, [r3, #0]
			bouncing3 = bouncing3<<1;
 800223a:	4b40      	ldr	r3, [pc, #256]	; (800233c <task_mulai+0x258>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	b2da      	uxtb	r2, r3
 8002242:	4b3e      	ldr	r3, [pc, #248]	; (800233c <task_mulai+0x258>)
 8002244:	701a      	strb	r2, [r3, #0]
		}
		if (bouncing3==3){
 8002246:	4b3d      	ldr	r3, [pc, #244]	; (800233c <task_mulai+0x258>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b03      	cmp	r3, #3
 800224c:	d135      	bne.n	80022ba <task_mulai+0x1d6>
			lap_1++;
 800224e:	4b3c      	ldr	r3, [pc, #240]	; (8002340 <task_mulai+0x25c>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	3301      	adds	r3, #1
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <task_mulai+0x25c>)
 8002258:	701a      	strb	r2, [r3, #0]
			if (lap_1 > n) lap_1 = n;
 800225a:	4b39      	ldr	r3, [pc, #228]	; (8002340 <task_mulai+0x25c>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b05      	cmp	r3, #5
 8002260:	d902      	bls.n	8002268 <task_mulai+0x184>
 8002262:	4b37      	ldr	r3, [pc, #220]	; (8002340 <task_mulai+0x25c>)
 8002264:	2205      	movs	r2, #5
 8002266:	701a      	strb	r2, [r3, #0]
			milisecondA[lap_1] = miliSecond;
 8002268:	4b35      	ldr	r3, [pc, #212]	; (8002340 <task_mulai+0x25c>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4b35      	ldr	r3, [pc, #212]	; (8002344 <task_mulai+0x260>)
 8002270:	8819      	ldrh	r1, [r3, #0]
 8002272:	4b35      	ldr	r3, [pc, #212]	; (8002348 <task_mulai+0x264>)
 8002274:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			secondA[lap_1] = second;
 8002278:	4b31      	ldr	r3, [pc, #196]	; (8002340 <task_mulai+0x25c>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	4b33      	ldr	r3, [pc, #204]	; (800234c <task_mulai+0x268>)
 8002280:	7819      	ldrb	r1, [r3, #0]
 8002282:	4b33      	ldr	r3, [pc, #204]	; (8002350 <task_mulai+0x26c>)
 8002284:	5499      	strb	r1, [r3, r2]
			minuteA[lap_1] = minute;
 8002286:	4b2e      	ldr	r3, [pc, #184]	; (8002340 <task_mulai+0x25c>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	4b31      	ldr	r3, [pc, #196]	; (8002354 <task_mulai+0x270>)
 800228e:	7819      	ldrb	r1, [r3, #0]
 8002290:	4b31      	ldr	r3, [pc, #196]	; (8002358 <task_mulai+0x274>)
 8002292:	5499      	strb	r1, [r3, r2]
			task_display(stopwatchEna);
 8002294:	4b20      	ldr	r3, [pc, #128]	; (8002318 <task_mulai+0x234>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f000 f967 	bl	800256c <task_display>
			for(uint8_t i=1; i<=4 ; i++){
 800229e:	2301      	movs	r3, #1
 80022a0:	71fb      	strb	r3, [r7, #7]
 80022a2:	e007      	b.n	80022b4 <task_mulai+0x1d0>
				task_LED(i, 1);
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	2101      	movs	r1, #1
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 fa01 	bl	80026b0 <task_LED>
			for(uint8_t i=1; i<=4 ; i++){
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	3301      	adds	r3, #1
 80022b2:	71fb      	strb	r3, [r7, #7]
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d9f4      	bls.n	80022a4 <task_mulai+0x1c0>
			}
		}
		///sensor2
		if (HAL_GPIO_ReadPin(sens2_GPIO_Port, sens2_Pin)==GPIO_PIN_RESET){
 80022ba:	2102      	movs	r1, #2
 80022bc:	481c      	ldr	r0, [pc, #112]	; (8002330 <task_mulai+0x24c>)
 80022be:	f7fe fa31 	bl	8000724 <HAL_GPIO_ReadPin>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d14f      	bne.n	8002368 <task_mulai+0x284>
			if(timeout4++ > timeoutVal){
 80022c8:	4b24      	ldr	r3, [pc, #144]	; (800235c <task_mulai+0x278>)
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	b291      	uxth	r1, r2
 80022d0:	4a22      	ldr	r2, [pc, #136]	; (800235c <task_mulai+0x278>)
 80022d2:	8011      	strh	r1, [r2, #0]
 80022d4:	4a0f      	ldr	r2, [pc, #60]	; (8002314 <task_mulai+0x230>)
 80022d6:	8812      	ldrh	r2, [r2, #0]
 80022d8:	4293      	cmp	r3, r2
 80022da:	d90b      	bls.n	80022f4 <task_mulai+0x210>
				stopwatchEna=0;
 80022dc:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <task_mulai+0x234>)
 80022de:	2200      	movs	r2, #0
 80022e0:	701a      	strb	r2, [r3, #0]
				LCD_clear(0, 0);
 80022e2:	2100      	movs	r1, #0
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7ff fb9f 	bl	8001a28 <LCD_clear>
				task_errordis(1, "Sensor 2 Error");
 80022ea:	491d      	ldr	r1, [pc, #116]	; (8002360 <task_mulai+0x27c>)
 80022ec:	2001      	movs	r0, #1
 80022ee:	f000 f913 	bl	8002518 <task_errordis>
 80022f2:	e042      	b.n	800237a <task_mulai+0x296>
			}
			else
				bouncing4 = (bouncing4<<1)|1;
 80022f4:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <task_mulai+0x280>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	b25b      	sxtb	r3, r3
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	b25b      	sxtb	r3, r3
 8002302:	b2da      	uxtb	r2, r3
 8002304:	4b17      	ldr	r3, [pc, #92]	; (8002364 <task_mulai+0x280>)
 8002306:	701a      	strb	r2, [r3, #0]
 8002308:	e037      	b.n	800237a <task_mulai+0x296>
 800230a:	bf00      	nop
 800230c:	40011000 	.word	0x40011000
 8002310:	200001c2 	.word	0x200001c2
 8002314:	2000000c 	.word	0x2000000c
 8002318:	20000171 	.word	0x20000171
 800231c:	080032dc 	.word	0x080032dc
 8002320:	2000000e 	.word	0x2000000e
 8002324:	2000019c 	.word	0x2000019c
 8002328:	080032f4 	.word	0x080032f4
 800232c:	2000000f 	.word	0x2000000f
 8002330:	40010800 	.word	0x40010800
 8002334:	2000017a 	.word	0x2000017a
 8002338:	08003308 	.word	0x08003308
 800233c:	20000010 	.word	0x20000010
 8002340:	20000164 	.word	0x20000164
 8002344:	2000016c 	.word	0x2000016c
 8002348:	20000184 	.word	0x20000184
 800234c:	20000168 	.word	0x20000168
 8002350:	200001c4 	.word	0x200001c4
 8002354:	20000169 	.word	0x20000169
 8002358:	200001cc 	.word	0x200001cc
 800235c:	200001ae 	.word	0x200001ae
 8002360:	08003318 	.word	0x08003318
 8002364:	20000011 	.word	0x20000011
		}
		else {
			timeout4=0;
 8002368:	4b58      	ldr	r3, [pc, #352]	; (80024cc <task_mulai+0x3e8>)
 800236a:	2200      	movs	r2, #0
 800236c:	801a      	strh	r2, [r3, #0]
			bouncing4 = bouncing4<<1;
 800236e:	4b58      	ldr	r3, [pc, #352]	; (80024d0 <task_mulai+0x3ec>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4b56      	ldr	r3, [pc, #344]	; (80024d0 <task_mulai+0x3ec>)
 8002378:	701a      	strb	r2, [r3, #0]
		}

		if (bouncing4==3){
 800237a:	4b55      	ldr	r3, [pc, #340]	; (80024d0 <task_mulai+0x3ec>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b03      	cmp	r3, #3
 8002380:	d135      	bne.n	80023ee <task_mulai+0x30a>
			lap_2++;
 8002382:	4b54      	ldr	r3, [pc, #336]	; (80024d4 <task_mulai+0x3f0>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	3301      	adds	r3, #1
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4b52      	ldr	r3, [pc, #328]	; (80024d4 <task_mulai+0x3f0>)
 800238c:	701a      	strb	r2, [r3, #0]
			if(lap_2 > n) lap_2=n;
 800238e:	4b51      	ldr	r3, [pc, #324]	; (80024d4 <task_mulai+0x3f0>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b05      	cmp	r3, #5
 8002394:	d902      	bls.n	800239c <task_mulai+0x2b8>
 8002396:	4b4f      	ldr	r3, [pc, #316]	; (80024d4 <task_mulai+0x3f0>)
 8002398:	2205      	movs	r2, #5
 800239a:	701a      	strb	r2, [r3, #0]
			milisecondB[lap_2] = miliSecond;
 800239c:	4b4d      	ldr	r3, [pc, #308]	; (80024d4 <task_mulai+0x3f0>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b4d      	ldr	r3, [pc, #308]	; (80024d8 <task_mulai+0x3f4>)
 80023a4:	8819      	ldrh	r1, [r3, #0]
 80023a6:	4b4d      	ldr	r3, [pc, #308]	; (80024dc <task_mulai+0x3f8>)
 80023a8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			secondB[lap_2] = second;
 80023ac:	4b49      	ldr	r3, [pc, #292]	; (80024d4 <task_mulai+0x3f0>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b4b      	ldr	r3, [pc, #300]	; (80024e0 <task_mulai+0x3fc>)
 80023b4:	7819      	ldrb	r1, [r3, #0]
 80023b6:	4b4b      	ldr	r3, [pc, #300]	; (80024e4 <task_mulai+0x400>)
 80023b8:	5499      	strb	r1, [r3, r2]
			minuteB[lap_2] = minute;
 80023ba:	4b46      	ldr	r3, [pc, #280]	; (80024d4 <task_mulai+0x3f0>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	4b49      	ldr	r3, [pc, #292]	; (80024e8 <task_mulai+0x404>)
 80023c2:	7819      	ldrb	r1, [r3, #0]
 80023c4:	4b49      	ldr	r3, [pc, #292]	; (80024ec <task_mulai+0x408>)
 80023c6:	5499      	strb	r1, [r3, r2]
			task_display(stopwatchEna);
 80023c8:	4b49      	ldr	r3, [pc, #292]	; (80024f0 <task_mulai+0x40c>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 f8cd 	bl	800256c <task_display>
			for(uint8_t i=1;i<=4;i++){
 80023d2:	2301      	movs	r3, #1
 80023d4:	71bb      	strb	r3, [r7, #6]
 80023d6:	e007      	b.n	80023e8 <task_mulai+0x304>
				task_LED(i, 2);
 80023d8:	79bb      	ldrb	r3, [r7, #6]
 80023da:	2102      	movs	r1, #2
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 f967 	bl	80026b0 <task_LED>
			for(uint8_t i=1;i<=4;i++){
 80023e2:	79bb      	ldrb	r3, [r7, #6]
 80023e4:	3301      	adds	r3, #1
 80023e6:	71bb      	strb	r3, [r7, #6]
 80023e8:	79bb      	ldrb	r3, [r7, #6]
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d9f4      	bls.n	80023d8 <task_mulai+0x2f4>
			}
		}
		//sensor3
		if (HAL_GPIO_ReadPin(sens3_GPIO_Port, sens3_Pin)==GPIO_PIN_RESET){
 80023ee:	2104      	movs	r1, #4
 80023f0:	4840      	ldr	r0, [pc, #256]	; (80024f4 <task_mulai+0x410>)
 80023f2:	f7fe f997 	bl	8000724 <HAL_GPIO_ReadPin>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d120      	bne.n	800243e <task_mulai+0x35a>
			if(timeout5++ > timeoutVal){
 80023fc:	4b3e      	ldr	r3, [pc, #248]	; (80024f8 <task_mulai+0x414>)
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	b291      	uxth	r1, r2
 8002404:	4a3c      	ldr	r2, [pc, #240]	; (80024f8 <task_mulai+0x414>)
 8002406:	8011      	strh	r1, [r2, #0]
 8002408:	4a3c      	ldr	r2, [pc, #240]	; (80024fc <task_mulai+0x418>)
 800240a:	8812      	ldrh	r2, [r2, #0]
 800240c:	4293      	cmp	r3, r2
 800240e:	d90b      	bls.n	8002428 <task_mulai+0x344>
				stopwatchEna=0;
 8002410:	4b37      	ldr	r3, [pc, #220]	; (80024f0 <task_mulai+0x40c>)
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
				LCD_clear(0, 0);
 8002416:	2100      	movs	r1, #0
 8002418:	2000      	movs	r0, #0
 800241a:	f7ff fb05 	bl	8001a28 <LCD_clear>
				task_errordis(1, "Sensor 3 Error");
 800241e:	4938      	ldr	r1, [pc, #224]	; (8002500 <task_mulai+0x41c>)
 8002420:	2001      	movs	r0, #1
 8002422:	f000 f879 	bl	8002518 <task_errordis>
 8002426:	e013      	b.n	8002450 <task_mulai+0x36c>
			}
			else
				bouncing5 = (bouncing5<<1)|1;
 8002428:	4b36      	ldr	r3, [pc, #216]	; (8002504 <task_mulai+0x420>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	b25b      	sxtb	r3, r3
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	b25b      	sxtb	r3, r3
 8002436:	b2da      	uxtb	r2, r3
 8002438:	4b32      	ldr	r3, [pc, #200]	; (8002504 <task_mulai+0x420>)
 800243a:	701a      	strb	r2, [r3, #0]
 800243c:	e008      	b.n	8002450 <task_mulai+0x36c>
		}
		else {
			timeout5=0;
 800243e:	4b2e      	ldr	r3, [pc, #184]	; (80024f8 <task_mulai+0x414>)
 8002440:	2200      	movs	r2, #0
 8002442:	801a      	strh	r2, [r3, #0]
			bouncing5 = bouncing5<<1;
 8002444:	4b2f      	ldr	r3, [pc, #188]	; (8002504 <task_mulai+0x420>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b2d      	ldr	r3, [pc, #180]	; (8002504 <task_mulai+0x420>)
 800244e:	701a      	strb	r2, [r3, #0]
		}

		if (bouncing5==3){
 8002450:	4b2c      	ldr	r3, [pc, #176]	; (8002504 <task_mulai+0x420>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d135      	bne.n	80024c4 <task_mulai+0x3e0>
			lap_3++;
 8002458:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <task_mulai+0x424>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	3301      	adds	r3, #1
 800245e:	b2da      	uxtb	r2, r3
 8002460:	4b29      	ldr	r3, [pc, #164]	; (8002508 <task_mulai+0x424>)
 8002462:	701a      	strb	r2, [r3, #0]
			if(lap_3 > n) lap_3=n;
 8002464:	4b28      	ldr	r3, [pc, #160]	; (8002508 <task_mulai+0x424>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b05      	cmp	r3, #5
 800246a:	d902      	bls.n	8002472 <task_mulai+0x38e>
 800246c:	4b26      	ldr	r3, [pc, #152]	; (8002508 <task_mulai+0x424>)
 800246e:	2205      	movs	r2, #5
 8002470:	701a      	strb	r2, [r3, #0]
			milisecondC[lap_3] = miliSecond;
 8002472:	4b25      	ldr	r3, [pc, #148]	; (8002508 <task_mulai+0x424>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <task_mulai+0x3f4>)
 800247a:	8819      	ldrh	r1, [r3, #0]
 800247c:	4b23      	ldr	r3, [pc, #140]	; (800250c <task_mulai+0x428>)
 800247e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			secondC[lap_3] = second;
 8002482:	4b21      	ldr	r3, [pc, #132]	; (8002508 <task_mulai+0x424>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <task_mulai+0x3fc>)
 800248a:	7819      	ldrb	r1, [r3, #0]
 800248c:	4b20      	ldr	r3, [pc, #128]	; (8002510 <task_mulai+0x42c>)
 800248e:	5499      	strb	r1, [r3, r2]
			minuteC[lap_3] = minute;
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <task_mulai+0x424>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	461a      	mov	r2, r3
 8002496:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <task_mulai+0x404>)
 8002498:	7819      	ldrb	r1, [r3, #0]
 800249a:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <task_mulai+0x430>)
 800249c:	5499      	strb	r1, [r3, r2]
			task_display(stopwatchEna);
 800249e:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <task_mulai+0x40c>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 f862 	bl	800256c <task_display>
			for(uint8_t i=1;i<=4;i++){
 80024a8:	2301      	movs	r3, #1
 80024aa:	717b      	strb	r3, [r7, #5]
 80024ac:	e007      	b.n	80024be <task_mulai+0x3da>
				task_LED(i, 3);
 80024ae:	797b      	ldrb	r3, [r7, #5]
 80024b0:	2103      	movs	r1, #3
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f8fc 	bl	80026b0 <task_LED>
			for(uint8_t i=1;i<=4;i++){
 80024b8:	797b      	ldrb	r3, [r7, #5]
 80024ba:	3301      	adds	r3, #1
 80024bc:	717b      	strb	r3, [r7, #5]
 80024be:	797b      	ldrb	r3, [r7, #5]
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d9f4      	bls.n	80024ae <task_mulai+0x3ca>
			}
		}
	}
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	200001ae 	.word	0x200001ae
 80024d0:	20000011 	.word	0x20000011
 80024d4:	2000016f 	.word	0x2000016f
 80024d8:	2000016c 	.word	0x2000016c
 80024dc:	20000190 	.word	0x20000190
 80024e0:	20000168 	.word	0x20000168
 80024e4:	200001a0 	.word	0x200001a0
 80024e8:	20000169 	.word	0x20000169
 80024ec:	20000174 	.word	0x20000174
 80024f0:	20000171 	.word	0x20000171
 80024f4:	40010800 	.word	0x40010800
 80024f8:	200001c0 	.word	0x200001c0
 80024fc:	2000000c 	.word	0x2000000c
 8002500:	08003328 	.word	0x08003328
 8002504:	20000012 	.word	0x20000012
 8002508:	2000016a 	.word	0x2000016a
 800250c:	200001b4 	.word	0x200001b4
 8002510:	2000017c 	.word	0x2000017c
 8002514:	200001a8 	.word	0x200001a8

08002518 <task_errordis>:

void task_errordis(_Bool state, char *msg){
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	6039      	str	r1, [r7, #0]
 8002522:	71fb      	strb	r3, [r7, #7]
	LCD_SetCursor(0, 0); LCD_print(msg);
 8002524:	2100      	movs	r1, #0
 8002526:	2000      	movs	r0, #0
 8002528:	f7ff fabb 	bl	8001aa2 <LCD_SetCursor>
 800252c:	6838      	ldr	r0, [r7, #0]
 800252e:	f7ff faa3 	bl	8001a78 <LCD_print>
	task_displayreset();
 8002532:	f000 f805 	bl	8002540 <task_displayreset>
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <task_displayreset>:

void task_displayreset(void){
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
	if(resetDisplay++ > 20){
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <task_displayreset+0x28>)
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	b291      	uxth	r1, r2
 800254c:	4a06      	ldr	r2, [pc, #24]	; (8002568 <task_displayreset+0x28>)
 800254e:	8011      	strh	r1, [r2, #0]
 8002550:	2b14      	cmp	r3, #20
 8002552:	d906      	bls.n	8002562 <task_displayreset+0x22>
		resetDisplay = 0;
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <task_displayreset+0x28>)
 8002556:	2200      	movs	r2, #0
 8002558:	801a      	strh	r2, [r3, #0]
		LCD_clear(0, 0);
 800255a:	2100      	movs	r1, #0
 800255c:	2000      	movs	r0, #0
 800255e:	f7ff fa63 	bl	8001a28 <LCD_clear>
	}
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200001b0 	.word	0x200001b0

0800256c <task_display>:

void task_display(_Bool state){
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
	if (state){
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d078      	beq.n	800266e <task_display+0x102>
		LCD_SetCursor(0,0); LCD_print("Time : ");
 800257c:	2100      	movs	r1, #0
 800257e:	2000      	movs	r0, #0
 8002580:	f7ff fa8f 	bl	8001aa2 <LCD_SetCursor>
 8002584:	483c      	ldr	r0, [pc, #240]	; (8002678 <task_display+0x10c>)
 8002586:	f7ff fa77 	bl	8001a78 <LCD_print>
		LCD_SetCursor(0, 1); LCD_print("A :"); LCD_printnum(lap_1);
 800258a:	2101      	movs	r1, #1
 800258c:	2000      	movs	r0, #0
 800258e:	f7ff fa88 	bl	8001aa2 <LCD_SetCursor>
 8002592:	483a      	ldr	r0, [pc, #232]	; (800267c <task_display+0x110>)
 8002594:	f7ff fa70 	bl	8001a78 <LCD_print>
 8002598:	4b39      	ldr	r3, [pc, #228]	; (8002680 <task_display+0x114>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fab4 	bl	8001b0c <LCD_printnum>
		LCD_SetCursor(0, 2); LCD_print("B :"); LCD_printnum(lap_2);
 80025a4:	2102      	movs	r1, #2
 80025a6:	2000      	movs	r0, #0
 80025a8:	f7ff fa7b 	bl	8001aa2 <LCD_SetCursor>
 80025ac:	4835      	ldr	r0, [pc, #212]	; (8002684 <task_display+0x118>)
 80025ae:	f7ff fa63 	bl	8001a78 <LCD_print>
 80025b2:	4b35      	ldr	r3, [pc, #212]	; (8002688 <task_display+0x11c>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff faa7 	bl	8001b0c <LCD_printnum>
		LCD_SetCursor(0, 3); LCD_print("C :"); LCD_printnum(lap_3);
 80025be:	2103      	movs	r1, #3
 80025c0:	2000      	movs	r0, #0
 80025c2:	f7ff fa6e 	bl	8001aa2 <LCD_SetCursor>
 80025c6:	4831      	ldr	r0, [pc, #196]	; (800268c <task_display+0x120>)
 80025c8:	f7ff fa56 	bl	8001a78 <LCD_print>
 80025cc:	4b30      	ldr	r3, [pc, #192]	; (8002690 <task_display+0x124>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fa9a 	bl	8001b0c <LCD_printnum>
		LCD_SetCursor(8, 1); LCD_printnum(secondA[lap_1]); LCD_print(":"); LCD_printnum(milisecondA[lap_1]);
 80025d8:	2101      	movs	r1, #1
 80025da:	2008      	movs	r0, #8
 80025dc:	f7ff fa61 	bl	8001aa2 <LCD_SetCursor>
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <task_display+0x114>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b2b      	ldr	r3, [pc, #172]	; (8002694 <task_display+0x128>)
 80025e8:	5c9b      	ldrb	r3, [r3, r2]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fa8d 	bl	8001b0c <LCD_printnum>
 80025f2:	4829      	ldr	r0, [pc, #164]	; (8002698 <task_display+0x12c>)
 80025f4:	f7ff fa40 	bl	8001a78 <LCD_print>
 80025f8:	4b21      	ldr	r3, [pc, #132]	; (8002680 <task_display+0x114>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	4b27      	ldr	r3, [pc, #156]	; (800269c <task_display+0x130>)
 8002600:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fa81 	bl	8001b0c <LCD_printnum>
		LCD_SetCursor(8, 2); LCD_printnum(secondB[lap_2]); LCD_print(":"); LCD_printnum(milisecondB[lap_2]);
 800260a:	2102      	movs	r1, #2
 800260c:	2008      	movs	r0, #8
 800260e:	f7ff fa48 	bl	8001aa2 <LCD_SetCursor>
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <task_display+0x11c>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <task_display+0x134>)
 800261a:	5c9b      	ldrb	r3, [r3, r2]
 800261c:	b29b      	uxth	r3, r3
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fa74 	bl	8001b0c <LCD_printnum>
 8002624:	481c      	ldr	r0, [pc, #112]	; (8002698 <task_display+0x12c>)
 8002626:	f7ff fa27 	bl	8001a78 <LCD_print>
 800262a:	4b17      	ldr	r3, [pc, #92]	; (8002688 <task_display+0x11c>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <task_display+0x138>)
 8002632:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fa68 	bl	8001b0c <LCD_printnum>
		LCD_SetCursor(8, 3); LCD_printnum(secondC[lap_3]); LCD_print(":"); LCD_printnum(milisecondC[lap_3]);
 800263c:	2103      	movs	r1, #3
 800263e:	2008      	movs	r0, #8
 8002640:	f7ff fa2f 	bl	8001aa2 <LCD_SetCursor>
 8002644:	4b12      	ldr	r3, [pc, #72]	; (8002690 <task_display+0x124>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	4b17      	ldr	r3, [pc, #92]	; (80026a8 <task_display+0x13c>)
 800264c:	5c9b      	ldrb	r3, [r3, r2]
 800264e:	b29b      	uxth	r3, r3
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fa5b 	bl	8001b0c <LCD_printnum>
 8002656:	4810      	ldr	r0, [pc, #64]	; (8002698 <task_display+0x12c>)
 8002658:	f7ff fa0e 	bl	8001a78 <LCD_print>
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <task_display+0x124>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <task_display+0x140>)
 8002664:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fa4f 	bl	8001b0c <LCD_printnum>

	}

}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	08003338 	.word	0x08003338
 800267c:	08003340 	.word	0x08003340
 8002680:	20000164 	.word	0x20000164
 8002684:	08003344 	.word	0x08003344
 8002688:	2000016f 	.word	0x2000016f
 800268c:	08003348 	.word	0x08003348
 8002690:	2000016a 	.word	0x2000016a
 8002694:	200001c4 	.word	0x200001c4
 8002698:	0800334c 	.word	0x0800334c
 800269c:	20000184 	.word	0x20000184
 80026a0:	200001a0 	.word	0x200001a0
 80026a4:	20000190 	.word	0x20000190
 80026a8:	2000017c 	.word	0x2000017c
 80026ac:	200001b4 	.word	0x200001b4

080026b0 <task_LED>:

void task_LED(uint8_t Dled, uint8_t slot){
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	460a      	mov	r2, r1
 80026ba:	71fb      	strb	r3, [r7, #7]
 80026bc:	4613      	mov	r3, r2
 80026be:	71bb      	strb	r3, [r7, #6]

	switch (Dled) {
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d87a      	bhi.n	80027bc <task_LED+0x10c>
 80026c6:	a201      	add	r2, pc, #4	; (adr r2, 80026cc <task_LED+0x1c>)
 80026c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026cc:	080026e1 	.word	0x080026e1
 80026d0:	0800270d 	.word	0x0800270d
 80026d4:	08002739 	.word	0x08002739
 80026d8:	08002765 	.word	0x08002765
 80026dc:	08002791 	.word	0x08002791
	case 0:
		HAL_GPIO_WritePin(D0_LAP_GPIO_Port, D0_LAP_Pin, GPIO_PIN_SET);
 80026e0:	2201      	movs	r2, #1
 80026e2:	2180      	movs	r1, #128	; 0x80
 80026e4:	4853      	ldr	r0, [pc, #332]	; (8002834 <task_LED+0x184>)
 80026e6:	f7fe f834 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_LAP_GPIO_Port, D1_LAP_Pin, GPIO_PIN_SET);
 80026ea:	2201      	movs	r2, #1
 80026ec:	2101      	movs	r1, #1
 80026ee:	4852      	ldr	r0, [pc, #328]	; (8002838 <task_LED+0x188>)
 80026f0:	f7fe f82f 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_LAP_GPIO_Port, D2_LAP_Pin, GPIO_PIN_SET);
 80026f4:	2201      	movs	r2, #1
 80026f6:	2102      	movs	r1, #2
 80026f8:	484f      	ldr	r0, [pc, #316]	; (8002838 <task_LED+0x188>)
 80026fa:	f7fe f82a 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
 80026fe:	2201      	movs	r2, #1
 8002700:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002704:	484c      	ldr	r0, [pc, #304]	; (8002838 <task_LED+0x188>)
 8002706:	f7fe f824 	bl	8000752 <HAL_GPIO_WritePin>
		break;
 800270a:	e057      	b.n	80027bc <task_LED+0x10c>
	case 1:
		HAL_GPIO_WritePin(D0_LAP_GPIO_Port, D0_LAP_Pin, GPIO_PIN_RESET);
 800270c:	2200      	movs	r2, #0
 800270e:	2180      	movs	r1, #128	; 0x80
 8002710:	4848      	ldr	r0, [pc, #288]	; (8002834 <task_LED+0x184>)
 8002712:	f7fe f81e 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_LAP_GPIO_Port, D1_LAP_Pin, GPIO_PIN_SET);
 8002716:	2201      	movs	r2, #1
 8002718:	2101      	movs	r1, #1
 800271a:	4847      	ldr	r0, [pc, #284]	; (8002838 <task_LED+0x188>)
 800271c:	f7fe f819 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_LAP_GPIO_Port, D2_LAP_Pin, GPIO_PIN_SET);
 8002720:	2201      	movs	r2, #1
 8002722:	2102      	movs	r1, #2
 8002724:	4844      	ldr	r0, [pc, #272]	; (8002838 <task_LED+0x188>)
 8002726:	f7fe f814 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
 800272a:	2201      	movs	r2, #1
 800272c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002730:	4841      	ldr	r0, [pc, #260]	; (8002838 <task_LED+0x188>)
 8002732:	f7fe f80e 	bl	8000752 <HAL_GPIO_WritePin>
		break;
 8002736:	e041      	b.n	80027bc <task_LED+0x10c>
	case 2:
		HAL_GPIO_WritePin(D0_LAP_GPIO_Port, D0_LAP_Pin, GPIO_PIN_SET);
 8002738:	2201      	movs	r2, #1
 800273a:	2180      	movs	r1, #128	; 0x80
 800273c:	483d      	ldr	r0, [pc, #244]	; (8002834 <task_LED+0x184>)
 800273e:	f7fe f808 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_LAP_GPIO_Port, D1_LAP_Pin, GPIO_PIN_RESET);
 8002742:	2200      	movs	r2, #0
 8002744:	2101      	movs	r1, #1
 8002746:	483c      	ldr	r0, [pc, #240]	; (8002838 <task_LED+0x188>)
 8002748:	f7fe f803 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_LAP_GPIO_Port, D2_LAP_Pin, GPIO_PIN_SET);
 800274c:	2201      	movs	r2, #1
 800274e:	2102      	movs	r1, #2
 8002750:	4839      	ldr	r0, [pc, #228]	; (8002838 <task_LED+0x188>)
 8002752:	f7fd fffe 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
 8002756:	2201      	movs	r2, #1
 8002758:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800275c:	4836      	ldr	r0, [pc, #216]	; (8002838 <task_LED+0x188>)
 800275e:	f7fd fff8 	bl	8000752 <HAL_GPIO_WritePin>
		break;
 8002762:	e02b      	b.n	80027bc <task_LED+0x10c>
	case 3:
		HAL_GPIO_WritePin(D0_LAP_GPIO_Port, D0_LAP_Pin, GPIO_PIN_SET);
 8002764:	2201      	movs	r2, #1
 8002766:	2180      	movs	r1, #128	; 0x80
 8002768:	4832      	ldr	r0, [pc, #200]	; (8002834 <task_LED+0x184>)
 800276a:	f7fd fff2 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_LAP_GPIO_Port, D1_LAP_Pin, GPIO_PIN_SET);
 800276e:	2201      	movs	r2, #1
 8002770:	2101      	movs	r1, #1
 8002772:	4831      	ldr	r0, [pc, #196]	; (8002838 <task_LED+0x188>)
 8002774:	f7fd ffed 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_LAP_GPIO_Port, D2_LAP_Pin, GPIO_PIN_RESET);
 8002778:	2200      	movs	r2, #0
 800277a:	2102      	movs	r1, #2
 800277c:	482e      	ldr	r0, [pc, #184]	; (8002838 <task_LED+0x188>)
 800277e:	f7fd ffe8 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
 8002782:	2201      	movs	r2, #1
 8002784:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002788:	482b      	ldr	r0, [pc, #172]	; (8002838 <task_LED+0x188>)
 800278a:	f7fd ffe2 	bl	8000752 <HAL_GPIO_WritePin>
		break;
 800278e:	e015      	b.n	80027bc <task_LED+0x10c>
	case 4:
		HAL_GPIO_WritePin(D0_LAP_GPIO_Port, D0_LAP_Pin, GPIO_PIN_SET);
 8002790:	2201      	movs	r2, #1
 8002792:	2180      	movs	r1, #128	; 0x80
 8002794:	4827      	ldr	r0, [pc, #156]	; (8002834 <task_LED+0x184>)
 8002796:	f7fd ffdc 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_LAP_GPIO_Port, D1_LAP_Pin, GPIO_PIN_SET);
 800279a:	2201      	movs	r2, #1
 800279c:	2101      	movs	r1, #1
 800279e:	4826      	ldr	r0, [pc, #152]	; (8002838 <task_LED+0x188>)
 80027a0:	f7fd ffd7 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_LAP_GPIO_Port, D2_LAP_Pin, GPIO_PIN_SET);
 80027a4:	2201      	movs	r2, #1
 80027a6:	2102      	movs	r1, #2
 80027a8:	4823      	ldr	r0, [pc, #140]	; (8002838 <task_LED+0x188>)
 80027aa:	f7fd ffd2 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 80027ae:	2200      	movs	r2, #0
 80027b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027b4:	4820      	ldr	r0, [pc, #128]	; (8002838 <task_LED+0x188>)
 80027b6:	f7fd ffcc 	bl	8000752 <HAL_GPIO_WritePin>
		break;
 80027ba:	bf00      	nop
	}
	switch (slot) {
 80027bc:	79bb      	ldrb	r3, [r7, #6]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d014      	beq.n	80027ec <task_LED+0x13c>
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d022      	beq.n	800280c <task_LED+0x15c>
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d000      	beq.n	80027cc <task_LED+0x11c>
		HAL_GPIO_WritePin(ENA1_LAP_GPIO_Port, ENA1_LAP_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(ENA2_LAP_GPIO_Port, ENA2_LAP_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(ENA3_LAP_GPIO_Port, ENA3_LAP_Pin, GPIO_PIN_SET);
		break;
	}
}
 80027ca:	e02f      	b.n	800282c <task_LED+0x17c>
		HAL_GPIO_WritePin(ENA1_LAP_GPIO_Port, ENA1_LAP_Pin, GPIO_PIN_SET);
 80027cc:	2201      	movs	r2, #1
 80027ce:	2110      	movs	r1, #16
 80027d0:	4818      	ldr	r0, [pc, #96]	; (8002834 <task_LED+0x184>)
 80027d2:	f7fd ffbe 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENA2_LAP_GPIO_Port, ENA2_LAP_Pin, GPIO_PIN_RESET);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2120      	movs	r1, #32
 80027da:	4816      	ldr	r0, [pc, #88]	; (8002834 <task_LED+0x184>)
 80027dc:	f7fd ffb9 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENA3_LAP_GPIO_Port, ENA3_LAP_Pin, GPIO_PIN_RESET);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2140      	movs	r1, #64	; 0x40
 80027e4:	4813      	ldr	r0, [pc, #76]	; (8002834 <task_LED+0x184>)
 80027e6:	f7fd ffb4 	bl	8000752 <HAL_GPIO_WritePin>
		break;
 80027ea:	e01f      	b.n	800282c <task_LED+0x17c>
		HAL_GPIO_WritePin(ENA1_LAP_GPIO_Port, ENA1_LAP_Pin, GPIO_PIN_RESET);
 80027ec:	2200      	movs	r2, #0
 80027ee:	2110      	movs	r1, #16
 80027f0:	4810      	ldr	r0, [pc, #64]	; (8002834 <task_LED+0x184>)
 80027f2:	f7fd ffae 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENA2_LAP_GPIO_Port, ENA2_LAP_Pin, GPIO_PIN_SET);
 80027f6:	2201      	movs	r2, #1
 80027f8:	2120      	movs	r1, #32
 80027fa:	480e      	ldr	r0, [pc, #56]	; (8002834 <task_LED+0x184>)
 80027fc:	f7fd ffa9 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENA3_LAP_GPIO_Port, ENA3_LAP_Pin, GPIO_PIN_RESET);
 8002800:	2200      	movs	r2, #0
 8002802:	2140      	movs	r1, #64	; 0x40
 8002804:	480b      	ldr	r0, [pc, #44]	; (8002834 <task_LED+0x184>)
 8002806:	f7fd ffa4 	bl	8000752 <HAL_GPIO_WritePin>
		break;
 800280a:	e00f      	b.n	800282c <task_LED+0x17c>
		HAL_GPIO_WritePin(ENA1_LAP_GPIO_Port, ENA1_LAP_Pin, GPIO_PIN_RESET);
 800280c:	2200      	movs	r2, #0
 800280e:	2110      	movs	r1, #16
 8002810:	4808      	ldr	r0, [pc, #32]	; (8002834 <task_LED+0x184>)
 8002812:	f7fd ff9e 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENA2_LAP_GPIO_Port, ENA2_LAP_Pin, GPIO_PIN_RESET);
 8002816:	2200      	movs	r2, #0
 8002818:	2120      	movs	r1, #32
 800281a:	4806      	ldr	r0, [pc, #24]	; (8002834 <task_LED+0x184>)
 800281c:	f7fd ff99 	bl	8000752 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENA3_LAP_GPIO_Port, ENA3_LAP_Pin, GPIO_PIN_SET);
 8002820:	2201      	movs	r2, #1
 8002822:	2140      	movs	r1, #64	; 0x40
 8002824:	4803      	ldr	r0, [pc, #12]	; (8002834 <task_LED+0x184>)
 8002826:	f7fd ff94 	bl	8000752 <HAL_GPIO_WritePin>
		break;
 800282a:	bf00      	nop
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40010800 	.word	0x40010800
 8002838:	40010c00 	.word	0x40010c00

0800283c <MX_TIM2_Init>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void MX_TIM2_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002842:	f107 0308 	add.w	r3, r7, #8
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002850:	463b      	mov	r3, r7
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002858:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <MX_TIM2_Init+0x94>)
 800285a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800285e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8002860:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <MX_TIM2_Init+0x94>)
 8002862:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8002866:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002868:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <MX_TIM2_Init+0x94>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 800286e:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <MX_TIM2_Init+0x94>)
 8002870:	22c8      	movs	r2, #200	; 0xc8
 8002872:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002874:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <MX_TIM2_Init+0x94>)
 8002876:	2200      	movs	r2, #0
 8002878:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <MX_TIM2_Init+0x94>)
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002880:	4813      	ldr	r0, [pc, #76]	; (80028d0 <MX_TIM2_Init+0x94>)
 8002882:	f7fe fb9b 	bl	8000fbc <HAL_TIM_Base_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800288c:	f7ff fa5a 	bl	8001d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002894:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002896:	f107 0308 	add.w	r3, r7, #8
 800289a:	4619      	mov	r1, r3
 800289c:	480c      	ldr	r0, [pc, #48]	; (80028d0 <MX_TIM2_Init+0x94>)
 800289e:	f7fe fce3 	bl	8001268 <HAL_TIM_ConfigClockSource>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80028a8:	f7ff fa4c 	bl	8001d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ac:	2300      	movs	r3, #0
 80028ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b0:	2300      	movs	r3, #0
 80028b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028b4:	463b      	mov	r3, r7
 80028b6:	4619      	mov	r1, r3
 80028b8:	4805      	ldr	r0, [pc, #20]	; (80028d0 <MX_TIM2_Init+0x94>)
 80028ba:	f7fe feb1 	bl	8001620 <HAL_TIMEx_MasterConfigSynchronization>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80028c4:	f7ff fa3e 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028c8:	bf00      	nop
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000124 	.word	0x20000124

080028d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028da:	f107 0308 	add.w	r3, r7, #8
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	605a      	str	r2, [r3, #4]
 80028e4:	609a      	str	r2, [r3, #8]
 80028e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028e8:	463b      	mov	r3, r7
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <MX_TIM3_Init+0x94>)
 80028f2:	4a1e      	ldr	r2, [pc, #120]	; (800296c <MX_TIM3_Init+0x98>)
 80028f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35999;
 80028f6:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <MX_TIM3_Init+0x94>)
 80028f8:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80028fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028fe:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <MX_TIM3_Init+0x94>)
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8002904:	4b18      	ldr	r3, [pc, #96]	; (8002968 <MX_TIM3_Init+0x94>)
 8002906:	22c8      	movs	r2, #200	; 0xc8
 8002908:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800290a:	4b17      	ldr	r3, [pc, #92]	; (8002968 <MX_TIM3_Init+0x94>)
 800290c:	2200      	movs	r2, #0
 800290e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002910:	4b15      	ldr	r3, [pc, #84]	; (8002968 <MX_TIM3_Init+0x94>)
 8002912:	2200      	movs	r2, #0
 8002914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002916:	4814      	ldr	r0, [pc, #80]	; (8002968 <MX_TIM3_Init+0x94>)
 8002918:	f7fe fb50 	bl	8000fbc <HAL_TIM_Base_Init>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002922:	f7ff fa0f 	bl	8001d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800292a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800292c:	f107 0308 	add.w	r3, r7, #8
 8002930:	4619      	mov	r1, r3
 8002932:	480d      	ldr	r0, [pc, #52]	; (8002968 <MX_TIM3_Init+0x94>)
 8002934:	f7fe fc98 	bl	8001268 <HAL_TIM_ConfigClockSource>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800293e:	f7ff fa01 	bl	8001d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002942:	2300      	movs	r3, #0
 8002944:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002946:	2300      	movs	r3, #0
 8002948:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800294a:	463b      	mov	r3, r7
 800294c:	4619      	mov	r1, r3
 800294e:	4806      	ldr	r0, [pc, #24]	; (8002968 <MX_TIM3_Init+0x94>)
 8002950:	f7fe fe66 	bl	8001620 <HAL_TIMEx_MasterConfigSynchronization>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800295a:	f7ff f9f3 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800295e:	bf00      	nop
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200000a4 	.word	0x200000a4
 800296c:	40000400 	.word	0x40000400

08002970 <MX_USART1_UART_Init>:
#include "stm32f1xx_it.h"
#include "main.h"
#include "usart.h"

void MX_USART1_UART_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b090      	sub	sp, #64	; 0x40
 8002974:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002976:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <MX_USART1_UART_Init+0x44>)
 8002978:	603b      	str	r3, [r7, #0]
  huart1.Init.BaudRate = 115200;
 800297a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800297e:	607b      	str	r3, [r7, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002980:	2300      	movs	r3, #0
 8002982:	60bb      	str	r3, [r7, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002988:	2300      	movs	r3, #0
 800298a:	613b      	str	r3, [r7, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800298c:	230c      	movs	r3, #12
 800298e:	617b      	str	r3, [r7, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002990:	2300      	movs	r3, #0
 8002992:	61bb      	str	r3, [r7, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002994:	2300      	movs	r3, #0
 8002996:	61fb      	str	r3, [r7, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002998:	463b      	mov	r3, r7
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe fe96 	bl	80016cc <HAL_UART_Init>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_USART1_UART_Init+0x3a>
  {
    Error_Handler();
 80029a6:	f7ff f9cd 	bl	8001d44 <Error_Handler>
  }
}
 80029aa:	bf00      	nop
 80029ac:	3740      	adds	r7, #64	; 0x40
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40013800 	.word	0x40013800

080029b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80029b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80029ba:	e003      	b.n	80029c4 <LoopCopyDataInit>

080029bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80029be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80029c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80029c2:	3104      	adds	r1, #4

080029c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80029c4:	480a      	ldr	r0, [pc, #40]	; (80029f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80029c6:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80029c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80029ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80029cc:	d3f6      	bcc.n	80029bc <CopyDataInit>
  ldr r2, =_sbss
 80029ce:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80029d0:	e002      	b.n	80029d8 <LoopFillZerobss>

080029d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80029d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80029d4:	f842 3b04 	str.w	r3, [r2], #4

080029d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80029da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80029dc:	d3f9      	bcc.n	80029d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029de:	f7ff facf 	bl	8001f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029e2:	f000 f815 	bl	8002a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029e6:	f7ff f979 	bl	8001cdc <main>
  bx lr
 80029ea:	4770      	bx	lr
  ldr r3, =_sidata
 80029ec:	080033a4 	.word	0x080033a4
  ldr r0, =_sdata
 80029f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80029f4:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80029f8:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80029fc:	200001d8 	.word	0x200001d8

08002a00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a00:	e7fe      	b.n	8002a00 <ADC1_2_IRQHandler>
	...

08002a04 <__errno>:
 8002a04:	4b01      	ldr	r3, [pc, #4]	; (8002a0c <__errno+0x8>)
 8002a06:	6818      	ldr	r0, [r3, #0]
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	20000014 	.word	0x20000014

08002a10 <__libc_init_array>:
 8002a10:	b570      	push	{r4, r5, r6, lr}
 8002a12:	2500      	movs	r5, #0
 8002a14:	4e0c      	ldr	r6, [pc, #48]	; (8002a48 <__libc_init_array+0x38>)
 8002a16:	4c0d      	ldr	r4, [pc, #52]	; (8002a4c <__libc_init_array+0x3c>)
 8002a18:	1ba4      	subs	r4, r4, r6
 8002a1a:	10a4      	asrs	r4, r4, #2
 8002a1c:	42a5      	cmp	r5, r4
 8002a1e:	d109      	bne.n	8002a34 <__libc_init_array+0x24>
 8002a20:	f000 fc34 	bl	800328c <_init>
 8002a24:	2500      	movs	r5, #0
 8002a26:	4e0a      	ldr	r6, [pc, #40]	; (8002a50 <__libc_init_array+0x40>)
 8002a28:	4c0a      	ldr	r4, [pc, #40]	; (8002a54 <__libc_init_array+0x44>)
 8002a2a:	1ba4      	subs	r4, r4, r6
 8002a2c:	10a4      	asrs	r4, r4, #2
 8002a2e:	42a5      	cmp	r5, r4
 8002a30:	d105      	bne.n	8002a3e <__libc_init_array+0x2e>
 8002a32:	bd70      	pop	{r4, r5, r6, pc}
 8002a34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a38:	4798      	blx	r3
 8002a3a:	3501      	adds	r5, #1
 8002a3c:	e7ee      	b.n	8002a1c <__libc_init_array+0xc>
 8002a3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a42:	4798      	blx	r3
 8002a44:	3501      	adds	r5, #1
 8002a46:	e7f2      	b.n	8002a2e <__libc_init_array+0x1e>
 8002a48:	0800339c 	.word	0x0800339c
 8002a4c:	0800339c 	.word	0x0800339c
 8002a50:	0800339c 	.word	0x0800339c
 8002a54:	080033a0 	.word	0x080033a0

08002a58 <memset>:
 8002a58:	4603      	mov	r3, r0
 8002a5a:	4402      	add	r2, r0
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d100      	bne.n	8002a62 <memset+0xa>
 8002a60:	4770      	bx	lr
 8002a62:	f803 1b01 	strb.w	r1, [r3], #1
 8002a66:	e7f9      	b.n	8002a5c <memset+0x4>

08002a68 <siprintf>:
 8002a68:	b40e      	push	{r1, r2, r3}
 8002a6a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a6e:	b500      	push	{lr}
 8002a70:	b09c      	sub	sp, #112	; 0x70
 8002a72:	ab1d      	add	r3, sp, #116	; 0x74
 8002a74:	9002      	str	r0, [sp, #8]
 8002a76:	9006      	str	r0, [sp, #24]
 8002a78:	9107      	str	r1, [sp, #28]
 8002a7a:	9104      	str	r1, [sp, #16]
 8002a7c:	4808      	ldr	r0, [pc, #32]	; (8002aa0 <siprintf+0x38>)
 8002a7e:	4909      	ldr	r1, [pc, #36]	; (8002aa4 <siprintf+0x3c>)
 8002a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a84:	9105      	str	r1, [sp, #20]
 8002a86:	6800      	ldr	r0, [r0, #0]
 8002a88:	a902      	add	r1, sp, #8
 8002a8a:	9301      	str	r3, [sp, #4]
 8002a8c:	f000 f866 	bl	8002b5c <_svfiprintf_r>
 8002a90:	2200      	movs	r2, #0
 8002a92:	9b02      	ldr	r3, [sp, #8]
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	b01c      	add	sp, #112	; 0x70
 8002a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a9c:	b003      	add	sp, #12
 8002a9e:	4770      	bx	lr
 8002aa0:	20000014 	.word	0x20000014
 8002aa4:	ffff0208 	.word	0xffff0208

08002aa8 <__ssputs_r>:
 8002aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002aac:	688e      	ldr	r6, [r1, #8]
 8002aae:	4682      	mov	sl, r0
 8002ab0:	429e      	cmp	r6, r3
 8002ab2:	460c      	mov	r4, r1
 8002ab4:	4690      	mov	r8, r2
 8002ab6:	4699      	mov	r9, r3
 8002ab8:	d837      	bhi.n	8002b2a <__ssputs_r+0x82>
 8002aba:	898a      	ldrh	r2, [r1, #12]
 8002abc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ac0:	d031      	beq.n	8002b26 <__ssputs_r+0x7e>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	6825      	ldr	r5, [r4, #0]
 8002ac6:	6909      	ldr	r1, [r1, #16]
 8002ac8:	1a6f      	subs	r7, r5, r1
 8002aca:	6965      	ldr	r5, [r4, #20]
 8002acc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ad0:	fb95 f5f3 	sdiv	r5, r5, r3
 8002ad4:	f109 0301 	add.w	r3, r9, #1
 8002ad8:	443b      	add	r3, r7
 8002ada:	429d      	cmp	r5, r3
 8002adc:	bf38      	it	cc
 8002ade:	461d      	movcc	r5, r3
 8002ae0:	0553      	lsls	r3, r2, #21
 8002ae2:	d530      	bpl.n	8002b46 <__ssputs_r+0x9e>
 8002ae4:	4629      	mov	r1, r5
 8002ae6:	f000 fb37 	bl	8003158 <_malloc_r>
 8002aea:	4606      	mov	r6, r0
 8002aec:	b950      	cbnz	r0, 8002b04 <__ssputs_r+0x5c>
 8002aee:	230c      	movs	r3, #12
 8002af0:	f04f 30ff 	mov.w	r0, #4294967295
 8002af4:	f8ca 3000 	str.w	r3, [sl]
 8002af8:	89a3      	ldrh	r3, [r4, #12]
 8002afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002afe:	81a3      	strh	r3, [r4, #12]
 8002b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b04:	463a      	mov	r2, r7
 8002b06:	6921      	ldr	r1, [r4, #16]
 8002b08:	f000 fab6 	bl	8003078 <memcpy>
 8002b0c:	89a3      	ldrh	r3, [r4, #12]
 8002b0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b16:	81a3      	strh	r3, [r4, #12]
 8002b18:	6126      	str	r6, [r4, #16]
 8002b1a:	443e      	add	r6, r7
 8002b1c:	6026      	str	r6, [r4, #0]
 8002b1e:	464e      	mov	r6, r9
 8002b20:	6165      	str	r5, [r4, #20]
 8002b22:	1bed      	subs	r5, r5, r7
 8002b24:	60a5      	str	r5, [r4, #8]
 8002b26:	454e      	cmp	r6, r9
 8002b28:	d900      	bls.n	8002b2c <__ssputs_r+0x84>
 8002b2a:	464e      	mov	r6, r9
 8002b2c:	4632      	mov	r2, r6
 8002b2e:	4641      	mov	r1, r8
 8002b30:	6820      	ldr	r0, [r4, #0]
 8002b32:	f000 faac 	bl	800308e <memmove>
 8002b36:	68a3      	ldr	r3, [r4, #8]
 8002b38:	2000      	movs	r0, #0
 8002b3a:	1b9b      	subs	r3, r3, r6
 8002b3c:	60a3      	str	r3, [r4, #8]
 8002b3e:	6823      	ldr	r3, [r4, #0]
 8002b40:	441e      	add	r6, r3
 8002b42:	6026      	str	r6, [r4, #0]
 8002b44:	e7dc      	b.n	8002b00 <__ssputs_r+0x58>
 8002b46:	462a      	mov	r2, r5
 8002b48:	f000 fb60 	bl	800320c <_realloc_r>
 8002b4c:	4606      	mov	r6, r0
 8002b4e:	2800      	cmp	r0, #0
 8002b50:	d1e2      	bne.n	8002b18 <__ssputs_r+0x70>
 8002b52:	6921      	ldr	r1, [r4, #16]
 8002b54:	4650      	mov	r0, sl
 8002b56:	f000 fab3 	bl	80030c0 <_free_r>
 8002b5a:	e7c8      	b.n	8002aee <__ssputs_r+0x46>

08002b5c <_svfiprintf_r>:
 8002b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b60:	461d      	mov	r5, r3
 8002b62:	898b      	ldrh	r3, [r1, #12]
 8002b64:	b09d      	sub	sp, #116	; 0x74
 8002b66:	061f      	lsls	r7, r3, #24
 8002b68:	4680      	mov	r8, r0
 8002b6a:	460c      	mov	r4, r1
 8002b6c:	4616      	mov	r6, r2
 8002b6e:	d50f      	bpl.n	8002b90 <_svfiprintf_r+0x34>
 8002b70:	690b      	ldr	r3, [r1, #16]
 8002b72:	b96b      	cbnz	r3, 8002b90 <_svfiprintf_r+0x34>
 8002b74:	2140      	movs	r1, #64	; 0x40
 8002b76:	f000 faef 	bl	8003158 <_malloc_r>
 8002b7a:	6020      	str	r0, [r4, #0]
 8002b7c:	6120      	str	r0, [r4, #16]
 8002b7e:	b928      	cbnz	r0, 8002b8c <_svfiprintf_r+0x30>
 8002b80:	230c      	movs	r3, #12
 8002b82:	f8c8 3000 	str.w	r3, [r8]
 8002b86:	f04f 30ff 	mov.w	r0, #4294967295
 8002b8a:	e0c8      	b.n	8002d1e <_svfiprintf_r+0x1c2>
 8002b8c:	2340      	movs	r3, #64	; 0x40
 8002b8e:	6163      	str	r3, [r4, #20]
 8002b90:	2300      	movs	r3, #0
 8002b92:	9309      	str	r3, [sp, #36]	; 0x24
 8002b94:	2320      	movs	r3, #32
 8002b96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b9a:	2330      	movs	r3, #48	; 0x30
 8002b9c:	f04f 0b01 	mov.w	fp, #1
 8002ba0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ba4:	9503      	str	r5, [sp, #12]
 8002ba6:	4637      	mov	r7, r6
 8002ba8:	463d      	mov	r5, r7
 8002baa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002bae:	b10b      	cbz	r3, 8002bb4 <_svfiprintf_r+0x58>
 8002bb0:	2b25      	cmp	r3, #37	; 0x25
 8002bb2:	d13e      	bne.n	8002c32 <_svfiprintf_r+0xd6>
 8002bb4:	ebb7 0a06 	subs.w	sl, r7, r6
 8002bb8:	d00b      	beq.n	8002bd2 <_svfiprintf_r+0x76>
 8002bba:	4653      	mov	r3, sl
 8002bbc:	4632      	mov	r2, r6
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	4640      	mov	r0, r8
 8002bc2:	f7ff ff71 	bl	8002aa8 <__ssputs_r>
 8002bc6:	3001      	adds	r0, #1
 8002bc8:	f000 80a4 	beq.w	8002d14 <_svfiprintf_r+0x1b8>
 8002bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bce:	4453      	add	r3, sl
 8002bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8002bd2:	783b      	ldrb	r3, [r7, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 809d 	beq.w	8002d14 <_svfiprintf_r+0x1b8>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002be0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002be4:	9304      	str	r3, [sp, #16]
 8002be6:	9307      	str	r3, [sp, #28]
 8002be8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002bec:	931a      	str	r3, [sp, #104]	; 0x68
 8002bee:	462f      	mov	r7, r5
 8002bf0:	2205      	movs	r2, #5
 8002bf2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002bf6:	4850      	ldr	r0, [pc, #320]	; (8002d38 <_svfiprintf_r+0x1dc>)
 8002bf8:	f000 fa30 	bl	800305c <memchr>
 8002bfc:	9b04      	ldr	r3, [sp, #16]
 8002bfe:	b9d0      	cbnz	r0, 8002c36 <_svfiprintf_r+0xda>
 8002c00:	06d9      	lsls	r1, r3, #27
 8002c02:	bf44      	itt	mi
 8002c04:	2220      	movmi	r2, #32
 8002c06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002c0a:	071a      	lsls	r2, r3, #28
 8002c0c:	bf44      	itt	mi
 8002c0e:	222b      	movmi	r2, #43	; 0x2b
 8002c10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002c14:	782a      	ldrb	r2, [r5, #0]
 8002c16:	2a2a      	cmp	r2, #42	; 0x2a
 8002c18:	d015      	beq.n	8002c46 <_svfiprintf_r+0xea>
 8002c1a:	462f      	mov	r7, r5
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	250a      	movs	r5, #10
 8002c20:	9a07      	ldr	r2, [sp, #28]
 8002c22:	4639      	mov	r1, r7
 8002c24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c28:	3b30      	subs	r3, #48	; 0x30
 8002c2a:	2b09      	cmp	r3, #9
 8002c2c:	d94d      	bls.n	8002cca <_svfiprintf_r+0x16e>
 8002c2e:	b1b8      	cbz	r0, 8002c60 <_svfiprintf_r+0x104>
 8002c30:	e00f      	b.n	8002c52 <_svfiprintf_r+0xf6>
 8002c32:	462f      	mov	r7, r5
 8002c34:	e7b8      	b.n	8002ba8 <_svfiprintf_r+0x4c>
 8002c36:	4a40      	ldr	r2, [pc, #256]	; (8002d38 <_svfiprintf_r+0x1dc>)
 8002c38:	463d      	mov	r5, r7
 8002c3a:	1a80      	subs	r0, r0, r2
 8002c3c:	fa0b f000 	lsl.w	r0, fp, r0
 8002c40:	4318      	orrs	r0, r3
 8002c42:	9004      	str	r0, [sp, #16]
 8002c44:	e7d3      	b.n	8002bee <_svfiprintf_r+0x92>
 8002c46:	9a03      	ldr	r2, [sp, #12]
 8002c48:	1d11      	adds	r1, r2, #4
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	9103      	str	r1, [sp, #12]
 8002c4e:	2a00      	cmp	r2, #0
 8002c50:	db01      	blt.n	8002c56 <_svfiprintf_r+0xfa>
 8002c52:	9207      	str	r2, [sp, #28]
 8002c54:	e004      	b.n	8002c60 <_svfiprintf_r+0x104>
 8002c56:	4252      	negs	r2, r2
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	9207      	str	r2, [sp, #28]
 8002c5e:	9304      	str	r3, [sp, #16]
 8002c60:	783b      	ldrb	r3, [r7, #0]
 8002c62:	2b2e      	cmp	r3, #46	; 0x2e
 8002c64:	d10c      	bne.n	8002c80 <_svfiprintf_r+0x124>
 8002c66:	787b      	ldrb	r3, [r7, #1]
 8002c68:	2b2a      	cmp	r3, #42	; 0x2a
 8002c6a:	d133      	bne.n	8002cd4 <_svfiprintf_r+0x178>
 8002c6c:	9b03      	ldr	r3, [sp, #12]
 8002c6e:	3702      	adds	r7, #2
 8002c70:	1d1a      	adds	r2, r3, #4
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	9203      	str	r2, [sp, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	bfb8      	it	lt
 8002c7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c7e:	9305      	str	r3, [sp, #20]
 8002c80:	4d2e      	ldr	r5, [pc, #184]	; (8002d3c <_svfiprintf_r+0x1e0>)
 8002c82:	2203      	movs	r2, #3
 8002c84:	7839      	ldrb	r1, [r7, #0]
 8002c86:	4628      	mov	r0, r5
 8002c88:	f000 f9e8 	bl	800305c <memchr>
 8002c8c:	b138      	cbz	r0, 8002c9e <_svfiprintf_r+0x142>
 8002c8e:	2340      	movs	r3, #64	; 0x40
 8002c90:	1b40      	subs	r0, r0, r5
 8002c92:	fa03 f000 	lsl.w	r0, r3, r0
 8002c96:	9b04      	ldr	r3, [sp, #16]
 8002c98:	3701      	adds	r7, #1
 8002c9a:	4303      	orrs	r3, r0
 8002c9c:	9304      	str	r3, [sp, #16]
 8002c9e:	7839      	ldrb	r1, [r7, #0]
 8002ca0:	2206      	movs	r2, #6
 8002ca2:	4827      	ldr	r0, [pc, #156]	; (8002d40 <_svfiprintf_r+0x1e4>)
 8002ca4:	1c7e      	adds	r6, r7, #1
 8002ca6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002caa:	f000 f9d7 	bl	800305c <memchr>
 8002cae:	2800      	cmp	r0, #0
 8002cb0:	d038      	beq.n	8002d24 <_svfiprintf_r+0x1c8>
 8002cb2:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <_svfiprintf_r+0x1e8>)
 8002cb4:	bb13      	cbnz	r3, 8002cfc <_svfiprintf_r+0x1a0>
 8002cb6:	9b03      	ldr	r3, [sp, #12]
 8002cb8:	3307      	adds	r3, #7
 8002cba:	f023 0307 	bic.w	r3, r3, #7
 8002cbe:	3308      	adds	r3, #8
 8002cc0:	9303      	str	r3, [sp, #12]
 8002cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cc4:	444b      	add	r3, r9
 8002cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8002cc8:	e76d      	b.n	8002ba6 <_svfiprintf_r+0x4a>
 8002cca:	fb05 3202 	mla	r2, r5, r2, r3
 8002cce:	2001      	movs	r0, #1
 8002cd0:	460f      	mov	r7, r1
 8002cd2:	e7a6      	b.n	8002c22 <_svfiprintf_r+0xc6>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	250a      	movs	r5, #10
 8002cd8:	4619      	mov	r1, r3
 8002cda:	3701      	adds	r7, #1
 8002cdc:	9305      	str	r3, [sp, #20]
 8002cde:	4638      	mov	r0, r7
 8002ce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ce4:	3a30      	subs	r2, #48	; 0x30
 8002ce6:	2a09      	cmp	r2, #9
 8002ce8:	d903      	bls.n	8002cf2 <_svfiprintf_r+0x196>
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0c8      	beq.n	8002c80 <_svfiprintf_r+0x124>
 8002cee:	9105      	str	r1, [sp, #20]
 8002cf0:	e7c6      	b.n	8002c80 <_svfiprintf_r+0x124>
 8002cf2:	fb05 2101 	mla	r1, r5, r1, r2
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	4607      	mov	r7, r0
 8002cfa:	e7f0      	b.n	8002cde <_svfiprintf_r+0x182>
 8002cfc:	ab03      	add	r3, sp, #12
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	4622      	mov	r2, r4
 8002d02:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <_svfiprintf_r+0x1ec>)
 8002d04:	a904      	add	r1, sp, #16
 8002d06:	4640      	mov	r0, r8
 8002d08:	f3af 8000 	nop.w
 8002d0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002d10:	4681      	mov	r9, r0
 8002d12:	d1d6      	bne.n	8002cc2 <_svfiprintf_r+0x166>
 8002d14:	89a3      	ldrh	r3, [r4, #12]
 8002d16:	065b      	lsls	r3, r3, #25
 8002d18:	f53f af35 	bmi.w	8002b86 <_svfiprintf_r+0x2a>
 8002d1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d1e:	b01d      	add	sp, #116	; 0x74
 8002d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d24:	ab03      	add	r3, sp, #12
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	4622      	mov	r2, r4
 8002d2a:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <_svfiprintf_r+0x1ec>)
 8002d2c:	a904      	add	r1, sp, #16
 8002d2e:	4640      	mov	r0, r8
 8002d30:	f000 f882 	bl	8002e38 <_printf_i>
 8002d34:	e7ea      	b.n	8002d0c <_svfiprintf_r+0x1b0>
 8002d36:	bf00      	nop
 8002d38:	08003368 	.word	0x08003368
 8002d3c:	0800336e 	.word	0x0800336e
 8002d40:	08003372 	.word	0x08003372
 8002d44:	00000000 	.word	0x00000000
 8002d48:	08002aa9 	.word	0x08002aa9

08002d4c <_printf_common>:
 8002d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d50:	4691      	mov	r9, r2
 8002d52:	461f      	mov	r7, r3
 8002d54:	688a      	ldr	r2, [r1, #8]
 8002d56:	690b      	ldr	r3, [r1, #16]
 8002d58:	4606      	mov	r6, r0
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	bfb8      	it	lt
 8002d5e:	4613      	movlt	r3, r2
 8002d60:	f8c9 3000 	str.w	r3, [r9]
 8002d64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d68:	460c      	mov	r4, r1
 8002d6a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d6e:	b112      	cbz	r2, 8002d76 <_printf_common+0x2a>
 8002d70:	3301      	adds	r3, #1
 8002d72:	f8c9 3000 	str.w	r3, [r9]
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	0699      	lsls	r1, r3, #26
 8002d7a:	bf42      	ittt	mi
 8002d7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002d80:	3302      	addmi	r3, #2
 8002d82:	f8c9 3000 	strmi.w	r3, [r9]
 8002d86:	6825      	ldr	r5, [r4, #0]
 8002d88:	f015 0506 	ands.w	r5, r5, #6
 8002d8c:	d107      	bne.n	8002d9e <_printf_common+0x52>
 8002d8e:	f104 0a19 	add.w	sl, r4, #25
 8002d92:	68e3      	ldr	r3, [r4, #12]
 8002d94:	f8d9 2000 	ldr.w	r2, [r9]
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	42ab      	cmp	r3, r5
 8002d9c:	dc29      	bgt.n	8002df2 <_printf_common+0xa6>
 8002d9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002da2:	6822      	ldr	r2, [r4, #0]
 8002da4:	3300      	adds	r3, #0
 8002da6:	bf18      	it	ne
 8002da8:	2301      	movne	r3, #1
 8002daa:	0692      	lsls	r2, r2, #26
 8002dac:	d42e      	bmi.n	8002e0c <_printf_common+0xc0>
 8002dae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002db2:	4639      	mov	r1, r7
 8002db4:	4630      	mov	r0, r6
 8002db6:	47c0      	blx	r8
 8002db8:	3001      	adds	r0, #1
 8002dba:	d021      	beq.n	8002e00 <_printf_common+0xb4>
 8002dbc:	6823      	ldr	r3, [r4, #0]
 8002dbe:	68e5      	ldr	r5, [r4, #12]
 8002dc0:	f003 0306 	and.w	r3, r3, #6
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	bf18      	it	ne
 8002dc8:	2500      	movne	r5, #0
 8002dca:	f8d9 2000 	ldr.w	r2, [r9]
 8002dce:	f04f 0900 	mov.w	r9, #0
 8002dd2:	bf08      	it	eq
 8002dd4:	1aad      	subeq	r5, r5, r2
 8002dd6:	68a3      	ldr	r3, [r4, #8]
 8002dd8:	6922      	ldr	r2, [r4, #16]
 8002dda:	bf08      	it	eq
 8002ddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002de0:	4293      	cmp	r3, r2
 8002de2:	bfc4      	itt	gt
 8002de4:	1a9b      	subgt	r3, r3, r2
 8002de6:	18ed      	addgt	r5, r5, r3
 8002de8:	341a      	adds	r4, #26
 8002dea:	454d      	cmp	r5, r9
 8002dec:	d11a      	bne.n	8002e24 <_printf_common+0xd8>
 8002dee:	2000      	movs	r0, #0
 8002df0:	e008      	b.n	8002e04 <_printf_common+0xb8>
 8002df2:	2301      	movs	r3, #1
 8002df4:	4652      	mov	r2, sl
 8002df6:	4639      	mov	r1, r7
 8002df8:	4630      	mov	r0, r6
 8002dfa:	47c0      	blx	r8
 8002dfc:	3001      	adds	r0, #1
 8002dfe:	d103      	bne.n	8002e08 <_printf_common+0xbc>
 8002e00:	f04f 30ff 	mov.w	r0, #4294967295
 8002e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e08:	3501      	adds	r5, #1
 8002e0a:	e7c2      	b.n	8002d92 <_printf_common+0x46>
 8002e0c:	2030      	movs	r0, #48	; 0x30
 8002e0e:	18e1      	adds	r1, r4, r3
 8002e10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e1a:	4422      	add	r2, r4
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e22:	e7c4      	b.n	8002dae <_printf_common+0x62>
 8002e24:	2301      	movs	r3, #1
 8002e26:	4622      	mov	r2, r4
 8002e28:	4639      	mov	r1, r7
 8002e2a:	4630      	mov	r0, r6
 8002e2c:	47c0      	blx	r8
 8002e2e:	3001      	adds	r0, #1
 8002e30:	d0e6      	beq.n	8002e00 <_printf_common+0xb4>
 8002e32:	f109 0901 	add.w	r9, r9, #1
 8002e36:	e7d8      	b.n	8002dea <_printf_common+0x9e>

08002e38 <_printf_i>:
 8002e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e3c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002e40:	460c      	mov	r4, r1
 8002e42:	7e09      	ldrb	r1, [r1, #24]
 8002e44:	b085      	sub	sp, #20
 8002e46:	296e      	cmp	r1, #110	; 0x6e
 8002e48:	4617      	mov	r7, r2
 8002e4a:	4606      	mov	r6, r0
 8002e4c:	4698      	mov	r8, r3
 8002e4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002e50:	f000 80b3 	beq.w	8002fba <_printf_i+0x182>
 8002e54:	d822      	bhi.n	8002e9c <_printf_i+0x64>
 8002e56:	2963      	cmp	r1, #99	; 0x63
 8002e58:	d036      	beq.n	8002ec8 <_printf_i+0x90>
 8002e5a:	d80a      	bhi.n	8002e72 <_printf_i+0x3a>
 8002e5c:	2900      	cmp	r1, #0
 8002e5e:	f000 80b9 	beq.w	8002fd4 <_printf_i+0x19c>
 8002e62:	2958      	cmp	r1, #88	; 0x58
 8002e64:	f000 8083 	beq.w	8002f6e <_printf_i+0x136>
 8002e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e6c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002e70:	e032      	b.n	8002ed8 <_printf_i+0xa0>
 8002e72:	2964      	cmp	r1, #100	; 0x64
 8002e74:	d001      	beq.n	8002e7a <_printf_i+0x42>
 8002e76:	2969      	cmp	r1, #105	; 0x69
 8002e78:	d1f6      	bne.n	8002e68 <_printf_i+0x30>
 8002e7a:	6820      	ldr	r0, [r4, #0]
 8002e7c:	6813      	ldr	r3, [r2, #0]
 8002e7e:	0605      	lsls	r5, r0, #24
 8002e80:	f103 0104 	add.w	r1, r3, #4
 8002e84:	d52a      	bpl.n	8002edc <_printf_i+0xa4>
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6011      	str	r1, [r2, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	da03      	bge.n	8002e96 <_printf_i+0x5e>
 8002e8e:	222d      	movs	r2, #45	; 0x2d
 8002e90:	425b      	negs	r3, r3
 8002e92:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002e96:	486f      	ldr	r0, [pc, #444]	; (8003054 <_printf_i+0x21c>)
 8002e98:	220a      	movs	r2, #10
 8002e9a:	e039      	b.n	8002f10 <_printf_i+0xd8>
 8002e9c:	2973      	cmp	r1, #115	; 0x73
 8002e9e:	f000 809d 	beq.w	8002fdc <_printf_i+0x1a4>
 8002ea2:	d808      	bhi.n	8002eb6 <_printf_i+0x7e>
 8002ea4:	296f      	cmp	r1, #111	; 0x6f
 8002ea6:	d020      	beq.n	8002eea <_printf_i+0xb2>
 8002ea8:	2970      	cmp	r1, #112	; 0x70
 8002eaa:	d1dd      	bne.n	8002e68 <_printf_i+0x30>
 8002eac:	6823      	ldr	r3, [r4, #0]
 8002eae:	f043 0320 	orr.w	r3, r3, #32
 8002eb2:	6023      	str	r3, [r4, #0]
 8002eb4:	e003      	b.n	8002ebe <_printf_i+0x86>
 8002eb6:	2975      	cmp	r1, #117	; 0x75
 8002eb8:	d017      	beq.n	8002eea <_printf_i+0xb2>
 8002eba:	2978      	cmp	r1, #120	; 0x78
 8002ebc:	d1d4      	bne.n	8002e68 <_printf_i+0x30>
 8002ebe:	2378      	movs	r3, #120	; 0x78
 8002ec0:	4865      	ldr	r0, [pc, #404]	; (8003058 <_printf_i+0x220>)
 8002ec2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ec6:	e055      	b.n	8002f74 <_printf_i+0x13c>
 8002ec8:	6813      	ldr	r3, [r2, #0]
 8002eca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ece:	1d19      	adds	r1, r3, #4
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6011      	str	r1, [r2, #0]
 8002ed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e08c      	b.n	8002ff6 <_printf_i+0x1be>
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ee2:	6011      	str	r1, [r2, #0]
 8002ee4:	bf18      	it	ne
 8002ee6:	b21b      	sxthne	r3, r3
 8002ee8:	e7cf      	b.n	8002e8a <_printf_i+0x52>
 8002eea:	6813      	ldr	r3, [r2, #0]
 8002eec:	6825      	ldr	r5, [r4, #0]
 8002eee:	1d18      	adds	r0, r3, #4
 8002ef0:	6010      	str	r0, [r2, #0]
 8002ef2:	0628      	lsls	r0, r5, #24
 8002ef4:	d501      	bpl.n	8002efa <_printf_i+0xc2>
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	e002      	b.n	8002f00 <_printf_i+0xc8>
 8002efa:	0668      	lsls	r0, r5, #25
 8002efc:	d5fb      	bpl.n	8002ef6 <_printf_i+0xbe>
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	296f      	cmp	r1, #111	; 0x6f
 8002f02:	bf14      	ite	ne
 8002f04:	220a      	movne	r2, #10
 8002f06:	2208      	moveq	r2, #8
 8002f08:	4852      	ldr	r0, [pc, #328]	; (8003054 <_printf_i+0x21c>)
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f10:	6865      	ldr	r5, [r4, #4]
 8002f12:	2d00      	cmp	r5, #0
 8002f14:	60a5      	str	r5, [r4, #8]
 8002f16:	f2c0 8095 	blt.w	8003044 <_printf_i+0x20c>
 8002f1a:	6821      	ldr	r1, [r4, #0]
 8002f1c:	f021 0104 	bic.w	r1, r1, #4
 8002f20:	6021      	str	r1, [r4, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d13d      	bne.n	8002fa2 <_printf_i+0x16a>
 8002f26:	2d00      	cmp	r5, #0
 8002f28:	f040 808e 	bne.w	8003048 <_printf_i+0x210>
 8002f2c:	4665      	mov	r5, ip
 8002f2e:	2a08      	cmp	r2, #8
 8002f30:	d10b      	bne.n	8002f4a <_printf_i+0x112>
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	07db      	lsls	r3, r3, #31
 8002f36:	d508      	bpl.n	8002f4a <_printf_i+0x112>
 8002f38:	6923      	ldr	r3, [r4, #16]
 8002f3a:	6862      	ldr	r2, [r4, #4]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	bfde      	ittt	le
 8002f40:	2330      	movle	r3, #48	; 0x30
 8002f42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002f4a:	ebac 0305 	sub.w	r3, ip, r5
 8002f4e:	6123      	str	r3, [r4, #16]
 8002f50:	f8cd 8000 	str.w	r8, [sp]
 8002f54:	463b      	mov	r3, r7
 8002f56:	aa03      	add	r2, sp, #12
 8002f58:	4621      	mov	r1, r4
 8002f5a:	4630      	mov	r0, r6
 8002f5c:	f7ff fef6 	bl	8002d4c <_printf_common>
 8002f60:	3001      	adds	r0, #1
 8002f62:	d14d      	bne.n	8003000 <_printf_i+0x1c8>
 8002f64:	f04f 30ff 	mov.w	r0, #4294967295
 8002f68:	b005      	add	sp, #20
 8002f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f6e:	4839      	ldr	r0, [pc, #228]	; (8003054 <_printf_i+0x21c>)
 8002f70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002f74:	6813      	ldr	r3, [r2, #0]
 8002f76:	6821      	ldr	r1, [r4, #0]
 8002f78:	1d1d      	adds	r5, r3, #4
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6015      	str	r5, [r2, #0]
 8002f7e:	060a      	lsls	r2, r1, #24
 8002f80:	d50b      	bpl.n	8002f9a <_printf_i+0x162>
 8002f82:	07ca      	lsls	r2, r1, #31
 8002f84:	bf44      	itt	mi
 8002f86:	f041 0120 	orrmi.w	r1, r1, #32
 8002f8a:	6021      	strmi	r1, [r4, #0]
 8002f8c:	b91b      	cbnz	r3, 8002f96 <_printf_i+0x15e>
 8002f8e:	6822      	ldr	r2, [r4, #0]
 8002f90:	f022 0220 	bic.w	r2, r2, #32
 8002f94:	6022      	str	r2, [r4, #0]
 8002f96:	2210      	movs	r2, #16
 8002f98:	e7b7      	b.n	8002f0a <_printf_i+0xd2>
 8002f9a:	064d      	lsls	r5, r1, #25
 8002f9c:	bf48      	it	mi
 8002f9e:	b29b      	uxthmi	r3, r3
 8002fa0:	e7ef      	b.n	8002f82 <_printf_i+0x14a>
 8002fa2:	4665      	mov	r5, ip
 8002fa4:	fbb3 f1f2 	udiv	r1, r3, r2
 8002fa8:	fb02 3311 	mls	r3, r2, r1, r3
 8002fac:	5cc3      	ldrb	r3, [r0, r3]
 8002fae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	2900      	cmp	r1, #0
 8002fb6:	d1f5      	bne.n	8002fa4 <_printf_i+0x16c>
 8002fb8:	e7b9      	b.n	8002f2e <_printf_i+0xf6>
 8002fba:	6813      	ldr	r3, [r2, #0]
 8002fbc:	6825      	ldr	r5, [r4, #0]
 8002fbe:	1d18      	adds	r0, r3, #4
 8002fc0:	6961      	ldr	r1, [r4, #20]
 8002fc2:	6010      	str	r0, [r2, #0]
 8002fc4:	0628      	lsls	r0, r5, #24
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	d501      	bpl.n	8002fce <_printf_i+0x196>
 8002fca:	6019      	str	r1, [r3, #0]
 8002fcc:	e002      	b.n	8002fd4 <_printf_i+0x19c>
 8002fce:	066a      	lsls	r2, r5, #25
 8002fd0:	d5fb      	bpl.n	8002fca <_printf_i+0x192>
 8002fd2:	8019      	strh	r1, [r3, #0]
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	4665      	mov	r5, ip
 8002fd8:	6123      	str	r3, [r4, #16]
 8002fda:	e7b9      	b.n	8002f50 <_printf_i+0x118>
 8002fdc:	6813      	ldr	r3, [r2, #0]
 8002fde:	1d19      	adds	r1, r3, #4
 8002fe0:	6011      	str	r1, [r2, #0]
 8002fe2:	681d      	ldr	r5, [r3, #0]
 8002fe4:	6862      	ldr	r2, [r4, #4]
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4628      	mov	r0, r5
 8002fea:	f000 f837 	bl	800305c <memchr>
 8002fee:	b108      	cbz	r0, 8002ff4 <_printf_i+0x1bc>
 8002ff0:	1b40      	subs	r0, r0, r5
 8002ff2:	6060      	str	r0, [r4, #4]
 8002ff4:	6863      	ldr	r3, [r4, #4]
 8002ff6:	6123      	str	r3, [r4, #16]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ffe:	e7a7      	b.n	8002f50 <_printf_i+0x118>
 8003000:	6923      	ldr	r3, [r4, #16]
 8003002:	462a      	mov	r2, r5
 8003004:	4639      	mov	r1, r7
 8003006:	4630      	mov	r0, r6
 8003008:	47c0      	blx	r8
 800300a:	3001      	adds	r0, #1
 800300c:	d0aa      	beq.n	8002f64 <_printf_i+0x12c>
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	079b      	lsls	r3, r3, #30
 8003012:	d413      	bmi.n	800303c <_printf_i+0x204>
 8003014:	68e0      	ldr	r0, [r4, #12]
 8003016:	9b03      	ldr	r3, [sp, #12]
 8003018:	4298      	cmp	r0, r3
 800301a:	bfb8      	it	lt
 800301c:	4618      	movlt	r0, r3
 800301e:	e7a3      	b.n	8002f68 <_printf_i+0x130>
 8003020:	2301      	movs	r3, #1
 8003022:	464a      	mov	r2, r9
 8003024:	4639      	mov	r1, r7
 8003026:	4630      	mov	r0, r6
 8003028:	47c0      	blx	r8
 800302a:	3001      	adds	r0, #1
 800302c:	d09a      	beq.n	8002f64 <_printf_i+0x12c>
 800302e:	3501      	adds	r5, #1
 8003030:	68e3      	ldr	r3, [r4, #12]
 8003032:	9a03      	ldr	r2, [sp, #12]
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	42ab      	cmp	r3, r5
 8003038:	dcf2      	bgt.n	8003020 <_printf_i+0x1e8>
 800303a:	e7eb      	b.n	8003014 <_printf_i+0x1dc>
 800303c:	2500      	movs	r5, #0
 800303e:	f104 0919 	add.w	r9, r4, #25
 8003042:	e7f5      	b.n	8003030 <_printf_i+0x1f8>
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1ac      	bne.n	8002fa2 <_printf_i+0x16a>
 8003048:	7803      	ldrb	r3, [r0, #0]
 800304a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800304e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003052:	e76c      	b.n	8002f2e <_printf_i+0xf6>
 8003054:	08003379 	.word	0x08003379
 8003058:	0800338a 	.word	0x0800338a

0800305c <memchr>:
 800305c:	b510      	push	{r4, lr}
 800305e:	b2c9      	uxtb	r1, r1
 8003060:	4402      	add	r2, r0
 8003062:	4290      	cmp	r0, r2
 8003064:	4603      	mov	r3, r0
 8003066:	d101      	bne.n	800306c <memchr+0x10>
 8003068:	2300      	movs	r3, #0
 800306a:	e003      	b.n	8003074 <memchr+0x18>
 800306c:	781c      	ldrb	r4, [r3, #0]
 800306e:	3001      	adds	r0, #1
 8003070:	428c      	cmp	r4, r1
 8003072:	d1f6      	bne.n	8003062 <memchr+0x6>
 8003074:	4618      	mov	r0, r3
 8003076:	bd10      	pop	{r4, pc}

08003078 <memcpy>:
 8003078:	b510      	push	{r4, lr}
 800307a:	1e43      	subs	r3, r0, #1
 800307c:	440a      	add	r2, r1
 800307e:	4291      	cmp	r1, r2
 8003080:	d100      	bne.n	8003084 <memcpy+0xc>
 8003082:	bd10      	pop	{r4, pc}
 8003084:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003088:	f803 4f01 	strb.w	r4, [r3, #1]!
 800308c:	e7f7      	b.n	800307e <memcpy+0x6>

0800308e <memmove>:
 800308e:	4288      	cmp	r0, r1
 8003090:	b510      	push	{r4, lr}
 8003092:	eb01 0302 	add.w	r3, r1, r2
 8003096:	d807      	bhi.n	80030a8 <memmove+0x1a>
 8003098:	1e42      	subs	r2, r0, #1
 800309a:	4299      	cmp	r1, r3
 800309c:	d00a      	beq.n	80030b4 <memmove+0x26>
 800309e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030a2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80030a6:	e7f8      	b.n	800309a <memmove+0xc>
 80030a8:	4283      	cmp	r3, r0
 80030aa:	d9f5      	bls.n	8003098 <memmove+0xa>
 80030ac:	1881      	adds	r1, r0, r2
 80030ae:	1ad2      	subs	r2, r2, r3
 80030b0:	42d3      	cmn	r3, r2
 80030b2:	d100      	bne.n	80030b6 <memmove+0x28>
 80030b4:	bd10      	pop	{r4, pc}
 80030b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80030ba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80030be:	e7f7      	b.n	80030b0 <memmove+0x22>

080030c0 <_free_r>:
 80030c0:	b538      	push	{r3, r4, r5, lr}
 80030c2:	4605      	mov	r5, r0
 80030c4:	2900      	cmp	r1, #0
 80030c6:	d043      	beq.n	8003150 <_free_r+0x90>
 80030c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030cc:	1f0c      	subs	r4, r1, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	bfb8      	it	lt
 80030d2:	18e4      	addlt	r4, r4, r3
 80030d4:	f000 f8d0 	bl	8003278 <__malloc_lock>
 80030d8:	4a1e      	ldr	r2, [pc, #120]	; (8003154 <_free_r+0x94>)
 80030da:	6813      	ldr	r3, [r2, #0]
 80030dc:	4610      	mov	r0, r2
 80030de:	b933      	cbnz	r3, 80030ee <_free_r+0x2e>
 80030e0:	6063      	str	r3, [r4, #4]
 80030e2:	6014      	str	r4, [r2, #0]
 80030e4:	4628      	mov	r0, r5
 80030e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030ea:	f000 b8c6 	b.w	800327a <__malloc_unlock>
 80030ee:	42a3      	cmp	r3, r4
 80030f0:	d90b      	bls.n	800310a <_free_r+0x4a>
 80030f2:	6821      	ldr	r1, [r4, #0]
 80030f4:	1862      	adds	r2, r4, r1
 80030f6:	4293      	cmp	r3, r2
 80030f8:	bf01      	itttt	eq
 80030fa:	681a      	ldreq	r2, [r3, #0]
 80030fc:	685b      	ldreq	r3, [r3, #4]
 80030fe:	1852      	addeq	r2, r2, r1
 8003100:	6022      	streq	r2, [r4, #0]
 8003102:	6063      	str	r3, [r4, #4]
 8003104:	6004      	str	r4, [r0, #0]
 8003106:	e7ed      	b.n	80030e4 <_free_r+0x24>
 8003108:	4613      	mov	r3, r2
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	b10a      	cbz	r2, 8003112 <_free_r+0x52>
 800310e:	42a2      	cmp	r2, r4
 8003110:	d9fa      	bls.n	8003108 <_free_r+0x48>
 8003112:	6819      	ldr	r1, [r3, #0]
 8003114:	1858      	adds	r0, r3, r1
 8003116:	42a0      	cmp	r0, r4
 8003118:	d10b      	bne.n	8003132 <_free_r+0x72>
 800311a:	6820      	ldr	r0, [r4, #0]
 800311c:	4401      	add	r1, r0
 800311e:	1858      	adds	r0, r3, r1
 8003120:	4282      	cmp	r2, r0
 8003122:	6019      	str	r1, [r3, #0]
 8003124:	d1de      	bne.n	80030e4 <_free_r+0x24>
 8003126:	6810      	ldr	r0, [r2, #0]
 8003128:	6852      	ldr	r2, [r2, #4]
 800312a:	4401      	add	r1, r0
 800312c:	6019      	str	r1, [r3, #0]
 800312e:	605a      	str	r2, [r3, #4]
 8003130:	e7d8      	b.n	80030e4 <_free_r+0x24>
 8003132:	d902      	bls.n	800313a <_free_r+0x7a>
 8003134:	230c      	movs	r3, #12
 8003136:	602b      	str	r3, [r5, #0]
 8003138:	e7d4      	b.n	80030e4 <_free_r+0x24>
 800313a:	6820      	ldr	r0, [r4, #0]
 800313c:	1821      	adds	r1, r4, r0
 800313e:	428a      	cmp	r2, r1
 8003140:	bf01      	itttt	eq
 8003142:	6811      	ldreq	r1, [r2, #0]
 8003144:	6852      	ldreq	r2, [r2, #4]
 8003146:	1809      	addeq	r1, r1, r0
 8003148:	6021      	streq	r1, [r4, #0]
 800314a:	6062      	str	r2, [r4, #4]
 800314c:	605c      	str	r4, [r3, #4]
 800314e:	e7c9      	b.n	80030e4 <_free_r+0x24>
 8003150:	bd38      	pop	{r3, r4, r5, pc}
 8003152:	bf00      	nop
 8003154:	20000098 	.word	0x20000098

08003158 <_malloc_r>:
 8003158:	b570      	push	{r4, r5, r6, lr}
 800315a:	1ccd      	adds	r5, r1, #3
 800315c:	f025 0503 	bic.w	r5, r5, #3
 8003160:	3508      	adds	r5, #8
 8003162:	2d0c      	cmp	r5, #12
 8003164:	bf38      	it	cc
 8003166:	250c      	movcc	r5, #12
 8003168:	2d00      	cmp	r5, #0
 800316a:	4606      	mov	r6, r0
 800316c:	db01      	blt.n	8003172 <_malloc_r+0x1a>
 800316e:	42a9      	cmp	r1, r5
 8003170:	d903      	bls.n	800317a <_malloc_r+0x22>
 8003172:	230c      	movs	r3, #12
 8003174:	6033      	str	r3, [r6, #0]
 8003176:	2000      	movs	r0, #0
 8003178:	bd70      	pop	{r4, r5, r6, pc}
 800317a:	f000 f87d 	bl	8003278 <__malloc_lock>
 800317e:	4a21      	ldr	r2, [pc, #132]	; (8003204 <_malloc_r+0xac>)
 8003180:	6814      	ldr	r4, [r2, #0]
 8003182:	4621      	mov	r1, r4
 8003184:	b991      	cbnz	r1, 80031ac <_malloc_r+0x54>
 8003186:	4c20      	ldr	r4, [pc, #128]	; (8003208 <_malloc_r+0xb0>)
 8003188:	6823      	ldr	r3, [r4, #0]
 800318a:	b91b      	cbnz	r3, 8003194 <_malloc_r+0x3c>
 800318c:	4630      	mov	r0, r6
 800318e:	f000 f863 	bl	8003258 <_sbrk_r>
 8003192:	6020      	str	r0, [r4, #0]
 8003194:	4629      	mov	r1, r5
 8003196:	4630      	mov	r0, r6
 8003198:	f000 f85e 	bl	8003258 <_sbrk_r>
 800319c:	1c43      	adds	r3, r0, #1
 800319e:	d124      	bne.n	80031ea <_malloc_r+0x92>
 80031a0:	230c      	movs	r3, #12
 80031a2:	4630      	mov	r0, r6
 80031a4:	6033      	str	r3, [r6, #0]
 80031a6:	f000 f868 	bl	800327a <__malloc_unlock>
 80031aa:	e7e4      	b.n	8003176 <_malloc_r+0x1e>
 80031ac:	680b      	ldr	r3, [r1, #0]
 80031ae:	1b5b      	subs	r3, r3, r5
 80031b0:	d418      	bmi.n	80031e4 <_malloc_r+0x8c>
 80031b2:	2b0b      	cmp	r3, #11
 80031b4:	d90f      	bls.n	80031d6 <_malloc_r+0x7e>
 80031b6:	600b      	str	r3, [r1, #0]
 80031b8:	18cc      	adds	r4, r1, r3
 80031ba:	50cd      	str	r5, [r1, r3]
 80031bc:	4630      	mov	r0, r6
 80031be:	f000 f85c 	bl	800327a <__malloc_unlock>
 80031c2:	f104 000b 	add.w	r0, r4, #11
 80031c6:	1d23      	adds	r3, r4, #4
 80031c8:	f020 0007 	bic.w	r0, r0, #7
 80031cc:	1ac3      	subs	r3, r0, r3
 80031ce:	d0d3      	beq.n	8003178 <_malloc_r+0x20>
 80031d0:	425a      	negs	r2, r3
 80031d2:	50e2      	str	r2, [r4, r3]
 80031d4:	e7d0      	b.n	8003178 <_malloc_r+0x20>
 80031d6:	684b      	ldr	r3, [r1, #4]
 80031d8:	428c      	cmp	r4, r1
 80031da:	bf16      	itet	ne
 80031dc:	6063      	strne	r3, [r4, #4]
 80031de:	6013      	streq	r3, [r2, #0]
 80031e0:	460c      	movne	r4, r1
 80031e2:	e7eb      	b.n	80031bc <_malloc_r+0x64>
 80031e4:	460c      	mov	r4, r1
 80031e6:	6849      	ldr	r1, [r1, #4]
 80031e8:	e7cc      	b.n	8003184 <_malloc_r+0x2c>
 80031ea:	1cc4      	adds	r4, r0, #3
 80031ec:	f024 0403 	bic.w	r4, r4, #3
 80031f0:	42a0      	cmp	r0, r4
 80031f2:	d005      	beq.n	8003200 <_malloc_r+0xa8>
 80031f4:	1a21      	subs	r1, r4, r0
 80031f6:	4630      	mov	r0, r6
 80031f8:	f000 f82e 	bl	8003258 <_sbrk_r>
 80031fc:	3001      	adds	r0, #1
 80031fe:	d0cf      	beq.n	80031a0 <_malloc_r+0x48>
 8003200:	6025      	str	r5, [r4, #0]
 8003202:	e7db      	b.n	80031bc <_malloc_r+0x64>
 8003204:	20000098 	.word	0x20000098
 8003208:	2000009c 	.word	0x2000009c

0800320c <_realloc_r>:
 800320c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320e:	4607      	mov	r7, r0
 8003210:	4614      	mov	r4, r2
 8003212:	460e      	mov	r6, r1
 8003214:	b921      	cbnz	r1, 8003220 <_realloc_r+0x14>
 8003216:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800321a:	4611      	mov	r1, r2
 800321c:	f7ff bf9c 	b.w	8003158 <_malloc_r>
 8003220:	b922      	cbnz	r2, 800322c <_realloc_r+0x20>
 8003222:	f7ff ff4d 	bl	80030c0 <_free_r>
 8003226:	4625      	mov	r5, r4
 8003228:	4628      	mov	r0, r5
 800322a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800322c:	f000 f826 	bl	800327c <_malloc_usable_size_r>
 8003230:	42a0      	cmp	r0, r4
 8003232:	d20f      	bcs.n	8003254 <_realloc_r+0x48>
 8003234:	4621      	mov	r1, r4
 8003236:	4638      	mov	r0, r7
 8003238:	f7ff ff8e 	bl	8003158 <_malloc_r>
 800323c:	4605      	mov	r5, r0
 800323e:	2800      	cmp	r0, #0
 8003240:	d0f2      	beq.n	8003228 <_realloc_r+0x1c>
 8003242:	4631      	mov	r1, r6
 8003244:	4622      	mov	r2, r4
 8003246:	f7ff ff17 	bl	8003078 <memcpy>
 800324a:	4631      	mov	r1, r6
 800324c:	4638      	mov	r0, r7
 800324e:	f7ff ff37 	bl	80030c0 <_free_r>
 8003252:	e7e9      	b.n	8003228 <_realloc_r+0x1c>
 8003254:	4635      	mov	r5, r6
 8003256:	e7e7      	b.n	8003228 <_realloc_r+0x1c>

08003258 <_sbrk_r>:
 8003258:	b538      	push	{r3, r4, r5, lr}
 800325a:	2300      	movs	r3, #0
 800325c:	4c05      	ldr	r4, [pc, #20]	; (8003274 <_sbrk_r+0x1c>)
 800325e:	4605      	mov	r5, r0
 8003260:	4608      	mov	r0, r1
 8003262:	6023      	str	r3, [r4, #0]
 8003264:	f7fe fe60 	bl	8001f28 <_sbrk>
 8003268:	1c43      	adds	r3, r0, #1
 800326a:	d102      	bne.n	8003272 <_sbrk_r+0x1a>
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	b103      	cbz	r3, 8003272 <_sbrk_r+0x1a>
 8003270:	602b      	str	r3, [r5, #0]
 8003272:	bd38      	pop	{r3, r4, r5, pc}
 8003274:	200001d4 	.word	0x200001d4

08003278 <__malloc_lock>:
 8003278:	4770      	bx	lr

0800327a <__malloc_unlock>:
 800327a:	4770      	bx	lr

0800327c <_malloc_usable_size_r>:
 800327c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003280:	1f18      	subs	r0, r3, #4
 8003282:	2b00      	cmp	r3, #0
 8003284:	bfbc      	itt	lt
 8003286:	580b      	ldrlt	r3, [r1, r0]
 8003288:	18c0      	addlt	r0, r0, r3
 800328a:	4770      	bx	lr

0800328c <_init>:
 800328c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328e:	bf00      	nop
 8003290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003292:	bc08      	pop	{r3}
 8003294:	469e      	mov	lr, r3
 8003296:	4770      	bx	lr

08003298 <_fini>:
 8003298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329a:	bf00      	nop
 800329c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800329e:	bc08      	pop	{r3}
 80032a0:	469e      	mov	lr, r3
 80032a2:	4770      	bx	lr
