
project_UTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002028  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002134  08002134  00012134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002160  08002160  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002160  08002160  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002160  08002160  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002160  08002160  00012160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002164  08002164  00012164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08002174  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002174  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb52  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e10  00000000  00000000  0002bb87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be8  00000000  00000000  0002d998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad0  00000000  00000000  0002e580  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014c25  00000000  00000000  0002f050  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009882  00000000  00000000  00043c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071f3c  00000000  00000000  0004d4f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bf433  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fbc  00000000  00000000  000bf4b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800211c 	.word	0x0800211c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800211c 	.word	0x0800211c

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f945 	bl	80003ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fd4e 	bl	8001c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f95d 	bl	8000456 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f925 	bl	8000402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000028 	.word	0x20000028

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000028 	.word	0x20000028

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	db0b      	blt.n	80002e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	f003 021f 	and.w	r2, r3, #31
 80002d0:	4906      	ldr	r1, [pc, #24]	; (80002ec <__NVIC_EnableIRQ+0x34>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	095b      	lsrs	r3, r3, #5
 80002d8:	2001      	movs	r0, #1
 80002da:	fa00 f202 	lsl.w	r2, r0, r2
 80002de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	db0a      	blt.n	800031a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	b2da      	uxtb	r2, r3
 8000308:	490c      	ldr	r1, [pc, #48]	; (800033c <__NVIC_SetPriority+0x4c>)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	0112      	lsls	r2, r2, #4
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000318:	e00a      	b.n	8000330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4908      	ldr	r1, [pc, #32]	; (8000340 <__NVIC_SetPriority+0x50>)
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 030f 	and.w	r3, r3, #15
 8000326:	3b04      	subs	r3, #4
 8000328:	0112      	lsls	r2, r2, #4
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	440b      	add	r3, r1
 800032e:	761a      	strb	r2, [r3, #24]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000344:	b480      	push	{r7}
 8000346:	b089      	sub	sp, #36	; 0x24
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	60b9      	str	r1, [r7, #8]
 800034e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f003 0307 	and.w	r3, r3, #7
 8000356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000358:	69fb      	ldr	r3, [r7, #28]
 800035a:	f1c3 0307 	rsb	r3, r3, #7
 800035e:	2b04      	cmp	r3, #4
 8000360:	bf28      	it	cs
 8000362:	2304      	movcs	r3, #4
 8000364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3304      	adds	r3, #4
 800036a:	2b06      	cmp	r3, #6
 800036c:	d902      	bls.n	8000374 <NVIC_EncodePriority+0x30>
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3b03      	subs	r3, #3
 8000372:	e000      	b.n	8000376 <NVIC_EncodePriority+0x32>
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	f04f 32ff 	mov.w	r2, #4294967295
 800037c:	69bb      	ldr	r3, [r7, #24]
 800037e:	fa02 f303 	lsl.w	r3, r2, r3
 8000382:	43da      	mvns	r2, r3
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	401a      	ands	r2, r3
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800038c:	f04f 31ff 	mov.w	r1, #4294967295
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	43d9      	mvns	r1, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	4313      	orrs	r3, r2
         );
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3724      	adds	r7, #36	; 0x24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b8:	d301      	bcc.n	80003be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ba:	2301      	movs	r3, #1
 80003bc:	e00f      	b.n	80003de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <SysTick_Config+0x40>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003c6:	210f      	movs	r1, #15
 80003c8:	f04f 30ff 	mov.w	r0, #4294967295
 80003cc:	f7ff ff90 	bl	80002f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <SysTick_Config+0x40>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003d6:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <SysTick_Config+0x40>)
 80003d8:	2207      	movs	r2, #7
 80003da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	e000e010 	.word	0xe000e010

080003ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f7ff ff2d 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000402:	b580      	push	{r7, lr}
 8000404:	b086      	sub	sp, #24
 8000406:	af00      	add	r7, sp, #0
 8000408:	4603      	mov	r3, r0
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
 800040e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000414:	f7ff ff42 	bl	800029c <__NVIC_GetPriorityGrouping>
 8000418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	68b9      	ldr	r1, [r7, #8]
 800041e:	6978      	ldr	r0, [r7, #20]
 8000420:	f7ff ff90 	bl	8000344 <NVIC_EncodePriority>
 8000424:	4602      	mov	r2, r0
 8000426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800042a:	4611      	mov	r1, r2
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff5f 	bl	80002f0 <__NVIC_SetPriority>
}
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	b082      	sub	sp, #8
 800043e:	af00      	add	r7, sp, #0
 8000440:	4603      	mov	r3, r0
 8000442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff35 	bl	80002b8 <__NVIC_EnableIRQ>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b082      	sub	sp, #8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ffa2 	bl	80003a8 <SysTick_Config>
 8000464:	4603      	mov	r3, r0
}
 8000466:	4618      	mov	r0, r3
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000470:	b480      	push	{r7}
 8000472:	b08b      	sub	sp, #44	; 0x2c
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800047a:	2300      	movs	r3, #0
 800047c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800047e:	2300      	movs	r3, #0
 8000480:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000482:	e127      	b.n	80006d4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000484:	2201      	movs	r2, #1
 8000486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000488:	fa02 f303 	lsl.w	r3, r2, r3
 800048c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	69fa      	ldr	r2, [r7, #28]
 8000494:	4013      	ands	r3, r2
 8000496:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000498:	69ba      	ldr	r2, [r7, #24]
 800049a:	69fb      	ldr	r3, [r7, #28]
 800049c:	429a      	cmp	r2, r3
 800049e:	f040 8116 	bne.w	80006ce <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	2b12      	cmp	r3, #18
 80004a8:	d034      	beq.n	8000514 <HAL_GPIO_Init+0xa4>
 80004aa:	2b12      	cmp	r3, #18
 80004ac:	d80d      	bhi.n	80004ca <HAL_GPIO_Init+0x5a>
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	d02b      	beq.n	800050a <HAL_GPIO_Init+0x9a>
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d804      	bhi.n	80004c0 <HAL_GPIO_Init+0x50>
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d031      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d01c      	beq.n	80004f8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004be:	e048      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d043      	beq.n	800054c <HAL_GPIO_Init+0xdc>
 80004c4:	2b11      	cmp	r3, #17
 80004c6:	d01b      	beq.n	8000500 <HAL_GPIO_Init+0x90>
          break;
 80004c8:	e043      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004ca:	4a89      	ldr	r2, [pc, #548]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d026      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004d0:	4a87      	ldr	r2, [pc, #540]	; (80006f0 <HAL_GPIO_Init+0x280>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d806      	bhi.n	80004e4 <HAL_GPIO_Init+0x74>
 80004d6:	4a87      	ldr	r2, [pc, #540]	; (80006f4 <HAL_GPIO_Init+0x284>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d020      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004dc:	4a86      	ldr	r2, [pc, #536]	; (80006f8 <HAL_GPIO_Init+0x288>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d01d      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004e2:	e036      	b.n	8000552 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004e4:	4a85      	ldr	r2, [pc, #532]	; (80006fc <HAL_GPIO_Init+0x28c>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d019      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004ea:	4a85      	ldr	r2, [pc, #532]	; (8000700 <HAL_GPIO_Init+0x290>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d016      	beq.n	800051e <HAL_GPIO_Init+0xae>
 80004f0:	4a84      	ldr	r2, [pc, #528]	; (8000704 <HAL_GPIO_Init+0x294>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d013      	beq.n	800051e <HAL_GPIO_Init+0xae>
          break;
 80004f6:	e02c      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	623b      	str	r3, [r7, #32]
          break;
 80004fe:	e028      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	3304      	adds	r3, #4
 8000506:	623b      	str	r3, [r7, #32]
          break;
 8000508:	e023      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	3308      	adds	r3, #8
 8000510:	623b      	str	r3, [r7, #32]
          break;
 8000512:	e01e      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	330c      	adds	r3, #12
 800051a:	623b      	str	r3, [r7, #32]
          break;
 800051c:	e019      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d102      	bne.n	800052c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000526:	2304      	movs	r3, #4
 8000528:	623b      	str	r3, [r7, #32]
          break;
 800052a:	e012      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d105      	bne.n	8000540 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000534:	2308      	movs	r3, #8
 8000536:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	611a      	str	r2, [r3, #16]
          break;
 800053e:	e008      	b.n	8000552 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000540:	2308      	movs	r3, #8
 8000542:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	69fa      	ldr	r2, [r7, #28]
 8000548:	615a      	str	r2, [r3, #20]
          break;
 800054a:	e002      	b.n	8000552 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
          break;
 8000550:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000552:	69bb      	ldr	r3, [r7, #24]
 8000554:	2bff      	cmp	r3, #255	; 0xff
 8000556:	d801      	bhi.n	800055c <HAL_GPIO_Init+0xec>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	e001      	b.n	8000560 <HAL_GPIO_Init+0xf0>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3304      	adds	r3, #4
 8000560:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	2bff      	cmp	r3, #255	; 0xff
 8000566:	d802      	bhi.n	800056e <HAL_GPIO_Init+0xfe>
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	e002      	b.n	8000574 <HAL_GPIO_Init+0x104>
 800056e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000570:	3b08      	subs	r3, #8
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	210f      	movs	r1, #15
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	fa01 f303 	lsl.w	r3, r1, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	401a      	ands	r2, r3
 8000586:	6a39      	ldr	r1, [r7, #32]
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	431a      	orrs	r2, r3
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	2b00      	cmp	r3, #0
 800059e:	f000 8096 	beq.w	80006ce <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005a2:	4b59      	ldr	r3, [pc, #356]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a58      	ldr	r2, [pc, #352]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6193      	str	r3, [r2, #24]
 80005ae:	4b56      	ldr	r3, [pc, #344]	; (8000708 <HAL_GPIO_Init+0x298>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005ba:	4a54      	ldr	r2, [pc, #336]	; (800070c <HAL_GPIO_Init+0x29c>)
 80005bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005be:	089b      	lsrs	r3, r3, #2
 80005c0:	3302      	adds	r3, #2
 80005c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ca:	f003 0303 	and.w	r3, r3, #3
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	220f      	movs	r2, #15
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	43db      	mvns	r3, r3
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	4013      	ands	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a4b      	ldr	r2, [pc, #300]	; (8000710 <HAL_GPIO_Init+0x2a0>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d013      	beq.n	800060e <HAL_GPIO_Init+0x19e>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a4a      	ldr	r2, [pc, #296]	; (8000714 <HAL_GPIO_Init+0x2a4>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d00d      	beq.n	800060a <HAL_GPIO_Init+0x19a>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a49      	ldr	r2, [pc, #292]	; (8000718 <HAL_GPIO_Init+0x2a8>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d007      	beq.n	8000606 <HAL_GPIO_Init+0x196>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a48      	ldr	r2, [pc, #288]	; (800071c <HAL_GPIO_Init+0x2ac>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d101      	bne.n	8000602 <HAL_GPIO_Init+0x192>
 80005fe:	2303      	movs	r3, #3
 8000600:	e006      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000602:	2304      	movs	r3, #4
 8000604:	e004      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 8000606:	2302      	movs	r3, #2
 8000608:	e002      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060a:	2301      	movs	r3, #1
 800060c:	e000      	b.n	8000610 <HAL_GPIO_Init+0x1a0>
 800060e:	2300      	movs	r3, #0
 8000610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000612:	f002 0203 	and.w	r2, r2, #3
 8000616:	0092      	lsls	r2, r2, #2
 8000618:	4093      	lsls	r3, r2
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	4313      	orrs	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000620:	493a      	ldr	r1, [pc, #232]	; (800070c <HAL_GPIO_Init+0x29c>)
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	089b      	lsrs	r3, r3, #2
 8000626:	3302      	adds	r3, #2
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000636:	2b00      	cmp	r3, #0
 8000638:	d006      	beq.n	8000648 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800063a:	4b39      	ldr	r3, [pc, #228]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	4938      	ldr	r1, [pc, #224]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	4313      	orrs	r3, r2
 8000644:	600b      	str	r3, [r1, #0]
 8000646:	e006      	b.n	8000656 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000648:	4b35      	ldr	r3, [pc, #212]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	43db      	mvns	r3, r3
 8000650:	4933      	ldr	r1, [pc, #204]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000652:	4013      	ands	r3, r2
 8000654:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065e:	2b00      	cmp	r3, #0
 8000660:	d006      	beq.n	8000670 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000662:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000664:	685a      	ldr	r2, [r3, #4]
 8000666:	492e      	ldr	r1, [pc, #184]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	4313      	orrs	r3, r2
 800066c:	604b      	str	r3, [r1, #4]
 800066e:	e006      	b.n	800067e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000672:	685a      	ldr	r2, [r3, #4]
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	43db      	mvns	r3, r3
 8000678:	4929      	ldr	r1, [pc, #164]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800067a:	4013      	ands	r3, r2
 800067c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000686:	2b00      	cmp	r3, #0
 8000688:	d006      	beq.n	8000698 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800068c:	689a      	ldr	r2, [r3, #8]
 800068e:	4924      	ldr	r1, [pc, #144]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	4313      	orrs	r3, r2
 8000694:	608b      	str	r3, [r1, #8]
 8000696:	e006      	b.n	80006a6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 800069a:	689a      	ldr	r2, [r3, #8]
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	43db      	mvns	r3, r3
 80006a0:	491f      	ldr	r1, [pc, #124]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006a2:	4013      	ands	r3, r2
 80006a4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d006      	beq.n	80006c0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b4:	68da      	ldr	r2, [r3, #12]
 80006b6:	491a      	ldr	r1, [pc, #104]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	60cb      	str	r3, [r1, #12]
 80006be:	e006      	b.n	80006ce <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006c2:	68da      	ldr	r2, [r3, #12]
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	43db      	mvns	r3, r3
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <HAL_GPIO_Init+0x2b0>)
 80006ca:	4013      	ands	r3, r2
 80006cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	3301      	adds	r3, #1
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	fa22 f303 	lsr.w	r3, r2, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	f47f aed0 	bne.w	8000484 <HAL_GPIO_Init+0x14>
  }
}
 80006e4:	bf00      	nop
 80006e6:	372c      	adds	r7, #44	; 0x2c
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	10210000 	.word	0x10210000
 80006f4:	10110000 	.word	0x10110000
 80006f8:	10120000 	.word	0x10120000
 80006fc:	10310000 	.word	0x10310000
 8000700:	10320000 	.word	0x10320000
 8000704:	10220000 	.word	0x10220000
 8000708:	40021000 	.word	0x40021000
 800070c:	40010000 	.word	0x40010000
 8000710:	40010800 	.word	0x40010800
 8000714:	40010c00 	.word	0x40010c00
 8000718:	40011000 	.word	0x40011000
 800071c:	40011400 	.word	0x40011400
 8000720:	40010400 	.word	0x40010400

08000724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	807b      	strh	r3, [r7, #2]
 8000730:	4613      	mov	r3, r2
 8000732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000734:	787b      	ldrb	r3, [r7, #1]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d003      	beq.n	8000742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800073a:	887a      	ldrh	r2, [r7, #2]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000740:	e003      	b.n	800074a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000742:	887b      	ldrh	r3, [r7, #2]
 8000744:	041a      	lsls	r2, r3, #16
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	611a      	str	r2, [r3, #16]
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d101      	bne.n	8000766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
 8000764:	e26c      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	2b00      	cmp	r3, #0
 8000770:	f000 8087 	beq.w	8000882 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000774:	4b92      	ldr	r3, [pc, #584]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	f003 030c 	and.w	r3, r3, #12
 800077c:	2b04      	cmp	r3, #4
 800077e:	d00c      	beq.n	800079a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000780:	4b8f      	ldr	r3, [pc, #572]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	f003 030c 	and.w	r3, r3, #12
 8000788:	2b08      	cmp	r3, #8
 800078a:	d112      	bne.n	80007b2 <HAL_RCC_OscConfig+0x5e>
 800078c:	4b8c      	ldr	r3, [pc, #560]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000798:	d10b      	bne.n	80007b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800079a:	4b89      	ldr	r3, [pc, #548]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d06c      	beq.n	8000880 <HAL_RCC_OscConfig+0x12c>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d168      	bne.n	8000880 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	e246      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007ba:	d106      	bne.n	80007ca <HAL_RCC_OscConfig+0x76>
 80007bc:	4b80      	ldr	r3, [pc, #512]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a7f      	ldr	r2, [pc, #508]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80007c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	e02e      	b.n	8000828 <HAL_RCC_OscConfig+0xd4>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d10c      	bne.n	80007ec <HAL_RCC_OscConfig+0x98>
 80007d2:	4b7b      	ldr	r3, [pc, #492]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a7a      	ldr	r2, [pc, #488]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80007d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007dc:	6013      	str	r3, [r2, #0]
 80007de:	4b78      	ldr	r3, [pc, #480]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a77      	ldr	r2, [pc, #476]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80007e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007e8:	6013      	str	r3, [r2, #0]
 80007ea:	e01d      	b.n	8000828 <HAL_RCC_OscConfig+0xd4>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007f4:	d10c      	bne.n	8000810 <HAL_RCC_OscConfig+0xbc>
 80007f6:	4b72      	ldr	r3, [pc, #456]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a71      	ldr	r2, [pc, #452]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80007fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000800:	6013      	str	r3, [r2, #0]
 8000802:	4b6f      	ldr	r3, [pc, #444]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a6e      	ldr	r2, [pc, #440]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800080c:	6013      	str	r3, [r2, #0]
 800080e:	e00b      	b.n	8000828 <HAL_RCC_OscConfig+0xd4>
 8000810:	4b6b      	ldr	r3, [pc, #428]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a6a      	ldr	r2, [pc, #424]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	4b68      	ldr	r3, [pc, #416]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a67      	ldr	r2, [pc, #412]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000826:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d013      	beq.n	8000858 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000830:	f7ff fce4 	bl	80001fc <HAL_GetTick>
 8000834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000836:	e008      	b.n	800084a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000838:	f7ff fce0 	bl	80001fc <HAL_GetTick>
 800083c:	4602      	mov	r2, r0
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	2b64      	cmp	r3, #100	; 0x64
 8000844:	d901      	bls.n	800084a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000846:	2303      	movs	r3, #3
 8000848:	e1fa      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800084a:	4b5d      	ldr	r3, [pc, #372]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f0      	beq.n	8000838 <HAL_RCC_OscConfig+0xe4>
 8000856:	e014      	b.n	8000882 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000858:	f7ff fcd0 	bl	80001fc <HAL_GetTick>
 800085c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800085e:	e008      	b.n	8000872 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000860:	f7ff fccc 	bl	80001fc <HAL_GetTick>
 8000864:	4602      	mov	r2, r0
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	2b64      	cmp	r3, #100	; 0x64
 800086c:	d901      	bls.n	8000872 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800086e:	2303      	movs	r3, #3
 8000870:	e1e6      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000872:	4b53      	ldr	r3, [pc, #332]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087a:	2b00      	cmp	r3, #0
 800087c:	d1f0      	bne.n	8000860 <HAL_RCC_OscConfig+0x10c>
 800087e:	e000      	b.n	8000882 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	2b00      	cmp	r3, #0
 800088c:	d063      	beq.n	8000956 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800088e:	4b4c      	ldr	r3, [pc, #304]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	f003 030c 	and.w	r3, r3, #12
 8000896:	2b00      	cmp	r3, #0
 8000898:	d00b      	beq.n	80008b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800089a:	4b49      	ldr	r3, [pc, #292]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	f003 030c 	and.w	r3, r3, #12
 80008a2:	2b08      	cmp	r3, #8
 80008a4:	d11c      	bne.n	80008e0 <HAL_RCC_OscConfig+0x18c>
 80008a6:	4b46      	ldr	r3, [pc, #280]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d116      	bne.n	80008e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008b2:	4b43      	ldr	r3, [pc, #268]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d005      	beq.n	80008ca <HAL_RCC_OscConfig+0x176>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	691b      	ldr	r3, [r3, #16]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d001      	beq.n	80008ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e1ba      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ca:	4b3d      	ldr	r3, [pc, #244]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	00db      	lsls	r3, r3, #3
 80008d8:	4939      	ldr	r1, [pc, #228]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 80008da:	4313      	orrs	r3, r2
 80008dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008de:	e03a      	b.n	8000956 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	691b      	ldr	r3, [r3, #16]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d020      	beq.n	800092a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008e8:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <HAL_RCC_OscConfig+0x270>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008ee:	f7ff fc85 	bl	80001fc <HAL_GetTick>
 80008f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f4:	e008      	b.n	8000908 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008f6:	f7ff fc81 	bl	80001fc <HAL_GetTick>
 80008fa:	4602      	mov	r2, r0
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	1ad3      	subs	r3, r2, r3
 8000900:	2b02      	cmp	r3, #2
 8000902:	d901      	bls.n	8000908 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000904:	2303      	movs	r3, #3
 8000906:	e19b      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000908:	4b2d      	ldr	r3, [pc, #180]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f003 0302 	and.w	r3, r3, #2
 8000910:	2b00      	cmp	r3, #0
 8000912:	d0f0      	beq.n	80008f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000914:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	00db      	lsls	r3, r3, #3
 8000922:	4927      	ldr	r1, [pc, #156]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 8000924:	4313      	orrs	r3, r2
 8000926:	600b      	str	r3, [r1, #0]
 8000928:	e015      	b.n	8000956 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800092a:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <HAL_RCC_OscConfig+0x270>)
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000930:	f7ff fc64 	bl	80001fc <HAL_GetTick>
 8000934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000936:	e008      	b.n	800094a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000938:	f7ff fc60 	bl	80001fc <HAL_GetTick>
 800093c:	4602      	mov	r2, r0
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	2b02      	cmp	r3, #2
 8000944:	d901      	bls.n	800094a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000946:	2303      	movs	r3, #3
 8000948:	e17a      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1f0      	bne.n	8000938 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	2b00      	cmp	r3, #0
 8000960:	d03a      	beq.n	80009d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d019      	beq.n	800099e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <HAL_RCC_OscConfig+0x274>)
 800096c:	2201      	movs	r2, #1
 800096e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000970:	f7ff fc44 	bl	80001fc <HAL_GetTick>
 8000974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000976:	e008      	b.n	800098a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000978:	f7ff fc40 	bl	80001fc <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	2b02      	cmp	r3, #2
 8000984:	d901      	bls.n	800098a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000986:	2303      	movs	r3, #3
 8000988:	e15a      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HAL_RCC_OscConfig+0x26c>)
 800098c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0f0      	beq.n	8000978 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000996:	2001      	movs	r0, #1
 8000998:	f000 fada 	bl	8000f50 <RCC_Delay>
 800099c:	e01c      	b.n	80009d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <HAL_RCC_OscConfig+0x274>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009a4:	f7ff fc2a 	bl	80001fc <HAL_GetTick>
 80009a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009aa:	e00f      	b.n	80009cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009ac:	f7ff fc26 	bl	80001fc <HAL_GetTick>
 80009b0:	4602      	mov	r2, r0
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d908      	bls.n	80009cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80009ba:	2303      	movs	r3, #3
 80009bc:	e140      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
 80009be:	bf00      	nop
 80009c0:	40021000 	.word	0x40021000
 80009c4:	42420000 	.word	0x42420000
 80009c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009cc:	4b9e      	ldr	r3, [pc, #632]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 80009ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1e9      	bne.n	80009ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f003 0304 	and.w	r3, r3, #4
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	f000 80a6 	beq.w	8000b32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009e6:	2300      	movs	r3, #0
 80009e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009ea:	4b97      	ldr	r3, [pc, #604]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d10d      	bne.n	8000a12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	4b94      	ldr	r3, [pc, #592]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	4a93      	ldr	r2, [pc, #588]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	61d3      	str	r3, [r2, #28]
 8000a02:	4b91      	ldr	r3, [pc, #580]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a12:	4b8e      	ldr	r3, [pc, #568]	; (8000c4c <HAL_RCC_OscConfig+0x4f8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d118      	bne.n	8000a50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a1e:	4b8b      	ldr	r3, [pc, #556]	; (8000c4c <HAL_RCC_OscConfig+0x4f8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a8a      	ldr	r2, [pc, #552]	; (8000c4c <HAL_RCC_OscConfig+0x4f8>)
 8000a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a2a:	f7ff fbe7 	bl	80001fc <HAL_GetTick>
 8000a2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a30:	e008      	b.n	8000a44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a32:	f7ff fbe3 	bl	80001fc <HAL_GetTick>
 8000a36:	4602      	mov	r2, r0
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	2b64      	cmp	r3, #100	; 0x64
 8000a3e:	d901      	bls.n	8000a44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a40:	2303      	movs	r3, #3
 8000a42:	e0fd      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a44:	4b81      	ldr	r3, [pc, #516]	; (8000c4c <HAL_RCC_OscConfig+0x4f8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d0f0      	beq.n	8000a32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d106      	bne.n	8000a66 <HAL_RCC_OscConfig+0x312>
 8000a58:	4b7b      	ldr	r3, [pc, #492]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000a5a:	6a1b      	ldr	r3, [r3, #32]
 8000a5c:	4a7a      	ldr	r2, [pc, #488]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	6213      	str	r3, [r2, #32]
 8000a64:	e02d      	b.n	8000ac2 <HAL_RCC_OscConfig+0x36e>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d10c      	bne.n	8000a88 <HAL_RCC_OscConfig+0x334>
 8000a6e:	4b76      	ldr	r3, [pc, #472]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000a70:	6a1b      	ldr	r3, [r3, #32]
 8000a72:	4a75      	ldr	r2, [pc, #468]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000a74:	f023 0301 	bic.w	r3, r3, #1
 8000a78:	6213      	str	r3, [r2, #32]
 8000a7a:	4b73      	ldr	r3, [pc, #460]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000a7c:	6a1b      	ldr	r3, [r3, #32]
 8000a7e:	4a72      	ldr	r2, [pc, #456]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000a80:	f023 0304 	bic.w	r3, r3, #4
 8000a84:	6213      	str	r3, [r2, #32]
 8000a86:	e01c      	b.n	8000ac2 <HAL_RCC_OscConfig+0x36e>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	2b05      	cmp	r3, #5
 8000a8e:	d10c      	bne.n	8000aaa <HAL_RCC_OscConfig+0x356>
 8000a90:	4b6d      	ldr	r3, [pc, #436]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000a92:	6a1b      	ldr	r3, [r3, #32]
 8000a94:	4a6c      	ldr	r2, [pc, #432]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	6213      	str	r3, [r2, #32]
 8000a9c:	4b6a      	ldr	r3, [pc, #424]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000a9e:	6a1b      	ldr	r3, [r3, #32]
 8000aa0:	4a69      	ldr	r2, [pc, #420]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	6213      	str	r3, [r2, #32]
 8000aa8:	e00b      	b.n	8000ac2 <HAL_RCC_OscConfig+0x36e>
 8000aaa:	4b67      	ldr	r3, [pc, #412]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000aac:	6a1b      	ldr	r3, [r3, #32]
 8000aae:	4a66      	ldr	r2, [pc, #408]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000ab0:	f023 0301 	bic.w	r3, r3, #1
 8000ab4:	6213      	str	r3, [r2, #32]
 8000ab6:	4b64      	ldr	r3, [pc, #400]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000ab8:	6a1b      	ldr	r3, [r3, #32]
 8000aba:	4a63      	ldr	r2, [pc, #396]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000abc:	f023 0304 	bic.w	r3, r3, #4
 8000ac0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d015      	beq.n	8000af6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aca:	f7ff fb97 	bl	80001fc <HAL_GetTick>
 8000ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ad0:	e00a      	b.n	8000ae8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ad2:	f7ff fb93 	bl	80001fc <HAL_GetTick>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d901      	bls.n	8000ae8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	e0ab      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ae8:	4b57      	ldr	r3, [pc, #348]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000aea:	6a1b      	ldr	r3, [r3, #32]
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0ee      	beq.n	8000ad2 <HAL_RCC_OscConfig+0x37e>
 8000af4:	e014      	b.n	8000b20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000af6:	f7ff fb81 	bl	80001fc <HAL_GetTick>
 8000afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000afc:	e00a      	b.n	8000b14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000afe:	f7ff fb7d 	bl	80001fc <HAL_GetTick>
 8000b02:	4602      	mov	r2, r0
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d901      	bls.n	8000b14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b10:	2303      	movs	r3, #3
 8000b12:	e095      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b14:	4b4c      	ldr	r3, [pc, #304]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000b16:	6a1b      	ldr	r3, [r3, #32]
 8000b18:	f003 0302 	and.w	r3, r3, #2
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d1ee      	bne.n	8000afe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b20:	7dfb      	ldrb	r3, [r7, #23]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d105      	bne.n	8000b32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b26:	4b48      	ldr	r3, [pc, #288]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a47      	ldr	r2, [pc, #284]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f000 8081 	beq.w	8000c3e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b3c:	4b42      	ldr	r3, [pc, #264]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f003 030c 	and.w	r3, r3, #12
 8000b44:	2b08      	cmp	r3, #8
 8000b46:	d061      	beq.n	8000c0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	69db      	ldr	r3, [r3, #28]
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d146      	bne.n	8000bde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b50:	4b3f      	ldr	r3, [pc, #252]	; (8000c50 <HAL_RCC_OscConfig+0x4fc>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b56:	f7ff fb51 	bl	80001fc <HAL_GetTick>
 8000b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b5c:	e008      	b.n	8000b70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b5e:	f7ff fb4d 	bl	80001fc <HAL_GetTick>
 8000b62:	4602      	mov	r2, r0
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d901      	bls.n	8000b70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	e067      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b70:	4b35      	ldr	r3, [pc, #212]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d1f0      	bne.n	8000b5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6a1b      	ldr	r3, [r3, #32]
 8000b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b84:	d108      	bne.n	8000b98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b86:	4b30      	ldr	r3, [pc, #192]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	492d      	ldr	r1, [pc, #180]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000b94:	4313      	orrs	r3, r2
 8000b96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b98:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6a19      	ldr	r1, [r3, #32]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba8:	430b      	orrs	r3, r1
 8000baa:	4927      	ldr	r1, [pc, #156]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000bac:	4313      	orrs	r3, r2
 8000bae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000bb0:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <HAL_RCC_OscConfig+0x4fc>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb6:	f7ff fb21 	bl	80001fc <HAL_GetTick>
 8000bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bbc:	e008      	b.n	8000bd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bbe:	f7ff fb1d 	bl	80001fc <HAL_GetTick>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d901      	bls.n	8000bd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	e037      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d0f0      	beq.n	8000bbe <HAL_RCC_OscConfig+0x46a>
 8000bdc:	e02f      	b.n	8000c3e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <HAL_RCC_OscConfig+0x4fc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be4:	f7ff fb0a 	bl	80001fc <HAL_GetTick>
 8000be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bea:	e008      	b.n	8000bfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bec:	f7ff fb06 	bl	80001fc <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d901      	bls.n	8000bfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e020      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1f0      	bne.n	8000bec <HAL_RCC_OscConfig+0x498>
 8000c0a:	e018      	b.n	8000c3e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	69db      	ldr	r3, [r3, #28]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d101      	bne.n	8000c18 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e013      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_RCC_OscConfig+0x4f4>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a1b      	ldr	r3, [r3, #32]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d106      	bne.n	8000c3a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d001      	beq.n	8000c3e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e000      	b.n	8000c40 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40007000 	.word	0x40007000
 8000c50:	42420060 	.word	0x42420060

08000c54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d101      	bne.n	8000c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e0d0      	b.n	8000e0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c68:	4b6a      	ldr	r3, [pc, #424]	; (8000e14 <HAL_RCC_ClockConfig+0x1c0>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f003 0307 	and.w	r3, r3, #7
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d910      	bls.n	8000c98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c76:	4b67      	ldr	r3, [pc, #412]	; (8000e14 <HAL_RCC_ClockConfig+0x1c0>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f023 0207 	bic.w	r2, r3, #7
 8000c7e:	4965      	ldr	r1, [pc, #404]	; (8000e14 <HAL_RCC_ClockConfig+0x1c0>)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c86:	4b63      	ldr	r3, [pc, #396]	; (8000e14 <HAL_RCC_ClockConfig+0x1c0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d001      	beq.n	8000c98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e0b8      	b.n	8000e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d020      	beq.n	8000ce6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 0304 	and.w	r3, r3, #4
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d005      	beq.n	8000cbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cb0:	4b59      	ldr	r3, [pc, #356]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	4a58      	ldr	r2, [pc, #352]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000cb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000cba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 0308 	and.w	r3, r3, #8
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d005      	beq.n	8000cd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cc8:	4b53      	ldr	r3, [pc, #332]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	4a52      	ldr	r2, [pc, #328]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000cce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000cd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cd4:	4b50      	ldr	r3, [pc, #320]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	494d      	ldr	r1, [pc, #308]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d040      	beq.n	8000d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d107      	bne.n	8000d0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfa:	4b47      	ldr	r3, [pc, #284]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d115      	bne.n	8000d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e07f      	b.n	8000e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d107      	bne.n	8000d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d12:	4b41      	ldr	r3, [pc, #260]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d109      	bne.n	8000d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e073      	b.n	8000e0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d22:	4b3d      	ldr	r3, [pc, #244]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e06b      	b.n	8000e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d32:	4b39      	ldr	r3, [pc, #228]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f023 0203 	bic.w	r2, r3, #3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	4936      	ldr	r1, [pc, #216]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000d40:	4313      	orrs	r3, r2
 8000d42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d44:	f7ff fa5a 	bl	80001fc <HAL_GetTick>
 8000d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d4a:	e00a      	b.n	8000d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d4c:	f7ff fa56 	bl	80001fc <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e053      	b.n	8000e0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d62:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 020c 	and.w	r2, r3, #12
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d1eb      	bne.n	8000d4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d74:	4b27      	ldr	r3, [pc, #156]	; (8000e14 <HAL_RCC_ClockConfig+0x1c0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0307 	and.w	r3, r3, #7
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d210      	bcs.n	8000da4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d82:	4b24      	ldr	r3, [pc, #144]	; (8000e14 <HAL_RCC_ClockConfig+0x1c0>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f023 0207 	bic.w	r2, r3, #7
 8000d8a:	4922      	ldr	r1, [pc, #136]	; (8000e14 <HAL_RCC_ClockConfig+0x1c0>)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d92:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <HAL_RCC_ClockConfig+0x1c0>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d001      	beq.n	8000da4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e032      	b.n	8000e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0304 	and.w	r3, r3, #4
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d008      	beq.n	8000dc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	4916      	ldr	r1, [pc, #88]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d009      	beq.n	8000de2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	490e      	ldr	r1, [pc, #56]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000dde:	4313      	orrs	r3, r2
 8000de0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000de2:	f000 f821 	bl	8000e28 <HAL_RCC_GetSysClockFreq>
 8000de6:	4601      	mov	r1, r0
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_RCC_ClockConfig+0x1c4>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	091b      	lsrs	r3, r3, #4
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_RCC_ClockConfig+0x1c8>)
 8000df4:	5cd3      	ldrb	r3, [r2, r3]
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	4a09      	ldr	r2, [pc, #36]	; (8000e20 <HAL_RCC_ClockConfig+0x1cc>)
 8000dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_RCC_ClockConfig+0x1d0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff f9b8 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40022000 	.word	0x40022000
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	08002148 	.word	0x08002148
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000000 	.word	0x20000000

08000e28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e28:	b490      	push	{r4, r7}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e30:	1d3c      	adds	r4, r7, #4
 8000e32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e38:	4b28      	ldr	r3, [pc, #160]	; (8000edc <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e52:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f003 030c 	and.w	r3, r3, #12
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	d002      	beq.n	8000e68 <HAL_RCC_GetSysClockFreq+0x40>
 8000e62:	2b08      	cmp	r3, #8
 8000e64:	d003      	beq.n	8000e6e <HAL_RCC_GetSysClockFreq+0x46>
 8000e66:	e02d      	b.n	8000ec4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e68:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e6a:	623b      	str	r3, [r7, #32]
      break;
 8000e6c:	e02d      	b.n	8000eca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	0c9b      	lsrs	r3, r3, #18
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e7a:	4413      	add	r3, r2
 8000e7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e80:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d013      	beq.n	8000eb4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	0c5b      	lsrs	r3, r3, #17
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e9a:	4413      	add	r3, r2
 8000e9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000ea0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	4a0f      	ldr	r2, [pc, #60]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ea6:	fb02 f203 	mul.w	r2, r2, r3
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb2:	e004      	b.n	8000ebe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000eb8:	fb02 f303 	mul.w	r3, r2, r3
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	623b      	str	r3, [r7, #32]
      break;
 8000ec2:	e002      	b.n	8000eca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ec6:	623b      	str	r3, [r7, #32]
      break;
 8000ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000eca:	6a3b      	ldr	r3, [r7, #32]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3728      	adds	r7, #40	; 0x28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc90      	pop	{r4, r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	08002134 	.word	0x08002134
 8000edc:	08002144 	.word	0x08002144
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	007a1200 	.word	0x007a1200
 8000ee8:	003d0900 	.word	0x003d0900

08000eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ef0:	4b02      	ldr	r3, [pc, #8]	; (8000efc <HAL_RCC_GetHCLKFreq+0x10>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	20000008 	.word	0x20000008

08000f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f04:	f7ff fff2 	bl	8000eec <HAL_RCC_GetHCLKFreq>
 8000f08:	4601      	mov	r1, r0
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	0a1b      	lsrs	r3, r3, #8
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	4a03      	ldr	r2, [pc, #12]	; (8000f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f16:	5cd3      	ldrb	r3, [r2, r3]
 8000f18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40021000 	.word	0x40021000
 8000f24:	08002158 	.word	0x08002158

08000f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f2c:	f7ff ffde 	bl	8000eec <HAL_RCC_GetHCLKFreq>
 8000f30:	4601      	mov	r1, r0
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	0adb      	lsrs	r3, r3, #11
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	4a03      	ldr	r2, [pc, #12]	; (8000f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f3e:	5cd3      	ldrb	r3, [r2, r3]
 8000f40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	08002158 	.word	0x08002158

08000f50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <RCC_Delay+0x34>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <RCC_Delay+0x38>)
 8000f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f62:	0a5b      	lsrs	r3, r3, #9
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	fb02 f303 	mul.w	r3, r2, r3
 8000f6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f6c:	bf00      	nop
  }
  while (Delay --);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	1e5a      	subs	r2, r3, #1
 8000f72:	60fa      	str	r2, [r7, #12]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1f9      	bne.n	8000f6c <RCC_Delay+0x1c>
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000008 	.word	0x20000008
 8000f88:	10624dd3 	.word	0x10624dd3

08000f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e01d      	b.n	8000fda <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d106      	bne.n	8000fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 fe5a 	bl	8001c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2202      	movs	r2, #2
 8000fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3304      	adds	r3, #4
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4610      	mov	r0, r2
 8000fcc:	f000 fa18 	bl	8001400 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b085      	sub	sp, #20
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68da      	ldr	r2, [r3, #12]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f042 0201 	orr.w	r2, r2, #1
 8000ff8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f003 0307 	and.w	r3, r3, #7
 8001004:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2b06      	cmp	r3, #6
 800100a:	d007      	beq.n	800101c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 0201 	orr.w	r2, r2, #1
 800101a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	2b02      	cmp	r3, #2
 800103c:	d122      	bne.n	8001084 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b02      	cmp	r3, #2
 800104a:	d11b      	bne.n	8001084 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f06f 0202 	mvn.w	r2, #2
 8001054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f9ad 	bl	80013ca <HAL_TIM_IC_CaptureCallback>
 8001070:	e005      	b.n	800107e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f9a0 	bl	80013b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f9af 	bl	80013dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	2b04      	cmp	r3, #4
 8001090:	d122      	bne.n	80010d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	2b04      	cmp	r3, #4
 800109e:	d11b      	bne.n	80010d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f06f 0204 	mvn.w	r2, #4
 80010a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2202      	movs	r2, #2
 80010ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f983 	bl	80013ca <HAL_TIM_IC_CaptureCallback>
 80010c4:	e005      	b.n	80010d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 f976 	bl	80013b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 f985 	bl	80013dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	f003 0308 	and.w	r3, r3, #8
 80010e2:	2b08      	cmp	r3, #8
 80010e4:	d122      	bne.n	800112c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d11b      	bne.n	800112c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f06f 0208 	mvn.w	r2, #8
 80010fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2204      	movs	r2, #4
 8001102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 f959 	bl	80013ca <HAL_TIM_IC_CaptureCallback>
 8001118:	e005      	b.n	8001126 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f94c 	bl	80013b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 f95b 	bl	80013dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	f003 0310 	and.w	r3, r3, #16
 8001136:	2b10      	cmp	r3, #16
 8001138:	d122      	bne.n	8001180 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	f003 0310 	and.w	r3, r3, #16
 8001144:	2b10      	cmp	r3, #16
 8001146:	d11b      	bne.n	8001180 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f06f 0210 	mvn.w	r2, #16
 8001150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2208      	movs	r2, #8
 8001156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f92f 	bl	80013ca <HAL_TIM_IC_CaptureCallback>
 800116c:	e005      	b.n	800117a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f922 	bl	80013b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 f931 	bl	80013dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b01      	cmp	r3, #1
 800118c:	d10e      	bne.n	80011ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b01      	cmp	r3, #1
 800119a:	d107      	bne.n	80011ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f06f 0201 	mvn.w	r2, #1
 80011a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 f8fd 	bl	80013a6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b6:	2b80      	cmp	r3, #128	; 0x80
 80011b8:	d10e      	bne.n	80011d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c4:	2b80      	cmp	r3, #128	; 0x80
 80011c6:	d107      	bne.n	80011d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80011d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 fa59 	bl	800168a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011e2:	2b40      	cmp	r3, #64	; 0x40
 80011e4:	d10e      	bne.n	8001204 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011f0:	2b40      	cmp	r3, #64	; 0x40
 80011f2:	d107      	bne.n	8001204 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80011fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f8f5 	bl	80013ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	f003 0320 	and.w	r3, r3, #32
 800120e:	2b20      	cmp	r3, #32
 8001210:	d10e      	bne.n	8001230 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	f003 0320 	and.w	r3, r3, #32
 800121c:	2b20      	cmp	r3, #32
 800121e:	d107      	bne.n	8001230 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f06f 0220 	mvn.w	r2, #32
 8001228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 fa24 	bl	8001678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001248:	2b01      	cmp	r3, #1
 800124a:	d101      	bne.n	8001250 <HAL_TIM_ConfigClockSource+0x18>
 800124c:	2302      	movs	r3, #2
 800124e:	e0a6      	b.n	800139e <HAL_TIM_ConfigClockSource+0x166>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2201      	movs	r2, #1
 8001254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2202      	movs	r2, #2
 800125c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800126e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001276:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b40      	cmp	r3, #64	; 0x40
 8001286:	d067      	beq.n	8001358 <HAL_TIM_ConfigClockSource+0x120>
 8001288:	2b40      	cmp	r3, #64	; 0x40
 800128a:	d80b      	bhi.n	80012a4 <HAL_TIM_ConfigClockSource+0x6c>
 800128c:	2b10      	cmp	r3, #16
 800128e:	d073      	beq.n	8001378 <HAL_TIM_ConfigClockSource+0x140>
 8001290:	2b10      	cmp	r3, #16
 8001292:	d802      	bhi.n	800129a <HAL_TIM_ConfigClockSource+0x62>
 8001294:	2b00      	cmp	r3, #0
 8001296:	d06f      	beq.n	8001378 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001298:	e078      	b.n	800138c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800129a:	2b20      	cmp	r3, #32
 800129c:	d06c      	beq.n	8001378 <HAL_TIM_ConfigClockSource+0x140>
 800129e:	2b30      	cmp	r3, #48	; 0x30
 80012a0:	d06a      	beq.n	8001378 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80012a2:	e073      	b.n	800138c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80012a4:	2b70      	cmp	r3, #112	; 0x70
 80012a6:	d00d      	beq.n	80012c4 <HAL_TIM_ConfigClockSource+0x8c>
 80012a8:	2b70      	cmp	r3, #112	; 0x70
 80012aa:	d804      	bhi.n	80012b6 <HAL_TIM_ConfigClockSource+0x7e>
 80012ac:	2b50      	cmp	r3, #80	; 0x50
 80012ae:	d033      	beq.n	8001318 <HAL_TIM_ConfigClockSource+0xe0>
 80012b0:	2b60      	cmp	r3, #96	; 0x60
 80012b2:	d041      	beq.n	8001338 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80012b4:	e06a      	b.n	800138c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80012b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012ba:	d066      	beq.n	800138a <HAL_TIM_ConfigClockSource+0x152>
 80012bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012c0:	d017      	beq.n	80012f2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80012c2:	e063      	b.n	800138c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6818      	ldr	r0, [r3, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	6899      	ldr	r1, [r3, #8]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	f000 f96d 	bl	80015b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80012e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	609a      	str	r2, [r3, #8]
      break;
 80012f0:	e04c      	b.n	800138c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6818      	ldr	r0, [r3, #0]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	6899      	ldr	r1, [r3, #8]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	f000 f956 	bl	80015b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001314:	609a      	str	r2, [r3, #8]
      break;
 8001316:	e039      	b.n	800138c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	6859      	ldr	r1, [r3, #4]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	461a      	mov	r2, r3
 8001326:	f000 f8cd 	bl	80014c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2150      	movs	r1, #80	; 0x50
 8001330:	4618      	mov	r0, r3
 8001332:	f000 f924 	bl	800157e <TIM_ITRx_SetConfig>
      break;
 8001336:	e029      	b.n	800138c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	6859      	ldr	r1, [r3, #4]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	461a      	mov	r2, r3
 8001346:	f000 f8eb 	bl	8001520 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2160      	movs	r1, #96	; 0x60
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f914 	bl	800157e <TIM_ITRx_SetConfig>
      break;
 8001356:	e019      	b.n	800138c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6818      	ldr	r0, [r3, #0]
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	6859      	ldr	r1, [r3, #4]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	461a      	mov	r2, r3
 8001366:	f000 f8ad 	bl	80014c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2140      	movs	r1, #64	; 0x40
 8001370:	4618      	mov	r0, r3
 8001372:	f000 f904 	bl	800157e <TIM_ITRx_SetConfig>
      break;
 8001376:	e009      	b.n	800138c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	4610      	mov	r0, r2
 8001384:	f000 f8fb 	bl	800157e <TIM_ITRx_SetConfig>
      break;
 8001388:	e000      	b.n	800138c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800138a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr

080013ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a29      	ldr	r2, [pc, #164]	; (80014b8 <TIM_Base_SetConfig+0xb8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d00b      	beq.n	8001430 <TIM_Base_SetConfig+0x30>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800141e:	d007      	beq.n	8001430 <TIM_Base_SetConfig+0x30>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a26      	ldr	r2, [pc, #152]	; (80014bc <TIM_Base_SetConfig+0xbc>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d003      	beq.n	8001430 <TIM_Base_SetConfig+0x30>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a25      	ldr	r2, [pc, #148]	; (80014c0 <TIM_Base_SetConfig+0xc0>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d108      	bne.n	8001442 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a1c      	ldr	r2, [pc, #112]	; (80014b8 <TIM_Base_SetConfig+0xb8>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d00b      	beq.n	8001462 <TIM_Base_SetConfig+0x62>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001450:	d007      	beq.n	8001462 <TIM_Base_SetConfig+0x62>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a19      	ldr	r2, [pc, #100]	; (80014bc <TIM_Base_SetConfig+0xbc>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d003      	beq.n	8001462 <TIM_Base_SetConfig+0x62>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a18      	ldr	r2, [pc, #96]	; (80014c0 <TIM_Base_SetConfig+0xc0>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d108      	bne.n	8001474 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	4313      	orrs	r3, r2
 8001472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	4313      	orrs	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <TIM_Base_SetConfig+0xb8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d103      	bne.n	80014a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	691a      	ldr	r2, [r3, #16]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	615a      	str	r2, [r3, #20]
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	40012c00 	.word	0x40012c00
 80014bc:	40000400 	.word	0x40000400
 80014c0:	40000800 	.word	0x40000800

080014c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b087      	sub	sp, #28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	f023 0201 	bic.w	r2, r3, #1
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f023 030a 	bic.w	r3, r3, #10
 8001500:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4313      	orrs	r3, r2
 8001508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	621a      	str	r2, [r3, #32]
}
 8001516:	bf00      	nop
 8001518:	371c      	adds	r7, #28
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001520:	b480      	push	{r7}
 8001522:	b087      	sub	sp, #28
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	f023 0210 	bic.w	r2, r3, #16
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800154a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	031b      	lsls	r3, r3, #12
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	4313      	orrs	r3, r2
 8001554:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800155c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	011b      	lsls	r3, r3, #4
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	621a      	str	r2, [r3, #32]
}
 8001574:	bf00      	nop
 8001576:	371c      	adds	r7, #28
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800157e:	b480      	push	{r7}
 8001580:	b085      	sub	sp, #20
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001594:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4313      	orrs	r3, r2
 800159c:	f043 0307 	orr.w	r3, r3, #7
 80015a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	609a      	str	r2, [r3, #8]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr

080015b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b087      	sub	sp, #28
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80015cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	021a      	lsls	r2, r3, #8
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	431a      	orrs	r2, r3
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	4313      	orrs	r3, r2
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	4313      	orrs	r3, r2
 80015de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	609a      	str	r2, [r3, #8]
}
 80015e6:	bf00      	nop
 80015e8:	371c      	adds	r7, #28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001604:	2302      	movs	r3, #2
 8001606:	e032      	b.n	800166e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2202      	movs	r2, #2
 8001614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800162e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001640:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	4313      	orrs	r3, r2
 800164a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr

0800168a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e03f      	b.n	800172e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d106      	bne.n	80016c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 fb0a 	bl	8001cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2224      	movs	r2, #36	; 0x24
 80016cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f829 	bl	8001738 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80016f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	695a      	ldr	r2, [r3, #20]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001704:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001714:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2220      	movs	r2, #32
 8001720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2220      	movs	r2, #32
 8001728:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	4313      	orrs	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001772:	f023 030c 	bic.w	r3, r3, #12
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	68f9      	ldr	r1, [r7, #12]
 800177c:	430b      	orrs	r3, r1
 800177e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699a      	ldr	r2, [r3, #24]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a52      	ldr	r2, [pc, #328]	; (80018e4 <UART_SetConfig+0x1ac>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d14e      	bne.n	800183e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80017a0:	f7ff fbc2 	bl	8000f28 <HAL_RCC_GetPCLK2Freq>
 80017a4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	009a      	lsls	r2, r3, #2
 80017b0:	441a      	add	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017bc:	4a4a      	ldr	r2, [pc, #296]	; (80018e8 <UART_SetConfig+0x1b0>)
 80017be:	fba2 2303 	umull	r2, r3, r2, r3
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	0119      	lsls	r1, r3, #4
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	009a      	lsls	r2, r3, #2
 80017d0:	441a      	add	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80017dc:	4b42      	ldr	r3, [pc, #264]	; (80018e8 <UART_SetConfig+0x1b0>)
 80017de:	fba3 0302 	umull	r0, r3, r3, r2
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2064      	movs	r0, #100	; 0x64
 80017e6:	fb00 f303 	mul.w	r3, r0, r3
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	3332      	adds	r3, #50	; 0x32
 80017f0:	4a3d      	ldr	r2, [pc, #244]	; (80018e8 <UART_SetConfig+0x1b0>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017fc:	4419      	add	r1, r3
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	009a      	lsls	r2, r3, #2
 8001808:	441a      	add	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	fbb2 f2f3 	udiv	r2, r2, r3
 8001814:	4b34      	ldr	r3, [pc, #208]	; (80018e8 <UART_SetConfig+0x1b0>)
 8001816:	fba3 0302 	umull	r0, r3, r3, r2
 800181a:	095b      	lsrs	r3, r3, #5
 800181c:	2064      	movs	r0, #100	; 0x64
 800181e:	fb00 f303 	mul.w	r3, r0, r3
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	3332      	adds	r3, #50	; 0x32
 8001828:	4a2f      	ldr	r2, [pc, #188]	; (80018e8 <UART_SetConfig+0x1b0>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	f003 020f 	and.w	r2, r3, #15
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	440a      	add	r2, r1
 800183a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800183c:	e04d      	b.n	80018da <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800183e:	f7ff fb5f 	bl	8000f00 <HAL_RCC_GetPCLK1Freq>
 8001842:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	009a      	lsls	r2, r3, #2
 800184e:	441a      	add	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4a23      	ldr	r2, [pc, #140]	; (80018e8 <UART_SetConfig+0x1b0>)
 800185c:	fba2 2303 	umull	r2, r3, r2, r3
 8001860:	095b      	lsrs	r3, r3, #5
 8001862:	0119      	lsls	r1, r3, #4
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	009a      	lsls	r2, r3, #2
 800186e:	441a      	add	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	fbb2 f2f3 	udiv	r2, r2, r3
 800187a:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <UART_SetConfig+0x1b0>)
 800187c:	fba3 0302 	umull	r0, r3, r3, r2
 8001880:	095b      	lsrs	r3, r3, #5
 8001882:	2064      	movs	r0, #100	; 0x64
 8001884:	fb00 f303 	mul.w	r3, r0, r3
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	3332      	adds	r3, #50	; 0x32
 800188e:	4a16      	ldr	r2, [pc, #88]	; (80018e8 <UART_SetConfig+0x1b0>)
 8001890:	fba2 2303 	umull	r2, r3, r2, r3
 8001894:	095b      	lsrs	r3, r3, #5
 8001896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800189a:	4419      	add	r1, r3
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	009a      	lsls	r2, r3, #2
 80018a6:	441a      	add	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80018b2:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <UART_SetConfig+0x1b0>)
 80018b4:	fba3 0302 	umull	r0, r3, r3, r2
 80018b8:	095b      	lsrs	r3, r3, #5
 80018ba:	2064      	movs	r0, #100	; 0x64
 80018bc:	fb00 f303 	mul.w	r3, r0, r3
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	3332      	adds	r3, #50	; 0x32
 80018c6:	4a08      	ldr	r2, [pc, #32]	; (80018e8 <UART_SetConfig+0x1b0>)
 80018c8:	fba2 2303 	umull	r2, r3, r2, r3
 80018cc:	095b      	lsrs	r3, r3, #5
 80018ce:	f003 020f 	and.w	r2, r3, #15
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	440a      	add	r2, r1
 80018d8:	609a      	str	r2, [r3, #8]
}
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40013800 	.word	0x40013800
 80018e8:	51eb851f 	.word	0x51eb851f

080018ec <LCD_Write4Bit>:

#include "main.h"
#include "LCD_display2.h"
#include <stdio.h>

void LCD_Write4Bit(uint8_t data){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(D4_LCD_GPIO_Port, D4_LCD_Pin, ((data>>0)&1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	461a      	mov	r2, r3
 8001900:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001904:	4814      	ldr	r0, [pc, #80]	; (8001958 <LCD_Write4Bit+0x6c>)
 8001906:	f7fe ff0d 	bl	8000724 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_LCD_GPIO_Port, D5_LCD_Pin, ((data>>1)&1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	085b      	lsrs	r3, r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	461a      	mov	r2, r3
 8001918:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800191c:	480e      	ldr	r0, [pc, #56]	; (8001958 <LCD_Write4Bit+0x6c>)
 800191e:	f7fe ff01 	bl	8000724 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_LCD_GPIO_Port, D6_LCD_Pin, ((data>>2)&1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	089b      	lsrs	r3, r3, #2
 8001926:	b2db      	uxtb	r3, r3
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	b2db      	uxtb	r3, r3
 800192e:	461a      	mov	r2, r3
 8001930:	2108      	movs	r1, #8
 8001932:	480a      	ldr	r0, [pc, #40]	; (800195c <LCD_Write4Bit+0x70>)
 8001934:	f7fe fef6 	bl	8000724 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_LCD_GPIO_Port, D7_LCD_Pin, ((data>>3)&1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	08db      	lsrs	r3, r3, #3
 800193c:	b2db      	uxtb	r3, r3
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	b2db      	uxtb	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	2110      	movs	r1, #16
 8001948:	4804      	ldr	r0, [pc, #16]	; (800195c <LCD_Write4Bit+0x70>)
 800194a:	f7fe feeb 	bl	8000724 <HAL_GPIO_WritePin>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40010800 	.word	0x40010800
 800195c:	40010c00 	.word	0x40010c00

08001960 <LCD_send>:
void LCD_send(_Bool mode, uint8_t data){
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	460a      	mov	r2, r1
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	4613      	mov	r3, r2
 800196e:	71bb      	strb	r3, [r7, #6]
	if (mode) {RS_LCD(1);}
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d006      	beq.n	8001984 <LCD_send+0x24>
 8001976:	2201      	movs	r2, #1
 8001978:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800197c:	481d      	ldr	r0, [pc, #116]	; (80019f4 <LCD_send+0x94>)
 800197e:	f7fe fed1 	bl	8000724 <HAL_GPIO_WritePin>
 8001982:	e005      	b.n	8001990 <LCD_send+0x30>
	else { RS_LCD(0);}
 8001984:	2200      	movs	r2, #0
 8001986:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800198a:	481a      	ldr	r0, [pc, #104]	; (80019f4 <LCD_send+0x94>)
 800198c:	f7fe feca 	bl	8000724 <HAL_GPIO_WritePin>

	LCD_Write4Bit(data>>4);
 8001990:	79bb      	ldrb	r3, [r7, #6]
 8001992:	091b      	lsrs	r3, r3, #4
 8001994:	b2db      	uxtb	r3, r3
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ffa8 	bl	80018ec <LCD_Write4Bit>
	E_LCD();
 800199c:	2201      	movs	r2, #1
 800199e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019a2:	4814      	ldr	r0, [pc, #80]	; (80019f4 <LCD_send+0x94>)
 80019a4:	f7fe febe 	bl	8000724 <HAL_GPIO_WritePin>
 80019a8:	2001      	movs	r0, #1
 80019aa:	f7fe fc31 	bl	8000210 <HAL_Delay>
 80019ae:	2200      	movs	r2, #0
 80019b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019b4:	480f      	ldr	r0, [pc, #60]	; (80019f4 <LCD_send+0x94>)
 80019b6:	f7fe feb5 	bl	8000724 <HAL_GPIO_WritePin>
 80019ba:	2001      	movs	r0, #1
 80019bc:	f7fe fc28 	bl	8000210 <HAL_Delay>
	LCD_Write4Bit(data);
 80019c0:	79bb      	ldrb	r3, [r7, #6]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff ff92 	bl	80018ec <LCD_Write4Bit>
	E_LCD();
 80019c8:	2201      	movs	r2, #1
 80019ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ce:	4809      	ldr	r0, [pc, #36]	; (80019f4 <LCD_send+0x94>)
 80019d0:	f7fe fea8 	bl	8000724 <HAL_GPIO_WritePin>
 80019d4:	2001      	movs	r0, #1
 80019d6:	f7fe fc1b 	bl	8000210 <HAL_Delay>
 80019da:	2200      	movs	r2, #0
 80019dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <LCD_send+0x94>)
 80019e2:	f7fe fe9f 	bl	8000724 <HAL_GPIO_WritePin>
 80019e6:	2001      	movs	r0, #1
 80019e8:	f7fe fc12 	bl	8000210 <HAL_Delay>

}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40010c00 	.word	0x40010c00

080019f8 <LCD_init>:
void LCD_clear(uint8_t x, uint8_t y){
	LCD_Commend(0x01);
}
void LCD_init(void){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	LCD_Commend(0x33);
 80019fc:	2133      	movs	r1, #51	; 0x33
 80019fe:	2000      	movs	r0, #0
 8001a00:	f7ff ffae 	bl	8001960 <LCD_send>
	LCD_Commend(0x32);
 8001a04:	2132      	movs	r1, #50	; 0x32
 8001a06:	2000      	movs	r0, #0
 8001a08:	f7ff ffaa 	bl	8001960 <LCD_send>
	LCD_Commend(0x28);
 8001a0c:	2128      	movs	r1, #40	; 0x28
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f7ff ffa6 	bl	8001960 <LCD_send>
	LCD_Commend(0x0c);
 8001a14:	210c      	movs	r1, #12
 8001a16:	2000      	movs	r0, #0
 8001a18:	f7ff ffa2 	bl	8001960 <LCD_send>
	LCD_Commend(0x06);
 8001a1c:	2106      	movs	r1, #6
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f7ff ff9e 	bl	8001960 <LCD_send>
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <SystemClock_Config>:
#include "stm32f1xx_it.h"
#include "main.h"
#include "hardwareinit.h"

void SystemClock_Config(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b090      	sub	sp, #64	; 0x40
 8001a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2e:	f107 0318 	add.w	r3, r7, #24
 8001a32:	2228      	movs	r2, #40	; 0x28
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 fb68 	bl	800210c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]


  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a66:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a6c:	f107 0318 	add.w	r3, r7, #24
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fe6f 	bl	8000754 <HAL_RCC_OscConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a7c:	f000 f8be 	bl	8001bfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a80:	230f      	movs	r3, #15
 8001a82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a84:	2302      	movs	r3, #2
 8001a86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	2102      	movs	r1, #2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff f8da 	bl	8000c54 <HAL_RCC_ClockConfig>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001aa6:	f000 f8a9 	bl	8001bfc <Error_Handler>
  }
}
 8001aaa:	bf00      	nop
 8001aac:	3740      	adds	r7, #64	; 0x40
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aba:	f107 0310 	add.w	r3, r7, #16
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac8:	4b3b      	ldr	r3, [pc, #236]	; (8001bb8 <MX_GPIO_Init+0x104>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	4a3a      	ldr	r2, [pc, #232]	; (8001bb8 <MX_GPIO_Init+0x104>)
 8001ace:	f043 0310 	orr.w	r3, r3, #16
 8001ad2:	6193      	str	r3, [r2, #24]
 8001ad4:	4b38      	ldr	r3, [pc, #224]	; (8001bb8 <MX_GPIO_Init+0x104>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae0:	4b35      	ldr	r3, [pc, #212]	; (8001bb8 <MX_GPIO_Init+0x104>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a34      	ldr	r2, [pc, #208]	; (8001bb8 <MX_GPIO_Init+0x104>)
 8001ae6:	f043 0320 	orr.w	r3, r3, #32
 8001aea:	6193      	str	r3, [r2, #24]
 8001aec:	4b32      	ldr	r3, [pc, #200]	; (8001bb8 <MX_GPIO_Init+0x104>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f003 0320 	and.w	r3, r3, #32
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	4b2f      	ldr	r3, [pc, #188]	; (8001bb8 <MX_GPIO_Init+0x104>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a2e      	ldr	r2, [pc, #184]	; (8001bb8 <MX_GPIO_Init+0x104>)
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b2c      	ldr	r3, [pc, #176]	; (8001bb8 <MX_GPIO_Init+0x104>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b10:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <MX_GPIO_Init+0x104>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4a28      	ldr	r2, [pc, #160]	; (8001bb8 <MX_GPIO_Init+0x104>)
 8001b16:	f043 0308 	orr.w	r3, r3, #8
 8001b1a:	6193      	str	r3, [r2, #24]
 8001b1c:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <MX_GPIO_Init+0x104>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENA1_LAP_Pin|ENA2_LAP_Pin|ENA3_LAP_Pin|D0_LAP_Pin
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f249 01f0 	movw	r1, #37104	; 0x90f0
 8001b2e:	4823      	ldr	r0, [pc, #140]	; (8001bbc <MX_GPIO_Init+0x108>)
 8001b30:	f7fe fdf8 	bl	8000724 <HAL_GPIO_WritePin>
                          |D4_LCD_Pin|D5_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D1_LAP_Pin|D2_LAP_Pin|D3_LAP_Pin|buzzer_Pin
 8001b34:	2200      	movs	r2, #0
 8001b36:	f24a 411f 	movw	r1, #42015	; 0xa41f
 8001b3a:	4821      	ldr	r0, [pc, #132]	; (8001bc0 <MX_GPIO_Init+0x10c>)
 8001b3c:	f7fe fdf2 	bl	8000724 <HAL_GPIO_WritePin>
                          |RS_LCD_Pin|E_LCD_Pin|D6_LCD_Pin|D7_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button_RESET_Pin Button_StartStop_Pin */
  GPIO_InitStruct.Pin = Button_RESET_Pin|Button_StartStop_Pin;
 8001b40:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4e:	f107 0310 	add.w	r3, r7, #16
 8001b52:	4619      	mov	r1, r3
 8001b54:	481b      	ldr	r0, [pc, #108]	; (8001bc4 <MX_GPIO_Init+0x110>)
 8001b56:	f7fe fc8b 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pins : sens1_Pin sens2_Pin sens3_Pin */
  GPIO_InitStruct.Pin = sens1_Pin|sens2_Pin|sens3_Pin;
 8001b5a:	2307      	movs	r3, #7
 8001b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f107 0310 	add.w	r3, r7, #16
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4813      	ldr	r0, [pc, #76]	; (8001bbc <MX_GPIO_Init+0x108>)
 8001b6e:	f7fe fc7f 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENA1_LAP_Pin ENA2_LAP_Pin ENA3_LAP_Pin D0_LAP_Pin
                           D4_LCD_Pin D5_LCD_Pin */
  GPIO_InitStruct.Pin = ENA1_LAP_Pin|ENA2_LAP_Pin|ENA3_LAP_Pin|D0_LAP_Pin
 8001b72:	f249 03f0 	movw	r3, #37104	; 0x90f0
 8001b76:	613b      	str	r3, [r7, #16]
                          |D4_LCD_Pin|D5_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2302      	movs	r3, #2
 8001b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	f107 0310 	add.w	r3, r7, #16
 8001b88:	4619      	mov	r1, r3
 8001b8a:	480c      	ldr	r0, [pc, #48]	; (8001bbc <MX_GPIO_Init+0x108>)
 8001b8c:	f7fe fc70 	bl	8000470 <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_LAP_Pin D2_LAP_Pin D3_LAP_Pin buzzer_Pin
                           RS_LCD_Pin E_LCD_Pin D6_LCD_Pin D7_LCD_Pin */
  GPIO_InitStruct.Pin = D1_LAP_Pin|D2_LAP_Pin|D3_LAP_Pin|buzzer_Pin
 8001b90:	f24a 431f 	movw	r3, #42015	; 0xa41f
 8001b94:	613b      	str	r3, [r7, #16]
                          |RS_LCD_Pin|E_LCD_Pin|D6_LCD_Pin|D7_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b96:	2301      	movs	r3, #1
 8001b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba2:	f107 0310 	add.w	r3, r7, #16
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_GPIO_Init+0x10c>)
 8001baa:	f7fe fc61 	bl	8000470 <HAL_GPIO_Init>

}
 8001bae:	bf00      	nop
 8001bb0:	3720      	adds	r7, #32
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40010800 	.word	0x40010800
 8001bc0:	40010c00 	.word	0x40010c00
 8001bc4:	40011000 	.word	0x40011000

08001bc8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001bcc:	f7fe fabe 	bl	800014c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001bd0:	f7ff ff2a 	bl	8001a28 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001bd4:	f7ff ff6e 	bl	8001ab4 <MX_GPIO_Init>
	MX_TIM2_Init();
 8001bd8:	f000 f990 	bl	8001efc <MX_TIM2_Init>
	MX_TIM3_Init();
 8001bdc:	f000 f9da 	bl	8001f94 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8001be0:	f000 fa26 	bl	8002030 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	task_init();
 8001be4:	f000 f972 	bl	8001ecc <task_init>
	LCD_init();
 8001be8:	f7ff ff06 	bl	80019f8 <LCD_init>
	Stopwatch_init();
 8001bec:	f000 f8f8 	bl	8001de0 <Stopwatch_init>
	//	LCD_SetCursor(3,1);
	//	LCD_print("BALAPAN MOBIL");
	//	LCD_SetCursor(3,2);
	//	LCD_print("by : FIRMANWM")

	HAL_TIM_Base_Start_IT(&htim2);
 8001bf0:	4801      	ldr	r0, [pc, #4]	; (8001bf8 <main+0x30>)
 8001bf2:	f7ff f9f6 	bl	8000fe2 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <main+0x2e>
 8001bf8:	200000ac 	.word	0x200000ac

08001bfc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <HAL_MspInit+0x5c>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <HAL_MspInit+0x5c>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6193      	str	r3, [r2, #24]
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_MspInit+0x5c>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_MspInit+0x5c>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <HAL_MspInit+0x5c>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c30:	61d3      	str	r3, [r2, #28]
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <HAL_MspInit+0x5c>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_MspInit+0x60>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <HAL_MspInit+0x60>)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40010000 	.word	0x40010000

08001c6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7c:	d114      	bne.n	8001ca8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_TIM_Base_MspInit+0x68>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <HAL_TIM_Base_MspInit+0x68>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	61d3      	str	r3, [r2, #28]
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_TIM_Base_MspInit+0x68>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	201c      	movs	r0, #28
 8001c9c:	f7fe fbb1 	bl	8000402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ca0:	201c      	movs	r0, #28
 8001ca2:	f7fe fbca 	bl	800043a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ca6:	e010      	b.n	8001cca <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <HAL_TIM_Base_MspInit+0x6c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d10b      	bne.n	8001cca <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_TIM_Base_MspInit+0x68>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <HAL_TIM_Base_MspInit+0x68>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	61d3      	str	r3, [r2, #28]
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_TIM_Base_MspInit+0x68>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
}
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40000400 	.word	0x40000400

08001cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0310 	add.w	r3, r7, #16
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <HAL_UART_MspInit+0x8c>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d131      	bne.n	8001d60 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <HAL_UART_MspInit+0x90>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	4a1a      	ldr	r2, [pc, #104]	; (8001d6c <HAL_UART_MspInit+0x90>)
 8001d02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d06:	6193      	str	r3, [r2, #24]
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_UART_MspInit+0x90>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_UART_MspInit+0x90>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <HAL_UART_MspInit+0x90>)
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_UART_MspInit+0x90>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 0310 	add.w	r3, r7, #16
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480b      	ldr	r0, [pc, #44]	; (8001d70 <HAL_UART_MspInit+0x94>)
 8001d42:	f7fe fb95 	bl	8000470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <HAL_UART_MspInit+0x94>)
 8001d5c:	f7fe fb88 	bl	8000470 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d60:	bf00      	nop
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40013800 	.word	0x40013800
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010800 	.word	0x40010800

08001d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <HardFault_Handler+0x4>

08001d86 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <MemManage_Handler+0x4>

08001d8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <BusFault_Handler+0x4>

08001d92 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d96:	e7fe      	b.n	8001d96 <UsageFault_Handler+0x4>

08001d98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc0:	f7fe fa0a 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dcc:	4803      	ldr	r0, [pc, #12]	; (8001ddc <TIM2_IRQHandler+0x14>)
 8001dce:	f7ff f92b 	bl	8001028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  Stopwatch();
 8001dd2:	f000 f81b 	bl	8001e0c <Stopwatch>
  /* USER CODE END TIM2_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200000ac 	.word	0x200000ac

08001de0 <Stopwatch_init>:
uint8_t secondA[6], secondB[6], secondC[6];
uint8_t minuteA[6], minuteB[6], minuteC[6];

_Bool stopwatchEna;

void Stopwatch_init(void){
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
miliSecond=0;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <Stopwatch_init+0x20>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	801a      	strh	r2, [r3, #0]
second=0;
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <Stopwatch_init+0x24>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
minute=0;
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <Stopwatch_init+0x28>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	200000f4 	.word	0x200000f4
 8001e04:	200000f0 	.word	0x200000f0
 8001e08:	200000f1 	.word	0x200000f1

08001e0c <Stopwatch>:

void Stopwatch(void){
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
	if(1){
		miliSecond++;
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <Stopwatch+0x4c>)
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <Stopwatch+0x4c>)
 8001e1a:	801a      	strh	r2, [r3, #0]
		if(miliSecond>99){
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <Stopwatch+0x4c>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	2b63      	cmp	r3, #99	; 0x63
 8001e22:	d915      	bls.n	8001e50 <Stopwatch+0x44>
			miliSecond=0;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <Stopwatch+0x4c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	801a      	strh	r2, [r3, #0]
			second++;
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <Stopwatch+0x50>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <Stopwatch+0x50>)
 8001e34:	701a      	strb	r2, [r3, #0]
			if(second>59){
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <Stopwatch+0x50>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b3b      	cmp	r3, #59	; 0x3b
 8001e3c:	d908      	bls.n	8001e50 <Stopwatch+0x44>
				second=0;
 8001e3e:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <Stopwatch+0x50>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
				minute++;
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <Stopwatch+0x54>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <Stopwatch+0x54>)
 8001e4e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	200000f4 	.word	0x200000f4
 8001e5c:	200000f0 	.word	0x200000f0
 8001e60:	200000f1 	.word	0x200000f1

08001e64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001e68:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <SystemInit+0x5c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a14      	ldr	r2, [pc, #80]	; (8001ec0 <SystemInit+0x5c>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <SystemInit+0x5c>)
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	4911      	ldr	r1, [pc, #68]	; (8001ec0 <SystemInit+0x5c>)
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <SystemInit+0x60>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <SystemInit+0x5c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0e      	ldr	r2, [pc, #56]	; (8001ec0 <SystemInit+0x5c>)
 8001e86:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e8e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <SystemInit+0x5c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <SystemInit+0x5c>)
 8001e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <SystemInit+0x5c>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	4a07      	ldr	r2, [pc, #28]	; (8001ec0 <SystemInit+0x5c>)
 8001ea2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001ea6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <SystemInit+0x5c>)
 8001eaa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001eae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <SystemInit+0x64>)
 8001eb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001eb6:	609a      	str	r2, [r3, #8]
#endif 
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	f8ff0000 	.word	0xf8ff0000
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <task_init>:
unsigned char bouncing2=0xFF;
unsigned char bouncing3=0xFF;
unsigned char bouncing4=0xFF;
unsigned char bouncing5=0xFF;

void task_init(void){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	miliSecond=0;
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <task_init+0x24>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	801a      	strh	r2, [r3, #0]
	second=0;
 8001ed6:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <task_init+0x28>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
	minute=0;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <task_init+0x2c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
	LCD_init();
 8001ee2:	f7ff fd89 	bl	80019f8 <LCD_init>
	Stopwatch_init();
 8001ee6:	f7ff ff7b 	bl	8001de0 <Stopwatch_init>
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200000f4 	.word	0x200000f4
 8001ef4:	200000f0 	.word	0x200000f0
 8001ef8:	200000f1 	.word	0x200000f1

08001efc <MX_TIM2_Init>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f02:	f107 0308 	add.w	r3, r7, #8
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f10:	463b      	mov	r3, r7
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <MX_TIM2_Init+0x94>)
 8001f1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <MX_TIM2_Init+0x94>)
 8001f22:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001f26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f28:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <MX_TIM2_Init+0x94>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8001f2e:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <MX_TIM2_Init+0x94>)
 8001f30:	22c8      	movs	r2, #200	; 0xc8
 8001f32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f34:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <MX_TIM2_Init+0x94>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <MX_TIM2_Init+0x94>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f40:	4813      	ldr	r0, [pc, #76]	; (8001f90 <MX_TIM2_Init+0x94>)
 8001f42:	f7ff f823 	bl	8000f8c <HAL_TIM_Base_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f4c:	f7ff fe56 	bl	8001bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f56:	f107 0308 	add.w	r3, r7, #8
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	480c      	ldr	r0, [pc, #48]	; (8001f90 <MX_TIM2_Init+0x94>)
 8001f5e:	f7ff f96b 	bl	8001238 <HAL_TIM_ConfigClockSource>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001f68:	f7ff fe48 	bl	8001bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f74:	463b      	mov	r3, r7
 8001f76:	4619      	mov	r1, r3
 8001f78:	4805      	ldr	r0, [pc, #20]	; (8001f90 <MX_TIM2_Init+0x94>)
 8001f7a:	f7ff fb39 	bl	80015f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f84:	f7ff fe3a 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f88:	bf00      	nop
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	200000ac 	.word	0x200000ac

08001f94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f9a:	f107 0308 	add.w	r3, r7, #8
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa8:	463b      	mov	r3, r7
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <MX_TIM3_Init+0x94>)
 8001fb2:	4a1e      	ldr	r2, [pc, #120]	; (800202c <MX_TIM3_Init+0x98>)
 8001fb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35999;
 8001fb6:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <MX_TIM3_Init+0x94>)
 8001fb8:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001fbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <MX_TIM3_Init+0x94>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8001fc4:	4b18      	ldr	r3, [pc, #96]	; (8002028 <MX_TIM3_Init+0x94>)
 8001fc6:	22c8      	movs	r2, #200	; 0xc8
 8001fc8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fca:	4b17      	ldr	r3, [pc, #92]	; (8002028 <MX_TIM3_Init+0x94>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd0:	4b15      	ldr	r3, [pc, #84]	; (8002028 <MX_TIM3_Init+0x94>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fd6:	4814      	ldr	r0, [pc, #80]	; (8002028 <MX_TIM3_Init+0x94>)
 8001fd8:	f7fe ffd8 	bl	8000f8c <HAL_TIM_Base_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001fe2:	f7ff fe0b 	bl	8001bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fec:	f107 0308 	add.w	r3, r7, #8
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	480d      	ldr	r0, [pc, #52]	; (8002028 <MX_TIM3_Init+0x94>)
 8001ff4:	f7ff f920 	bl	8001238 <HAL_TIM_ConfigClockSource>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001ffe:	f7ff fdfd 	bl	8001bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002006:	2300      	movs	r3, #0
 8002008:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800200a:	463b      	mov	r3, r7
 800200c:	4619      	mov	r1, r3
 800200e:	4806      	ldr	r0, [pc, #24]	; (8002028 <MX_TIM3_Init+0x94>)
 8002010:	f7ff faee 	bl	80015f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800201a:	f7ff fdef 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2000002c 	.word	0x2000002c
 800202c:	40000400 	.word	0x40000400

08002030 <MX_USART1_UART_Init>:
#include "stm32f1xx_it.h"
#include "main.h"
#include "usart.h"

void MX_USART1_UART_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b090      	sub	sp, #64	; 0x40
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002036:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <MX_USART1_UART_Init+0x44>)
 8002038:	603b      	str	r3, [r7, #0]
  huart1.Init.BaudRate = 115200;
 800203a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800203e:	607b      	str	r3, [r7, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002040:	2300      	movs	r3, #0
 8002042:	60bb      	str	r3, [r7, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800204c:	230c      	movs	r3, #12
 800204e:	617b      	str	r3, [r7, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002058:	463b      	mov	r3, r7
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fb1e 	bl	800169c <HAL_UART_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_USART1_UART_Init+0x3a>
  {
    Error_Handler();
 8002066:	f7ff fdc9 	bl	8001bfc <Error_Handler>
  }
}
 800206a:	bf00      	nop
 800206c:	3740      	adds	r7, #64	; 0x40
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40013800 	.word	0x40013800

08002078 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002078:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800207a:	e003      	b.n	8002084 <LoopCopyDataInit>

0800207c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800207e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002080:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002082:	3104      	adds	r1, #4

08002084 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002084:	480a      	ldr	r0, [pc, #40]	; (80020b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002088:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800208a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800208c:	d3f6      	bcc.n	800207c <CopyDataInit>
  ldr r2, =_sbss
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002090:	e002      	b.n	8002098 <LoopFillZerobss>

08002092 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002092:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002094:	f842 3b04 	str.w	r3, [r2], #4

08002098 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800209a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800209c:	d3f9      	bcc.n	8002092 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800209e:	f7ff fee1 	bl	8001e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020a2:	f000 f80f 	bl	80020c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020a6:	f7ff fd8f 	bl	8001bc8 <main>
  bx lr
 80020aa:	4770      	bx	lr
  ldr r3, =_sidata
 80020ac:	08002168 	.word	0x08002168
  ldr r0, =_sdata
 80020b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80020b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80020b8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80020bc:	200000fc 	.word	0x200000fc

080020c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020c0:	e7fe      	b.n	80020c0 <ADC1_2_IRQHandler>
	...

080020c4 <__libc_init_array>:
 80020c4:	b570      	push	{r4, r5, r6, lr}
 80020c6:	2500      	movs	r5, #0
 80020c8:	4e0c      	ldr	r6, [pc, #48]	; (80020fc <__libc_init_array+0x38>)
 80020ca:	4c0d      	ldr	r4, [pc, #52]	; (8002100 <__libc_init_array+0x3c>)
 80020cc:	1ba4      	subs	r4, r4, r6
 80020ce:	10a4      	asrs	r4, r4, #2
 80020d0:	42a5      	cmp	r5, r4
 80020d2:	d109      	bne.n	80020e8 <__libc_init_array+0x24>
 80020d4:	f000 f822 	bl	800211c <_init>
 80020d8:	2500      	movs	r5, #0
 80020da:	4e0a      	ldr	r6, [pc, #40]	; (8002104 <__libc_init_array+0x40>)
 80020dc:	4c0a      	ldr	r4, [pc, #40]	; (8002108 <__libc_init_array+0x44>)
 80020de:	1ba4      	subs	r4, r4, r6
 80020e0:	10a4      	asrs	r4, r4, #2
 80020e2:	42a5      	cmp	r5, r4
 80020e4:	d105      	bne.n	80020f2 <__libc_init_array+0x2e>
 80020e6:	bd70      	pop	{r4, r5, r6, pc}
 80020e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020ec:	4798      	blx	r3
 80020ee:	3501      	adds	r5, #1
 80020f0:	e7ee      	b.n	80020d0 <__libc_init_array+0xc>
 80020f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020f6:	4798      	blx	r3
 80020f8:	3501      	adds	r5, #1
 80020fa:	e7f2      	b.n	80020e2 <__libc_init_array+0x1e>
 80020fc:	08002160 	.word	0x08002160
 8002100:	08002160 	.word	0x08002160
 8002104:	08002160 	.word	0x08002160
 8002108:	08002164 	.word	0x08002164

0800210c <memset>:
 800210c:	4603      	mov	r3, r0
 800210e:	4402      	add	r2, r0
 8002110:	4293      	cmp	r3, r2
 8002112:	d100      	bne.n	8002116 <memset+0xa>
 8002114:	4770      	bx	lr
 8002116:	f803 1b01 	strb.w	r1, [r3], #1
 800211a:	e7f9      	b.n	8002110 <memset+0x4>

0800211c <_init>:
 800211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800211e:	bf00      	nop
 8002120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002122:	bc08      	pop	{r3}
 8002124:	469e      	mov	lr, r3
 8002126:	4770      	bx	lr

08002128 <_fini>:
 8002128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212a:	bf00      	nop
 800212c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800212e:	bc08      	pop	{r3}
 8002130:	469e      	mov	lr, r3
 8002132:	4770      	bx	lr
