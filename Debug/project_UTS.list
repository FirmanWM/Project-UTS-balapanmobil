
project_UTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003520  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800362c  0800362c  0001362c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b8  080037b8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080037b8  080037b8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037b8  080037b8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037bc  080037bc  000137bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080037c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000078  08003838  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08003838  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d27c  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002122  00000000  00000000  0002d31d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c18  00000000  00000000  0002f440  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  00030058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000151d7  00000000  00000000  00030b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a020  00000000  00000000  00045d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000724c4  00000000  00000000  0004fd3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c2203  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003394  00000000  00000000  000c2280  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003614 	.word	0x08003614

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003614 	.word	0x08003614

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000160:	4b08      	ldr	r3, [pc, #32]	; (8000184 <HAL_Init+0x28>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4a07      	ldr	r2, [pc, #28]	; (8000184 <HAL_Init+0x28>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800016c:	2003      	movs	r0, #3
 800016e:	f000 f923 	bl	80003b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000172:	2000      	movs	r0, #0
 8000174:	f000 f808 	bl	8000188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000178:	f001 feac 	bl	8001ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800017c:	2300      	movs	r3, #0
}
 800017e:	4618      	mov	r0, r3
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40022000 	.word	0x40022000

08000188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000190:	4b12      	ldr	r3, [pc, #72]	; (80001dc <HAL_InitTick+0x54>)
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	4b12      	ldr	r3, [pc, #72]	; (80001e0 <HAL_InitTick+0x58>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	4619      	mov	r1, r3
 800019a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019e:	fbb3 f3f1 	udiv	r3, r3, r1
 80001a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 f93b 	bl	8000422 <HAL_SYSTICK_Config>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d001      	beq.n	80001b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001b2:	2301      	movs	r3, #1
 80001b4:	e00e      	b.n	80001d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2b0f      	cmp	r3, #15
 80001ba:	d80a      	bhi.n	80001d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001bc:	2200      	movs	r2, #0
 80001be:	6879      	ldr	r1, [r7, #4]
 80001c0:	f04f 30ff 	mov.w	r0, #4294967295
 80001c4:	f000 f903 	bl	80003ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001c8:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <HAL_InitTick+0x5c>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	e000      	b.n	80001d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001d2:	2301      	movs	r3, #1
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	20000008 	.word	0x20000008
 80001e0:	20000004 	.word	0x20000004
 80001e4:	20000000 	.word	0x20000000

080001e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <HAL_IncTick+0x1c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b05      	ldr	r3, [pc, #20]	; (8000208 <HAL_IncTick+0x20>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4413      	add	r3, r2
 80001f8:	4a03      	ldr	r2, [pc, #12]	; (8000208 <HAL_IncTick+0x20>)
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	20000004 	.word	0x20000004
 8000208:	200000ac 	.word	0x200000ac

0800020c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  return uwTick;
 8000210:	4b02      	ldr	r3, [pc, #8]	; (800021c <HAL_GetTick+0x10>)
 8000212:	681b      	ldr	r3, [r3, #0]
}
 8000214:	4618      	mov	r0, r3
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	200000ac 	.word	0x200000ac

08000220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f003 0307 	and.w	r3, r3, #7
 800022e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <__NVIC_SetPriorityGrouping+0x44>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000236:	68ba      	ldr	r2, [r7, #8]
 8000238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800023c:	4013      	ands	r3, r2
 800023e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800024c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000252:	4a04      	ldr	r2, [pc, #16]	; (8000264 <__NVIC_SetPriorityGrouping+0x44>)
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	60d3      	str	r3, [r2, #12]
}
 8000258:	bf00      	nop
 800025a:	3714      	adds	r7, #20
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	e000ed00 	.word	0xe000ed00

08000268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <__NVIC_GetPriorityGrouping+0x18>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	0a1b      	lsrs	r3, r3, #8
 8000272:	f003 0307 	and.w	r3, r3, #7
}
 8000276:	4618      	mov	r0, r3
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	e000ed00 	.word	0xe000ed00

08000284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	2b00      	cmp	r3, #0
 8000294:	db0b      	blt.n	80002ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	f003 021f 	and.w	r2, r3, #31
 800029c:	4906      	ldr	r1, [pc, #24]	; (80002b8 <__NVIC_EnableIRQ+0x34>)
 800029e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a2:	095b      	lsrs	r3, r3, #5
 80002a4:	2001      	movs	r0, #1
 80002a6:	fa00 f202 	lsl.w	r2, r0, r2
 80002aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	e000e100 	.word	0xe000e100

080002bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	6039      	str	r1, [r7, #0]
 80002c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	db0a      	blt.n	80002e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	490c      	ldr	r1, [pc, #48]	; (8000308 <__NVIC_SetPriority+0x4c>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e4:	e00a      	b.n	80002fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4908      	ldr	r1, [pc, #32]	; (800030c <__NVIC_SetPriority+0x50>)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	3b04      	subs	r3, #4
 80002f4:	0112      	lsls	r2, r2, #4
 80002f6:	b2d2      	uxtb	r2, r2
 80002f8:	440b      	add	r3, r1
 80002fa:	761a      	strb	r2, [r3, #24]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	e000e100 	.word	0xe000e100
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000310:	b480      	push	{r7}
 8000312:	b089      	sub	sp, #36	; 0x24
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f003 0307 	and.w	r3, r3, #7
 8000322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000324:	69fb      	ldr	r3, [r7, #28]
 8000326:	f1c3 0307 	rsb	r3, r3, #7
 800032a:	2b04      	cmp	r3, #4
 800032c:	bf28      	it	cs
 800032e:	2304      	movcs	r3, #4
 8000330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000332:	69fb      	ldr	r3, [r7, #28]
 8000334:	3304      	adds	r3, #4
 8000336:	2b06      	cmp	r3, #6
 8000338:	d902      	bls.n	8000340 <NVIC_EncodePriority+0x30>
 800033a:	69fb      	ldr	r3, [r7, #28]
 800033c:	3b03      	subs	r3, #3
 800033e:	e000      	b.n	8000342 <NVIC_EncodePriority+0x32>
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000344:	f04f 32ff 	mov.w	r2, #4294967295
 8000348:	69bb      	ldr	r3, [r7, #24]
 800034a:	fa02 f303 	lsl.w	r3, r2, r3
 800034e:	43da      	mvns	r2, r3
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	401a      	ands	r2, r3
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000358:	f04f 31ff 	mov.w	r1, #4294967295
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	fa01 f303 	lsl.w	r3, r1, r3
 8000362:	43d9      	mvns	r1, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000368:	4313      	orrs	r3, r2
         );
}
 800036a:	4618      	mov	r0, r3
 800036c:	3724      	adds	r7, #36	; 0x24
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr

08000374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3b01      	subs	r3, #1
 8000380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000384:	d301      	bcc.n	800038a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000386:	2301      	movs	r3, #1
 8000388:	e00f      	b.n	80003aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <SysTick_Config+0x40>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	3b01      	subs	r3, #1
 8000390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000392:	210f      	movs	r1, #15
 8000394:	f04f 30ff 	mov.w	r0, #4294967295
 8000398:	f7ff ff90 	bl	80002bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <SysTick_Config+0x40>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003a2:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <SysTick_Config+0x40>)
 80003a4:	2207      	movs	r2, #7
 80003a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003a8:	2300      	movs	r3, #0
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	e000e010 	.word	0xe000e010

080003b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f7ff ff2d 	bl	8000220 <__NVIC_SetPriorityGrouping>
}
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b086      	sub	sp, #24
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	4603      	mov	r3, r0
 80003d6:	60b9      	str	r1, [r7, #8]
 80003d8:	607a      	str	r2, [r7, #4]
 80003da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003dc:	2300      	movs	r3, #0
 80003de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003e0:	f7ff ff42 	bl	8000268 <__NVIC_GetPriorityGrouping>
 80003e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	68b9      	ldr	r1, [r7, #8]
 80003ea:	6978      	ldr	r0, [r7, #20]
 80003ec:	f7ff ff90 	bl	8000310 <NVIC_EncodePriority>
 80003f0:	4602      	mov	r2, r0
 80003f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003f6:	4611      	mov	r1, r2
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ff5f 	bl	80002bc <__NVIC_SetPriority>
}
 80003fe:	bf00      	nop
 8000400:	3718      	adds	r7, #24
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b082      	sub	sp, #8
 800040a:	af00      	add	r7, sp, #0
 800040c:	4603      	mov	r3, r0
 800040e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000414:	4618      	mov	r0, r3
 8000416:	f7ff ff35 	bl	8000284 <__NVIC_EnableIRQ>
}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}

08000422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000422:	b580      	push	{r7, lr}
 8000424:	b082      	sub	sp, #8
 8000426:	af00      	add	r7, sp, #0
 8000428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f7ff ffa2 	bl	8000374 <SysTick_Config>
 8000430:	4603      	mov	r3, r0
}
 8000432:	4618      	mov	r0, r3
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
	...

0800043c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800043c:	b480      	push	{r7}
 800043e:	b08b      	sub	sp, #44	; 0x2c
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000446:	2300      	movs	r3, #0
 8000448:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800044a:	2300      	movs	r3, #0
 800044c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800044e:	e127      	b.n	80006a0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000450:	2201      	movs	r2, #1
 8000452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000454:	fa02 f303 	lsl.w	r3, r2, r3
 8000458:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	69fa      	ldr	r2, [r7, #28]
 8000460:	4013      	ands	r3, r2
 8000462:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000464:	69ba      	ldr	r2, [r7, #24]
 8000466:	69fb      	ldr	r3, [r7, #28]
 8000468:	429a      	cmp	r2, r3
 800046a:	f040 8116 	bne.w	800069a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	2b12      	cmp	r3, #18
 8000474:	d034      	beq.n	80004e0 <HAL_GPIO_Init+0xa4>
 8000476:	2b12      	cmp	r3, #18
 8000478:	d80d      	bhi.n	8000496 <HAL_GPIO_Init+0x5a>
 800047a:	2b02      	cmp	r3, #2
 800047c:	d02b      	beq.n	80004d6 <HAL_GPIO_Init+0x9a>
 800047e:	2b02      	cmp	r3, #2
 8000480:	d804      	bhi.n	800048c <HAL_GPIO_Init+0x50>
 8000482:	2b00      	cmp	r3, #0
 8000484:	d031      	beq.n	80004ea <HAL_GPIO_Init+0xae>
 8000486:	2b01      	cmp	r3, #1
 8000488:	d01c      	beq.n	80004c4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800048a:	e048      	b.n	800051e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800048c:	2b03      	cmp	r3, #3
 800048e:	d043      	beq.n	8000518 <HAL_GPIO_Init+0xdc>
 8000490:	2b11      	cmp	r3, #17
 8000492:	d01b      	beq.n	80004cc <HAL_GPIO_Init+0x90>
          break;
 8000494:	e043      	b.n	800051e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000496:	4a89      	ldr	r2, [pc, #548]	; (80006bc <HAL_GPIO_Init+0x280>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d026      	beq.n	80004ea <HAL_GPIO_Init+0xae>
 800049c:	4a87      	ldr	r2, [pc, #540]	; (80006bc <HAL_GPIO_Init+0x280>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d806      	bhi.n	80004b0 <HAL_GPIO_Init+0x74>
 80004a2:	4a87      	ldr	r2, [pc, #540]	; (80006c0 <HAL_GPIO_Init+0x284>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d020      	beq.n	80004ea <HAL_GPIO_Init+0xae>
 80004a8:	4a86      	ldr	r2, [pc, #536]	; (80006c4 <HAL_GPIO_Init+0x288>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d01d      	beq.n	80004ea <HAL_GPIO_Init+0xae>
          break;
 80004ae:	e036      	b.n	800051e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004b0:	4a85      	ldr	r2, [pc, #532]	; (80006c8 <HAL_GPIO_Init+0x28c>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d019      	beq.n	80004ea <HAL_GPIO_Init+0xae>
 80004b6:	4a85      	ldr	r2, [pc, #532]	; (80006cc <HAL_GPIO_Init+0x290>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d016      	beq.n	80004ea <HAL_GPIO_Init+0xae>
 80004bc:	4a84      	ldr	r2, [pc, #528]	; (80006d0 <HAL_GPIO_Init+0x294>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d013      	beq.n	80004ea <HAL_GPIO_Init+0xae>
          break;
 80004c2:	e02c      	b.n	800051e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	623b      	str	r3, [r7, #32]
          break;
 80004ca:	e028      	b.n	800051e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	3304      	adds	r3, #4
 80004d2:	623b      	str	r3, [r7, #32]
          break;
 80004d4:	e023      	b.n	800051e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	68db      	ldr	r3, [r3, #12]
 80004da:	3308      	adds	r3, #8
 80004dc:	623b      	str	r3, [r7, #32]
          break;
 80004de:	e01e      	b.n	800051e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	330c      	adds	r3, #12
 80004e6:	623b      	str	r3, [r7, #32]
          break;
 80004e8:	e019      	b.n	800051e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d102      	bne.n	80004f8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004f2:	2304      	movs	r3, #4
 80004f4:	623b      	str	r3, [r7, #32]
          break;
 80004f6:	e012      	b.n	800051e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d105      	bne.n	800050c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000500:	2308      	movs	r3, #8
 8000502:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	69fa      	ldr	r2, [r7, #28]
 8000508:	611a      	str	r2, [r3, #16]
          break;
 800050a:	e008      	b.n	800051e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800050c:	2308      	movs	r3, #8
 800050e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	69fa      	ldr	r2, [r7, #28]
 8000514:	615a      	str	r2, [r3, #20]
          break;
 8000516:	e002      	b.n	800051e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000518:	2300      	movs	r3, #0
 800051a:	623b      	str	r3, [r7, #32]
          break;
 800051c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800051e:	69bb      	ldr	r3, [r7, #24]
 8000520:	2bff      	cmp	r3, #255	; 0xff
 8000522:	d801      	bhi.n	8000528 <HAL_GPIO_Init+0xec>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	e001      	b.n	800052c <HAL_GPIO_Init+0xf0>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	3304      	adds	r3, #4
 800052c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800052e:	69bb      	ldr	r3, [r7, #24]
 8000530:	2bff      	cmp	r3, #255	; 0xff
 8000532:	d802      	bhi.n	800053a <HAL_GPIO_Init+0xfe>
 8000534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	e002      	b.n	8000540 <HAL_GPIO_Init+0x104>
 800053a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800053c:	3b08      	subs	r3, #8
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	210f      	movs	r1, #15
 8000548:	693b      	ldr	r3, [r7, #16]
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	43db      	mvns	r3, r3
 8000550:	401a      	ands	r2, r3
 8000552:	6a39      	ldr	r1, [r7, #32]
 8000554:	693b      	ldr	r3, [r7, #16]
 8000556:	fa01 f303 	lsl.w	r3, r1, r3
 800055a:	431a      	orrs	r2, r3
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	2b00      	cmp	r3, #0
 800056a:	f000 8096 	beq.w	800069a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800056e:	4b59      	ldr	r3, [pc, #356]	; (80006d4 <HAL_GPIO_Init+0x298>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	4a58      	ldr	r2, [pc, #352]	; (80006d4 <HAL_GPIO_Init+0x298>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6193      	str	r3, [r2, #24]
 800057a:	4b56      	ldr	r3, [pc, #344]	; (80006d4 <HAL_GPIO_Init+0x298>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000586:	4a54      	ldr	r2, [pc, #336]	; (80006d8 <HAL_GPIO_Init+0x29c>)
 8000588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058a:	089b      	lsrs	r3, r3, #2
 800058c:	3302      	adds	r3, #2
 800058e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000592:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000596:	f003 0303 	and.w	r3, r3, #3
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	220f      	movs	r2, #15
 800059e:	fa02 f303 	lsl.w	r3, r2, r3
 80005a2:	43db      	mvns	r3, r3
 80005a4:	68fa      	ldr	r2, [r7, #12]
 80005a6:	4013      	ands	r3, r2
 80005a8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a4b      	ldr	r2, [pc, #300]	; (80006dc <HAL_GPIO_Init+0x2a0>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d013      	beq.n	80005da <HAL_GPIO_Init+0x19e>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a4a      	ldr	r2, [pc, #296]	; (80006e0 <HAL_GPIO_Init+0x2a4>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d00d      	beq.n	80005d6 <HAL_GPIO_Init+0x19a>
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a49      	ldr	r2, [pc, #292]	; (80006e4 <HAL_GPIO_Init+0x2a8>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d007      	beq.n	80005d2 <HAL_GPIO_Init+0x196>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a48      	ldr	r2, [pc, #288]	; (80006e8 <HAL_GPIO_Init+0x2ac>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d101      	bne.n	80005ce <HAL_GPIO_Init+0x192>
 80005ca:	2303      	movs	r3, #3
 80005cc:	e006      	b.n	80005dc <HAL_GPIO_Init+0x1a0>
 80005ce:	2304      	movs	r3, #4
 80005d0:	e004      	b.n	80005dc <HAL_GPIO_Init+0x1a0>
 80005d2:	2302      	movs	r3, #2
 80005d4:	e002      	b.n	80005dc <HAL_GPIO_Init+0x1a0>
 80005d6:	2301      	movs	r3, #1
 80005d8:	e000      	b.n	80005dc <HAL_GPIO_Init+0x1a0>
 80005da:	2300      	movs	r3, #0
 80005dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005de:	f002 0203 	and.w	r2, r2, #3
 80005e2:	0092      	lsls	r2, r2, #2
 80005e4:	4093      	lsls	r3, r2
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	4313      	orrs	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80005ec:	493a      	ldr	r1, [pc, #232]	; (80006d8 <HAL_GPIO_Init+0x29c>)
 80005ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f0:	089b      	lsrs	r3, r3, #2
 80005f2:	3302      	adds	r3, #2
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000602:	2b00      	cmp	r3, #0
 8000604:	d006      	beq.n	8000614 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000606:	4b39      	ldr	r3, [pc, #228]	; (80006ec <HAL_GPIO_Init+0x2b0>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4938      	ldr	r1, [pc, #224]	; (80006ec <HAL_GPIO_Init+0x2b0>)
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	4313      	orrs	r3, r2
 8000610:	600b      	str	r3, [r1, #0]
 8000612:	e006      	b.n	8000622 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000614:	4b35      	ldr	r3, [pc, #212]	; (80006ec <HAL_GPIO_Init+0x2b0>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	69bb      	ldr	r3, [r7, #24]
 800061a:	43db      	mvns	r3, r3
 800061c:	4933      	ldr	r1, [pc, #204]	; (80006ec <HAL_GPIO_Init+0x2b0>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800062a:	2b00      	cmp	r3, #0
 800062c:	d006      	beq.n	800063c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800062e:	4b2f      	ldr	r3, [pc, #188]	; (80006ec <HAL_GPIO_Init+0x2b0>)
 8000630:	685a      	ldr	r2, [r3, #4]
 8000632:	492e      	ldr	r1, [pc, #184]	; (80006ec <HAL_GPIO_Init+0x2b0>)
 8000634:	69bb      	ldr	r3, [r7, #24]
 8000636:	4313      	orrs	r3, r2
 8000638:	604b      	str	r3, [r1, #4]
 800063a:	e006      	b.n	800064a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800063c:	4b2b      	ldr	r3, [pc, #172]	; (80006ec <HAL_GPIO_Init+0x2b0>)
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	43db      	mvns	r3, r3
 8000644:	4929      	ldr	r1, [pc, #164]	; (80006ec <HAL_GPIO_Init+0x2b0>)
 8000646:	4013      	ands	r3, r2
 8000648:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000652:	2b00      	cmp	r3, #0
 8000654:	d006      	beq.n	8000664 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000656:	4b25      	ldr	r3, [pc, #148]	; (80006ec <HAL_GPIO_Init+0x2b0>)
 8000658:	689a      	ldr	r2, [r3, #8]
 800065a:	4924      	ldr	r1, [pc, #144]	; (80006ec <HAL_GPIO_Init+0x2b0>)
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	4313      	orrs	r3, r2
 8000660:	608b      	str	r3, [r1, #8]
 8000662:	e006      	b.n	8000672 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000664:	4b21      	ldr	r3, [pc, #132]	; (80006ec <HAL_GPIO_Init+0x2b0>)
 8000666:	689a      	ldr	r2, [r3, #8]
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	43db      	mvns	r3, r3
 800066c:	491f      	ldr	r1, [pc, #124]	; (80006ec <HAL_GPIO_Init+0x2b0>)
 800066e:	4013      	ands	r3, r2
 8000670:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800067a:	2b00      	cmp	r3, #0
 800067c:	d006      	beq.n	800068c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <HAL_GPIO_Init+0x2b0>)
 8000680:	68da      	ldr	r2, [r3, #12]
 8000682:	491a      	ldr	r1, [pc, #104]	; (80006ec <HAL_GPIO_Init+0x2b0>)
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	4313      	orrs	r3, r2
 8000688:	60cb      	str	r3, [r1, #12]
 800068a:	e006      	b.n	800069a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <HAL_GPIO_Init+0x2b0>)
 800068e:	68da      	ldr	r2, [r3, #12]
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	43db      	mvns	r3, r3
 8000694:	4915      	ldr	r1, [pc, #84]	; (80006ec <HAL_GPIO_Init+0x2b0>)
 8000696:	4013      	ands	r3, r2
 8000698:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	3301      	adds	r3, #1
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a6:	fa22 f303 	lsr.w	r3, r2, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	f47f aed0 	bne.w	8000450 <HAL_GPIO_Init+0x14>
  }
}
 80006b0:	bf00      	nop
 80006b2:	372c      	adds	r7, #44	; 0x2c
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	10210000 	.word	0x10210000
 80006c0:	10110000 	.word	0x10110000
 80006c4:	10120000 	.word	0x10120000
 80006c8:	10310000 	.word	0x10310000
 80006cc:	10320000 	.word	0x10320000
 80006d0:	10220000 	.word	0x10220000
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40010000 	.word	0x40010000
 80006dc:	40010800 	.word	0x40010800
 80006e0:	40010c00 	.word	0x40010c00
 80006e4:	40011000 	.word	0x40011000
 80006e8:	40011400 	.word	0x40011400
 80006ec:	40010400 	.word	0x40010400

080006f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	689a      	ldr	r2, [r3, #8]
 8000700:	887b      	ldrh	r3, [r7, #2]
 8000702:	4013      	ands	r3, r2
 8000704:	2b00      	cmp	r3, #0
 8000706:	d002      	beq.n	800070e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000708:	2301      	movs	r3, #1
 800070a:	73fb      	strb	r3, [r7, #15]
 800070c:	e001      	b.n	8000712 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800070e:	2300      	movs	r3, #0
 8000710:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr

0800071e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800071e:	b480      	push	{r7}
 8000720:	b083      	sub	sp, #12
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
 8000726:	460b      	mov	r3, r1
 8000728:	807b      	strh	r3, [r7, #2]
 800072a:	4613      	mov	r3, r2
 800072c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800072e:	787b      	ldrb	r3, [r7, #1]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d003      	beq.n	800073c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000734:	887a      	ldrh	r2, [r7, #2]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800073a:	e003      	b.n	8000744 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800073c:	887b      	ldrh	r3, [r7, #2]
 800073e:	041a      	lsls	r2, r3, #16
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	611a      	str	r2, [r3, #16]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
	...

08000750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d101      	bne.n	8000762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
 8000760:	e26c      	b.n	8000c3c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	2b00      	cmp	r3, #0
 800076c:	f000 8087 	beq.w	800087e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000770:	4b92      	ldr	r3, [pc, #584]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	f003 030c 	and.w	r3, r3, #12
 8000778:	2b04      	cmp	r3, #4
 800077a:	d00c      	beq.n	8000796 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800077c:	4b8f      	ldr	r3, [pc, #572]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	f003 030c 	and.w	r3, r3, #12
 8000784:	2b08      	cmp	r3, #8
 8000786:	d112      	bne.n	80007ae <HAL_RCC_OscConfig+0x5e>
 8000788:	4b8c      	ldr	r3, [pc, #560]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000794:	d10b      	bne.n	80007ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000796:	4b89      	ldr	r3, [pc, #548]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d06c      	beq.n	800087c <HAL_RCC_OscConfig+0x12c>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d168      	bne.n	800087c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	e246      	b.n	8000c3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007b6:	d106      	bne.n	80007c6 <HAL_RCC_OscConfig+0x76>
 80007b8:	4b80      	ldr	r3, [pc, #512]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a7f      	ldr	r2, [pc, #508]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 80007be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	e02e      	b.n	8000824 <HAL_RCC_OscConfig+0xd4>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d10c      	bne.n	80007e8 <HAL_RCC_OscConfig+0x98>
 80007ce:	4b7b      	ldr	r3, [pc, #492]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a7a      	ldr	r2, [pc, #488]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 80007d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007d8:	6013      	str	r3, [r2, #0]
 80007da:	4b78      	ldr	r3, [pc, #480]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a77      	ldr	r2, [pc, #476]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 80007e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007e4:	6013      	str	r3, [r2, #0]
 80007e6:	e01d      	b.n	8000824 <HAL_RCC_OscConfig+0xd4>
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007f0:	d10c      	bne.n	800080c <HAL_RCC_OscConfig+0xbc>
 80007f2:	4b72      	ldr	r3, [pc, #456]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a71      	ldr	r2, [pc, #452]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 80007f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007fc:	6013      	str	r3, [r2, #0]
 80007fe:	4b6f      	ldr	r3, [pc, #444]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a6e      	ldr	r2, [pc, #440]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 8000804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000808:	6013      	str	r3, [r2, #0]
 800080a:	e00b      	b.n	8000824 <HAL_RCC_OscConfig+0xd4>
 800080c:	4b6b      	ldr	r3, [pc, #428]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a6a      	ldr	r2, [pc, #424]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 8000812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	4b68      	ldr	r3, [pc, #416]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a67      	ldr	r2, [pc, #412]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 800081e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000822:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d013      	beq.n	8000854 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800082c:	f7ff fcee 	bl	800020c <HAL_GetTick>
 8000830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000832:	e008      	b.n	8000846 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000834:	f7ff fcea 	bl	800020c <HAL_GetTick>
 8000838:	4602      	mov	r2, r0
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	2b64      	cmp	r3, #100	; 0x64
 8000840:	d901      	bls.n	8000846 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000842:	2303      	movs	r3, #3
 8000844:	e1fa      	b.n	8000c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000846:	4b5d      	ldr	r3, [pc, #372]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800084e:	2b00      	cmp	r3, #0
 8000850:	d0f0      	beq.n	8000834 <HAL_RCC_OscConfig+0xe4>
 8000852:	e014      	b.n	800087e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000854:	f7ff fcda 	bl	800020c <HAL_GetTick>
 8000858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800085a:	e008      	b.n	800086e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800085c:	f7ff fcd6 	bl	800020c <HAL_GetTick>
 8000860:	4602      	mov	r2, r0
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	2b64      	cmp	r3, #100	; 0x64
 8000868:	d901      	bls.n	800086e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800086a:	2303      	movs	r3, #3
 800086c:	e1e6      	b.n	8000c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800086e:	4b53      	ldr	r3, [pc, #332]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000876:	2b00      	cmp	r3, #0
 8000878:	d1f0      	bne.n	800085c <HAL_RCC_OscConfig+0x10c>
 800087a:	e000      	b.n	800087e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800087c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	2b00      	cmp	r3, #0
 8000888:	d063      	beq.n	8000952 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800088a:	4b4c      	ldr	r3, [pc, #304]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	f003 030c 	and.w	r3, r3, #12
 8000892:	2b00      	cmp	r3, #0
 8000894:	d00b      	beq.n	80008ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000896:	4b49      	ldr	r3, [pc, #292]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	f003 030c 	and.w	r3, r3, #12
 800089e:	2b08      	cmp	r3, #8
 80008a0:	d11c      	bne.n	80008dc <HAL_RCC_OscConfig+0x18c>
 80008a2:	4b46      	ldr	r3, [pc, #280]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d116      	bne.n	80008dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008ae:	4b43      	ldr	r3, [pc, #268]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d005      	beq.n	80008c6 <HAL_RCC_OscConfig+0x176>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	691b      	ldr	r3, [r3, #16]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d001      	beq.n	80008c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	e1ba      	b.n	8000c3c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008c6:	4b3d      	ldr	r3, [pc, #244]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	4939      	ldr	r1, [pc, #228]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 80008d6:	4313      	orrs	r3, r2
 80008d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008da:	e03a      	b.n	8000952 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	691b      	ldr	r3, [r3, #16]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d020      	beq.n	8000926 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008e4:	4b36      	ldr	r3, [pc, #216]	; (80009c0 <HAL_RCC_OscConfig+0x270>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008ea:	f7ff fc8f 	bl	800020c <HAL_GetTick>
 80008ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f0:	e008      	b.n	8000904 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008f2:	f7ff fc8b 	bl	800020c <HAL_GetTick>
 80008f6:	4602      	mov	r2, r0
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d901      	bls.n	8000904 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000900:	2303      	movs	r3, #3
 8000902:	e19b      	b.n	8000c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000904:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f003 0302 	and.w	r3, r3, #2
 800090c:	2b00      	cmp	r3, #0
 800090e:	d0f0      	beq.n	80008f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000910:	4b2a      	ldr	r3, [pc, #168]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	695b      	ldr	r3, [r3, #20]
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	4927      	ldr	r1, [pc, #156]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 8000920:	4313      	orrs	r3, r2
 8000922:	600b      	str	r3, [r1, #0]
 8000924:	e015      	b.n	8000952 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000926:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <HAL_RCC_OscConfig+0x270>)
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800092c:	f7ff fc6e 	bl	800020c <HAL_GetTick>
 8000930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000932:	e008      	b.n	8000946 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000934:	f7ff fc6a 	bl	800020c <HAL_GetTick>
 8000938:	4602      	mov	r2, r0
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	2b02      	cmp	r3, #2
 8000940:	d901      	bls.n	8000946 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000942:	2303      	movs	r3, #3
 8000944:	e17a      	b.n	8000c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	2b00      	cmp	r3, #0
 8000950:	d1f0      	bne.n	8000934 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	2b00      	cmp	r3, #0
 800095c:	d03a      	beq.n	80009d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d019      	beq.n	800099a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_RCC_OscConfig+0x274>)
 8000968:	2201      	movs	r2, #1
 800096a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800096c:	f7ff fc4e 	bl	800020c <HAL_GetTick>
 8000970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000972:	e008      	b.n	8000986 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000974:	f7ff fc4a 	bl	800020c <HAL_GetTick>
 8000978:	4602      	mov	r2, r0
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	2b02      	cmp	r3, #2
 8000980:	d901      	bls.n	8000986 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000982:	2303      	movs	r3, #3
 8000984:	e15a      	b.n	8000c3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <HAL_RCC_OscConfig+0x26c>)
 8000988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	2b00      	cmp	r3, #0
 8000990:	d0f0      	beq.n	8000974 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000992:	2001      	movs	r0, #1
 8000994:	f000 fada 	bl	8000f4c <RCC_Delay>
 8000998:	e01c      	b.n	80009d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <HAL_RCC_OscConfig+0x274>)
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009a0:	f7ff fc34 	bl	800020c <HAL_GetTick>
 80009a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009a6:	e00f      	b.n	80009c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009a8:	f7ff fc30 	bl	800020c <HAL_GetTick>
 80009ac:	4602      	mov	r2, r0
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d908      	bls.n	80009c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80009b6:	2303      	movs	r3, #3
 80009b8:	e140      	b.n	8000c3c <HAL_RCC_OscConfig+0x4ec>
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000
 80009c0:	42420000 	.word	0x42420000
 80009c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009c8:	4b9e      	ldr	r3, [pc, #632]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 80009ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009cc:	f003 0302 	and.w	r3, r3, #2
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1e9      	bne.n	80009a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f003 0304 	and.w	r3, r3, #4
 80009dc:	2b00      	cmp	r3, #0
 80009de:	f000 80a6 	beq.w	8000b2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009e2:	2300      	movs	r3, #0
 80009e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009e6:	4b97      	ldr	r3, [pc, #604]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d10d      	bne.n	8000a0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	4b94      	ldr	r3, [pc, #592]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	4a93      	ldr	r2, [pc, #588]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fc:	61d3      	str	r3, [r2, #28]
 80009fe:	4b91      	ldr	r3, [pc, #580]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a0e:	4b8e      	ldr	r3, [pc, #568]	; (8000c48 <HAL_RCC_OscConfig+0x4f8>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d118      	bne.n	8000a4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a1a:	4b8b      	ldr	r3, [pc, #556]	; (8000c48 <HAL_RCC_OscConfig+0x4f8>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a8a      	ldr	r2, [pc, #552]	; (8000c48 <HAL_RCC_OscConfig+0x4f8>)
 8000a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a26:	f7ff fbf1 	bl	800020c <HAL_GetTick>
 8000a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a2c:	e008      	b.n	8000a40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a2e:	f7ff fbed 	bl	800020c <HAL_GetTick>
 8000a32:	4602      	mov	r2, r0
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	2b64      	cmp	r3, #100	; 0x64
 8000a3a:	d901      	bls.n	8000a40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	e0fd      	b.n	8000c3c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a40:	4b81      	ldr	r3, [pc, #516]	; (8000c48 <HAL_RCC_OscConfig+0x4f8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d0f0      	beq.n	8000a2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d106      	bne.n	8000a62 <HAL_RCC_OscConfig+0x312>
 8000a54:	4b7b      	ldr	r3, [pc, #492]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000a56:	6a1b      	ldr	r3, [r3, #32]
 8000a58:	4a7a      	ldr	r2, [pc, #488]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	6213      	str	r3, [r2, #32]
 8000a60:	e02d      	b.n	8000abe <HAL_RCC_OscConfig+0x36e>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d10c      	bne.n	8000a84 <HAL_RCC_OscConfig+0x334>
 8000a6a:	4b76      	ldr	r3, [pc, #472]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000a6c:	6a1b      	ldr	r3, [r3, #32]
 8000a6e:	4a75      	ldr	r2, [pc, #468]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000a70:	f023 0301 	bic.w	r3, r3, #1
 8000a74:	6213      	str	r3, [r2, #32]
 8000a76:	4b73      	ldr	r3, [pc, #460]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000a78:	6a1b      	ldr	r3, [r3, #32]
 8000a7a:	4a72      	ldr	r2, [pc, #456]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000a7c:	f023 0304 	bic.w	r3, r3, #4
 8000a80:	6213      	str	r3, [r2, #32]
 8000a82:	e01c      	b.n	8000abe <HAL_RCC_OscConfig+0x36e>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	2b05      	cmp	r3, #5
 8000a8a:	d10c      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x356>
 8000a8c:	4b6d      	ldr	r3, [pc, #436]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000a8e:	6a1b      	ldr	r3, [r3, #32]
 8000a90:	4a6c      	ldr	r2, [pc, #432]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000a92:	f043 0304 	orr.w	r3, r3, #4
 8000a96:	6213      	str	r3, [r2, #32]
 8000a98:	4b6a      	ldr	r3, [pc, #424]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000a9a:	6a1b      	ldr	r3, [r3, #32]
 8000a9c:	4a69      	ldr	r2, [pc, #420]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	6213      	str	r3, [r2, #32]
 8000aa4:	e00b      	b.n	8000abe <HAL_RCC_OscConfig+0x36e>
 8000aa6:	4b67      	ldr	r3, [pc, #412]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000aa8:	6a1b      	ldr	r3, [r3, #32]
 8000aaa:	4a66      	ldr	r2, [pc, #408]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000aac:	f023 0301 	bic.w	r3, r3, #1
 8000ab0:	6213      	str	r3, [r2, #32]
 8000ab2:	4b64      	ldr	r3, [pc, #400]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000ab4:	6a1b      	ldr	r3, [r3, #32]
 8000ab6:	4a63      	ldr	r2, [pc, #396]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000ab8:	f023 0304 	bic.w	r3, r3, #4
 8000abc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d015      	beq.n	8000af2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ac6:	f7ff fba1 	bl	800020c <HAL_GetTick>
 8000aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000acc:	e00a      	b.n	8000ae4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ace:	f7ff fb9d 	bl	800020c <HAL_GetTick>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d901      	bls.n	8000ae4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	e0ab      	b.n	8000c3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ae4:	4b57      	ldr	r3, [pc, #348]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000ae6:	6a1b      	ldr	r3, [r3, #32]
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d0ee      	beq.n	8000ace <HAL_RCC_OscConfig+0x37e>
 8000af0:	e014      	b.n	8000b1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000af2:	f7ff fb8b 	bl	800020c <HAL_GetTick>
 8000af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000af8:	e00a      	b.n	8000b10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000afa:	f7ff fb87 	bl	800020c <HAL_GetTick>
 8000afe:	4602      	mov	r2, r0
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d901      	bls.n	8000b10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	e095      	b.n	8000c3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b10:	4b4c      	ldr	r3, [pc, #304]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000b12:	6a1b      	ldr	r3, [r3, #32]
 8000b14:	f003 0302 	and.w	r3, r3, #2
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1ee      	bne.n	8000afa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b1c:	7dfb      	ldrb	r3, [r7, #23]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d105      	bne.n	8000b2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b22:	4b48      	ldr	r3, [pc, #288]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	4a47      	ldr	r2, [pc, #284]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f000 8081 	beq.w	8000c3a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b38:	4b42      	ldr	r3, [pc, #264]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f003 030c 	and.w	r3, r3, #12
 8000b40:	2b08      	cmp	r3, #8
 8000b42:	d061      	beq.n	8000c08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	69db      	ldr	r3, [r3, #28]
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d146      	bne.n	8000bda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b4c:	4b3f      	ldr	r3, [pc, #252]	; (8000c4c <HAL_RCC_OscConfig+0x4fc>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b52:	f7ff fb5b 	bl	800020c <HAL_GetTick>
 8000b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b58:	e008      	b.n	8000b6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b5a:	f7ff fb57 	bl	800020c <HAL_GetTick>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d901      	bls.n	8000b6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	e067      	b.n	8000c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b6c:	4b35      	ldr	r3, [pc, #212]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1f0      	bne.n	8000b5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6a1b      	ldr	r3, [r3, #32]
 8000b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b80:	d108      	bne.n	8000b94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b82:	4b30      	ldr	r3, [pc, #192]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	492d      	ldr	r1, [pc, #180]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000b90:	4313      	orrs	r3, r2
 8000b92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b94:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6a19      	ldr	r1, [r3, #32]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba4:	430b      	orrs	r3, r1
 8000ba6:	4927      	ldr	r1, [pc, #156]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000bac:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <HAL_RCC_OscConfig+0x4fc>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb2:	f7ff fb2b 	bl	800020c <HAL_GetTick>
 8000bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bb8:	e008      	b.n	8000bcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bba:	f7ff fb27 	bl	800020c <HAL_GetTick>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d901      	bls.n	8000bcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	e037      	b.n	8000c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d0f0      	beq.n	8000bba <HAL_RCC_OscConfig+0x46a>
 8000bd8:	e02f      	b.n	8000c3a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <HAL_RCC_OscConfig+0x4fc>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be0:	f7ff fb14 	bl	800020c <HAL_GetTick>
 8000be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000be6:	e008      	b.n	8000bfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000be8:	f7ff fb10 	bl	800020c <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d901      	bls.n	8000bfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e020      	b.n	8000c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1f0      	bne.n	8000be8 <HAL_RCC_OscConfig+0x498>
 8000c06:	e018      	b.n	8000c3a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	69db      	ldr	r3, [r3, #28]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d101      	bne.n	8000c14 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	e013      	b.n	8000c3c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <HAL_RCC_OscConfig+0x4f4>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a1b      	ldr	r3, [r3, #32]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d106      	bne.n	8000c36 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d001      	beq.n	8000c3a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e000      	b.n	8000c3c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40007000 	.word	0x40007000
 8000c4c:	42420060 	.word	0x42420060

08000c50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d101      	bne.n	8000c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e0d0      	b.n	8000e06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c64:	4b6a      	ldr	r3, [pc, #424]	; (8000e10 <HAL_RCC_ClockConfig+0x1c0>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f003 0307 	and.w	r3, r3, #7
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d910      	bls.n	8000c94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c72:	4b67      	ldr	r3, [pc, #412]	; (8000e10 <HAL_RCC_ClockConfig+0x1c0>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f023 0207 	bic.w	r2, r3, #7
 8000c7a:	4965      	ldr	r1, [pc, #404]	; (8000e10 <HAL_RCC_ClockConfig+0x1c0>)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c82:	4b63      	ldr	r3, [pc, #396]	; (8000e10 <HAL_RCC_ClockConfig+0x1c0>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	683a      	ldr	r2, [r7, #0]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d001      	beq.n	8000c94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	e0b8      	b.n	8000e06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d020      	beq.n	8000ce2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d005      	beq.n	8000cb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cac:	4b59      	ldr	r3, [pc, #356]	; (8000e14 <HAL_RCC_ClockConfig+0x1c4>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	4a58      	ldr	r2, [pc, #352]	; (8000e14 <HAL_RCC_ClockConfig+0x1c4>)
 8000cb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000cb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0308 	and.w	r3, r3, #8
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d005      	beq.n	8000cd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cc4:	4b53      	ldr	r3, [pc, #332]	; (8000e14 <HAL_RCC_ClockConfig+0x1c4>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	4a52      	ldr	r2, [pc, #328]	; (8000e14 <HAL_RCC_ClockConfig+0x1c4>)
 8000cca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000cce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cd0:	4b50      	ldr	r3, [pc, #320]	; (8000e14 <HAL_RCC_ClockConfig+0x1c4>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	494d      	ldr	r1, [pc, #308]	; (8000e14 <HAL_RCC_ClockConfig+0x1c4>)
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d040      	beq.n	8000d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d107      	bne.n	8000d06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf6:	4b47      	ldr	r3, [pc, #284]	; (8000e14 <HAL_RCC_ClockConfig+0x1c4>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d115      	bne.n	8000d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e07f      	b.n	8000e06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d107      	bne.n	8000d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d0e:	4b41      	ldr	r3, [pc, #260]	; (8000e14 <HAL_RCC_ClockConfig+0x1c4>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d109      	bne.n	8000d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e073      	b.n	8000e06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1e:	4b3d      	ldr	r3, [pc, #244]	; (8000e14 <HAL_RCC_ClockConfig+0x1c4>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d101      	bne.n	8000d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e06b      	b.n	8000e06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d2e:	4b39      	ldr	r3, [pc, #228]	; (8000e14 <HAL_RCC_ClockConfig+0x1c4>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f023 0203 	bic.w	r2, r3, #3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	4936      	ldr	r1, [pc, #216]	; (8000e14 <HAL_RCC_ClockConfig+0x1c4>)
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d40:	f7ff fa64 	bl	800020c <HAL_GetTick>
 8000d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d46:	e00a      	b.n	8000d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d48:	f7ff fa60 	bl	800020c <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d901      	bls.n	8000d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e053      	b.n	8000e06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d5e:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <HAL_RCC_ClockConfig+0x1c4>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 020c 	and.w	r2, r3, #12
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d1eb      	bne.n	8000d48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d70:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <HAL_RCC_ClockConfig+0x1c0>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0307 	and.w	r3, r3, #7
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d210      	bcs.n	8000da0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d7e:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <HAL_RCC_ClockConfig+0x1c0>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f023 0207 	bic.w	r2, r3, #7
 8000d86:	4922      	ldr	r1, [pc, #136]	; (8000e10 <HAL_RCC_ClockConfig+0x1c0>)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d8e:	4b20      	ldr	r3, [pc, #128]	; (8000e10 <HAL_RCC_ClockConfig+0x1c0>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	683a      	ldr	r2, [r7, #0]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d001      	beq.n	8000da0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e032      	b.n	8000e06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 0304 	and.w	r3, r3, #4
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d008      	beq.n	8000dbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dac:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <HAL_RCC_ClockConfig+0x1c4>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	4916      	ldr	r1, [pc, #88]	; (8000e14 <HAL_RCC_ClockConfig+0x1c4>)
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0308 	and.w	r3, r3, #8
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d009      	beq.n	8000dde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_RCC_ClockConfig+0x1c4>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	490e      	ldr	r1, [pc, #56]	; (8000e14 <HAL_RCC_ClockConfig+0x1c4>)
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000dde:	f000 f821 	bl	8000e24 <HAL_RCC_GetSysClockFreq>
 8000de2:	4601      	mov	r1, r0
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_RCC_ClockConfig+0x1c4>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	091b      	lsrs	r3, r3, #4
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <HAL_RCC_ClockConfig+0x1c8>)
 8000df0:	5cd3      	ldrb	r3, [r2, r3]
 8000df2:	fa21 f303 	lsr.w	r3, r1, r3
 8000df6:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <HAL_RCC_ClockConfig+0x1cc>)
 8000df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <HAL_RCC_ClockConfig+0x1d0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff f9c2 	bl	8000188 <HAL_InitTick>

  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40022000 	.word	0x40022000
 8000e14:	40021000 	.word	0x40021000
 8000e18:	0800376c 	.word	0x0800376c
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20000000 	.word	0x20000000

08000e24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e24:	b490      	push	{r4, r7}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e2c:	1d3c      	adds	r4, r7, #4
 8000e2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e34:	4b28      	ldr	r3, [pc, #160]	; (8000ed8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e4e:	4b23      	ldr	r3, [pc, #140]	; (8000edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f003 030c 	and.w	r3, r3, #12
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	d002      	beq.n	8000e64 <HAL_RCC_GetSysClockFreq+0x40>
 8000e5e:	2b08      	cmp	r3, #8
 8000e60:	d003      	beq.n	8000e6a <HAL_RCC_GetSysClockFreq+0x46>
 8000e62:	e02d      	b.n	8000ec0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e66:	623b      	str	r3, [r7, #32]
      break;
 8000e68:	e02d      	b.n	8000ec6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	0c9b      	lsrs	r3, r3, #18
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e76:	4413      	add	r3, r2
 8000e78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d013      	beq.n	8000eb0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	0c5b      	lsrs	r3, r3, #17
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e96:	4413      	add	r3, r2
 8000e98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000e9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ea2:	fb02 f203 	mul.w	r2, r2, r3
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
 8000eae:	e004      	b.n	8000eba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	4a0c      	ldr	r2, [pc, #48]	; (8000ee4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000eb4:	fb02 f303 	mul.w	r3, r2, r3
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	623b      	str	r3, [r7, #32]
      break;
 8000ebe:	e002      	b.n	8000ec6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ec2:	623b      	str	r3, [r7, #32]
      break;
 8000ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000ec6:	6a3b      	ldr	r3, [r7, #32]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3728      	adds	r7, #40	; 0x28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc90      	pop	{r4, r7}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	0800362c 	.word	0x0800362c
 8000ed8:	0800363c 	.word	0x0800363c
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	007a1200 	.word	0x007a1200
 8000ee4:	003d0900 	.word	0x003d0900

08000ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000eec:	4b02      	ldr	r3, [pc, #8]	; (8000ef8 <HAL_RCC_GetHCLKFreq+0x10>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	20000008 	.word	0x20000008

08000efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f00:	f7ff fff2 	bl	8000ee8 <HAL_RCC_GetHCLKFreq>
 8000f04:	4601      	mov	r1, r0
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	0a1b      	lsrs	r3, r3, #8
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	4a03      	ldr	r2, [pc, #12]	; (8000f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f12:	5cd3      	ldrb	r3, [r2, r3]
 8000f14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	0800377c 	.word	0x0800377c

08000f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f28:	f7ff ffde 	bl	8000ee8 <HAL_RCC_GetHCLKFreq>
 8000f2c:	4601      	mov	r1, r0
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	0adb      	lsrs	r3, r3, #11
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	4a03      	ldr	r2, [pc, #12]	; (8000f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f3a:	5cd3      	ldrb	r3, [r2, r3]
 8000f3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40021000 	.word	0x40021000
 8000f48:	0800377c 	.word	0x0800377c

08000f4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f54:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <RCC_Delay+0x34>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <RCC_Delay+0x38>)
 8000f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5e:	0a5b      	lsrs	r3, r3, #9
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	fb02 f303 	mul.w	r3, r2, r3
 8000f66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f68:	bf00      	nop
  }
  while (Delay --);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	1e5a      	subs	r2, r3, #1
 8000f6e:	60fa      	str	r2, [r7, #12]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1f9      	bne.n	8000f68 <RCC_Delay+0x1c>
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	10624dd3 	.word	0x10624dd3

08000f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e01d      	b.n	8000fd6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d106      	bne.n	8000fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 ffc2 	bl	8001f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3304      	adds	r3, #4
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	f000 fa18 	bl	80013fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b085      	sub	sp, #20
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f042 0201 	orr.w	r2, r2, #1
 8000ff4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2b06      	cmp	r3, #6
 8001006:	d007      	beq.n	8001018 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f042 0201 	orr.w	r2, r2, #1
 8001016:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b02      	cmp	r3, #2
 8001038:	d122      	bne.n	8001080 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b02      	cmp	r3, #2
 8001046:	d11b      	bne.n	8001080 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f06f 0202 	mvn.w	r2, #2
 8001050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2201      	movs	r2, #1
 8001056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f9ad 	bl	80013c6 <HAL_TIM_IC_CaptureCallback>
 800106c:	e005      	b.n	800107a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f9a0 	bl	80013b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 f9af 	bl	80013d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	2b04      	cmp	r3, #4
 800108c:	d122      	bne.n	80010d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	2b04      	cmp	r3, #4
 800109a:	d11b      	bne.n	80010d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f06f 0204 	mvn.w	r2, #4
 80010a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2202      	movs	r2, #2
 80010aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f983 	bl	80013c6 <HAL_TIM_IC_CaptureCallback>
 80010c0:	e005      	b.n	80010ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f976 	bl	80013b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f985 	bl	80013d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	f003 0308 	and.w	r3, r3, #8
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d122      	bne.n	8001128 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	2b08      	cmp	r3, #8
 80010ee:	d11b      	bne.n	8001128 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f06f 0208 	mvn.w	r2, #8
 80010f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2204      	movs	r2, #4
 80010fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f959 	bl	80013c6 <HAL_TIM_IC_CaptureCallback>
 8001114:	e005      	b.n	8001122 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f94c 	bl	80013b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 f95b 	bl	80013d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	f003 0310 	and.w	r3, r3, #16
 8001132:	2b10      	cmp	r3, #16
 8001134:	d122      	bne.n	800117c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	f003 0310 	and.w	r3, r3, #16
 8001140:	2b10      	cmp	r3, #16
 8001142:	d11b      	bne.n	800117c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f06f 0210 	mvn.w	r2, #16
 800114c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2208      	movs	r2, #8
 8001152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f92f 	bl	80013c6 <HAL_TIM_IC_CaptureCallback>
 8001168:	e005      	b.n	8001176 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f922 	bl	80013b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 f931 	bl	80013d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b01      	cmp	r3, #1
 8001188:	d10e      	bne.n	80011a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b01      	cmp	r3, #1
 8001196:	d107      	bne.n	80011a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f06f 0201 	mvn.w	r2, #1
 80011a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 f8fd 	bl	80013a2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b2:	2b80      	cmp	r3, #128	; 0x80
 80011b4:	d10e      	bne.n	80011d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c0:	2b80      	cmp	r3, #128	; 0x80
 80011c2:	d107      	bne.n	80011d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80011cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 fa59 	bl	8001686 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011de:	2b40      	cmp	r3, #64	; 0x40
 80011e0:	d10e      	bne.n	8001200 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ec:	2b40      	cmp	r3, #64	; 0x40
 80011ee:	d107      	bne.n	8001200 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80011f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f8f5 	bl	80013ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	f003 0320 	and.w	r3, r3, #32
 800120a:	2b20      	cmp	r3, #32
 800120c:	d10e      	bne.n	800122c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	f003 0320 	and.w	r3, r3, #32
 8001218:	2b20      	cmp	r3, #32
 800121a:	d107      	bne.n	800122c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f06f 0220 	mvn.w	r2, #32
 8001224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 fa24 	bl	8001674 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001244:	2b01      	cmp	r3, #1
 8001246:	d101      	bne.n	800124c <HAL_TIM_ConfigClockSource+0x18>
 8001248:	2302      	movs	r3, #2
 800124a:	e0a6      	b.n	800139a <HAL_TIM_ConfigClockSource+0x166>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2202      	movs	r2, #2
 8001258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800126a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001272:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b40      	cmp	r3, #64	; 0x40
 8001282:	d067      	beq.n	8001354 <HAL_TIM_ConfigClockSource+0x120>
 8001284:	2b40      	cmp	r3, #64	; 0x40
 8001286:	d80b      	bhi.n	80012a0 <HAL_TIM_ConfigClockSource+0x6c>
 8001288:	2b10      	cmp	r3, #16
 800128a:	d073      	beq.n	8001374 <HAL_TIM_ConfigClockSource+0x140>
 800128c:	2b10      	cmp	r3, #16
 800128e:	d802      	bhi.n	8001296 <HAL_TIM_ConfigClockSource+0x62>
 8001290:	2b00      	cmp	r3, #0
 8001292:	d06f      	beq.n	8001374 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001294:	e078      	b.n	8001388 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001296:	2b20      	cmp	r3, #32
 8001298:	d06c      	beq.n	8001374 <HAL_TIM_ConfigClockSource+0x140>
 800129a:	2b30      	cmp	r3, #48	; 0x30
 800129c:	d06a      	beq.n	8001374 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800129e:	e073      	b.n	8001388 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80012a0:	2b70      	cmp	r3, #112	; 0x70
 80012a2:	d00d      	beq.n	80012c0 <HAL_TIM_ConfigClockSource+0x8c>
 80012a4:	2b70      	cmp	r3, #112	; 0x70
 80012a6:	d804      	bhi.n	80012b2 <HAL_TIM_ConfigClockSource+0x7e>
 80012a8:	2b50      	cmp	r3, #80	; 0x50
 80012aa:	d033      	beq.n	8001314 <HAL_TIM_ConfigClockSource+0xe0>
 80012ac:	2b60      	cmp	r3, #96	; 0x60
 80012ae:	d041      	beq.n	8001334 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80012b0:	e06a      	b.n	8001388 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80012b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012b6:	d066      	beq.n	8001386 <HAL_TIM_ConfigClockSource+0x152>
 80012b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012bc:	d017      	beq.n	80012ee <HAL_TIM_ConfigClockSource+0xba>
      break;
 80012be:	e063      	b.n	8001388 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6818      	ldr	r0, [r3, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	6899      	ldr	r1, [r3, #8]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	f000 f96d 	bl	80015ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80012e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	609a      	str	r2, [r3, #8]
      break;
 80012ec:	e04c      	b.n	8001388 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	6899      	ldr	r1, [r3, #8]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	f000 f956 	bl	80015ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001310:	609a      	str	r2, [r3, #8]
      break;
 8001312:	e039      	b.n	8001388 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	6859      	ldr	r1, [r3, #4]
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	461a      	mov	r2, r3
 8001322:	f000 f8cd 	bl	80014c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2150      	movs	r1, #80	; 0x50
 800132c:	4618      	mov	r0, r3
 800132e:	f000 f924 	bl	800157a <TIM_ITRx_SetConfig>
      break;
 8001332:	e029      	b.n	8001388 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6818      	ldr	r0, [r3, #0]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	6859      	ldr	r1, [r3, #4]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	461a      	mov	r2, r3
 8001342:	f000 f8eb 	bl	800151c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2160      	movs	r1, #96	; 0x60
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f914 	bl	800157a <TIM_ITRx_SetConfig>
      break;
 8001352:	e019      	b.n	8001388 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6818      	ldr	r0, [r3, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	6859      	ldr	r1, [r3, #4]
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	461a      	mov	r2, r3
 8001362:	f000 f8ad 	bl	80014c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2140      	movs	r1, #64	; 0x40
 800136c:	4618      	mov	r0, r3
 800136e:	f000 f904 	bl	800157a <TIM_ITRx_SetConfig>
      break;
 8001372:	e009      	b.n	8001388 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	4610      	mov	r0, r2
 8001380:	f000 f8fb 	bl	800157a <TIM_ITRx_SetConfig>
      break;
 8001384:	e000      	b.n	8001388 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001386:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr

080013ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a29      	ldr	r2, [pc, #164]	; (80014b4 <TIM_Base_SetConfig+0xb8>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d00b      	beq.n	800142c <TIM_Base_SetConfig+0x30>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800141a:	d007      	beq.n	800142c <TIM_Base_SetConfig+0x30>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a26      	ldr	r2, [pc, #152]	; (80014b8 <TIM_Base_SetConfig+0xbc>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d003      	beq.n	800142c <TIM_Base_SetConfig+0x30>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a25      	ldr	r2, [pc, #148]	; (80014bc <TIM_Base_SetConfig+0xc0>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d108      	bne.n	800143e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a1c      	ldr	r2, [pc, #112]	; (80014b4 <TIM_Base_SetConfig+0xb8>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d00b      	beq.n	800145e <TIM_Base_SetConfig+0x62>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800144c:	d007      	beq.n	800145e <TIM_Base_SetConfig+0x62>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a19      	ldr	r2, [pc, #100]	; (80014b8 <TIM_Base_SetConfig+0xbc>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d003      	beq.n	800145e <TIM_Base_SetConfig+0x62>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a18      	ldr	r2, [pc, #96]	; (80014bc <TIM_Base_SetConfig+0xc0>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d108      	bne.n	8001470 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	4313      	orrs	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <TIM_Base_SetConfig+0xb8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d103      	bne.n	80014a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	691a      	ldr	r2, [r3, #16]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	615a      	str	r2, [r3, #20]
}
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	40012c00 	.word	0x40012c00
 80014b8:	40000400 	.word	0x40000400
 80014bc:	40000800 	.word	0x40000800

080014c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	f023 0201 	bic.w	r2, r3, #1
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f023 030a 	bic.w	r3, r3, #10
 80014fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4313      	orrs	r3, r2
 8001504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	621a      	str	r2, [r3, #32]
}
 8001512:	bf00      	nop
 8001514:	371c      	adds	r7, #28
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800151c:	b480      	push	{r7}
 800151e:	b087      	sub	sp, #28
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	f023 0210 	bic.w	r2, r3, #16
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001546:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	031b      	lsls	r3, r3, #12
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	4313      	orrs	r3, r2
 8001550:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001558:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	011b      	lsls	r3, r3, #4
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	621a      	str	r2, [r3, #32]
}
 8001570:	bf00      	nop
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr

0800157a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800157a:	b480      	push	{r7}
 800157c:	b085      	sub	sp, #20
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001590:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4313      	orrs	r3, r2
 8001598:	f043 0307 	orr.w	r3, r3, #7
 800159c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	609a      	str	r2, [r3, #8]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b087      	sub	sp, #28
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80015c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	021a      	lsls	r2, r3, #8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	4313      	orrs	r3, r2
 80015da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	609a      	str	r2, [r3, #8]
}
 80015e2:	bf00      	nop
 80015e4:	371c      	adds	r7, #28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001600:	2302      	movs	r3, #2
 8001602:	e032      	b.n	800166a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2202      	movs	r2, #2
 8001610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800162a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800163c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	4313      	orrs	r3, r2
 8001646:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68ba      	ldr	r2, [r7, #8]
 8001656:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e03f      	b.n	800172a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d106      	bne.n	80016c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 fc72 	bl	8001fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2224      	movs	r2, #36	; 0x24
 80016c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f90b 	bl	80018f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80016f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001700:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001710:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2220      	movs	r2, #32
 800171c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2220      	movs	r2, #32
 8001724:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b088      	sub	sp, #32
 8001736:	af02      	add	r7, sp, #8
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	603b      	str	r3, [r7, #0]
 800173e:	4613      	mov	r3, r2
 8001740:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b20      	cmp	r3, #32
 8001750:	f040 8083 	bne.w	800185a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <HAL_UART_Transmit+0x2e>
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e07b      	b.n	800185c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800176a:	2b01      	cmp	r3, #1
 800176c:	d101      	bne.n	8001772 <HAL_UART_Transmit+0x40>
 800176e:	2302      	movs	r3, #2
 8001770:	e074      	b.n	800185c <HAL_UART_Transmit+0x12a>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2221      	movs	r2, #33	; 0x21
 8001784:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001788:	f7fe fd40 	bl	800020c <HAL_GetTick>
 800178c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	88fa      	ldrh	r2, [r7, #6]
 8001792:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	88fa      	ldrh	r2, [r7, #6]
 8001798:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800179a:	e042      	b.n	8001822 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	3b01      	subs	r3, #1
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017b2:	d122      	bne.n	80017fa <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	2200      	movs	r2, #0
 80017bc:	2180      	movs	r1, #128	; 0x80
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f000 f850 	bl	8001864 <UART_WaitOnFlagUntilTimeout>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e046      	b.n	800185c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017e0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d103      	bne.n	80017f2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	3302      	adds	r3, #2
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	e017      	b.n	8001822 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	3301      	adds	r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	e013      	b.n	8001822 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	2200      	movs	r2, #0
 8001802:	2180      	movs	r1, #128	; 0x80
 8001804:	68f8      	ldr	r0, [r7, #12]
 8001806:	f000 f82d 	bl	8001864 <UART_WaitOnFlagUntilTimeout>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e023      	b.n	800185c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	60ba      	str	r2, [r7, #8]
 800181a:	781a      	ldrb	r2, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001826:	b29b      	uxth	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1b7      	bne.n	800179c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	2200      	movs	r2, #0
 8001834:	2140      	movs	r1, #64	; 0x40
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 f814 	bl	8001864 <UART_WaitOnFlagUntilTimeout>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e00a      	b.n	800185c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2220      	movs	r2, #32
 800184a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800185a:	2302      	movs	r3, #2
  }
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	4613      	mov	r3, r2
 8001872:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001874:	e02c      	b.n	80018d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187c:	d028      	beq.n	80018d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d007      	beq.n	8001894 <UART_WaitOnFlagUntilTimeout+0x30>
 8001884:	f7fe fcc2 	bl	800020c <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	429a      	cmp	r2, r3
 8001892:	d21d      	bcs.n	80018d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80018a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	695a      	ldr	r2, [r3, #20]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0201 	bic.w	r2, r2, #1
 80018b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2220      	movs	r2, #32
 80018b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2220      	movs	r2, #32
 80018c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e00f      	b.n	80018f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	4013      	ands	r3, r2
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	429a      	cmp	r2, r3
 80018de:	bf0c      	ite	eq
 80018e0:	2301      	moveq	r3, #1
 80018e2:	2300      	movne	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d0c3      	beq.n	8001876 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68da      	ldr	r2, [r3, #12]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	4313      	orrs	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001932:	f023 030c 	bic.w	r3, r3, #12
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6812      	ldr	r2, [r2, #0]
 800193a:	68f9      	ldr	r1, [r7, #12]
 800193c:	430b      	orrs	r3, r1
 800193e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	699a      	ldr	r2, [r3, #24]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a52      	ldr	r2, [pc, #328]	; (8001aa4 <UART_SetConfig+0x1ac>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d14e      	bne.n	80019fe <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001960:	f7ff fae0 	bl	8000f24 <HAL_RCC_GetPCLK2Freq>
 8001964:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	009a      	lsls	r2, r3, #2
 8001970:	441a      	add	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	fbb2 f3f3 	udiv	r3, r2, r3
 800197c:	4a4a      	ldr	r2, [pc, #296]	; (8001aa8 <UART_SetConfig+0x1b0>)
 800197e:	fba2 2303 	umull	r2, r3, r2, r3
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	0119      	lsls	r1, r3, #4
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	009a      	lsls	r2, r3, #2
 8001990:	441a      	add	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	fbb2 f2f3 	udiv	r2, r2, r3
 800199c:	4b42      	ldr	r3, [pc, #264]	; (8001aa8 <UART_SetConfig+0x1b0>)
 800199e:	fba3 0302 	umull	r0, r3, r3, r2
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	2064      	movs	r0, #100	; 0x64
 80019a6:	fb00 f303 	mul.w	r3, r0, r3
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	3332      	adds	r3, #50	; 0x32
 80019b0:	4a3d      	ldr	r2, [pc, #244]	; (8001aa8 <UART_SetConfig+0x1b0>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	095b      	lsrs	r3, r3, #5
 80019b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019bc:	4419      	add	r1, r3
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	009a      	lsls	r2, r3, #2
 80019c8:	441a      	add	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80019d4:	4b34      	ldr	r3, [pc, #208]	; (8001aa8 <UART_SetConfig+0x1b0>)
 80019d6:	fba3 0302 	umull	r0, r3, r3, r2
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	2064      	movs	r0, #100	; 0x64
 80019de:	fb00 f303 	mul.w	r3, r0, r3
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	011b      	lsls	r3, r3, #4
 80019e6:	3332      	adds	r3, #50	; 0x32
 80019e8:	4a2f      	ldr	r2, [pc, #188]	; (8001aa8 <UART_SetConfig+0x1b0>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	f003 020f 	and.w	r2, r3, #15
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	440a      	add	r2, r1
 80019fa:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80019fc:	e04d      	b.n	8001a9a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80019fe:	f7ff fa7d 	bl	8000efc <HAL_RCC_GetPCLK1Freq>
 8001a02:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009a      	lsls	r2, r3, #2
 8001a0e:	441a      	add	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4a23      	ldr	r2, [pc, #140]	; (8001aa8 <UART_SetConfig+0x1b0>)
 8001a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a20:	095b      	lsrs	r3, r3, #5
 8001a22:	0119      	lsls	r1, r3, #4
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009a      	lsls	r2, r3, #2
 8001a2e:	441a      	add	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <UART_SetConfig+0x1b0>)
 8001a3c:	fba3 0302 	umull	r0, r3, r3, r2
 8001a40:	095b      	lsrs	r3, r3, #5
 8001a42:	2064      	movs	r0, #100	; 0x64
 8001a44:	fb00 f303 	mul.w	r3, r0, r3
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	3332      	adds	r3, #50	; 0x32
 8001a4e:	4a16      	ldr	r2, [pc, #88]	; (8001aa8 <UART_SetConfig+0x1b0>)
 8001a50:	fba2 2303 	umull	r2, r3, r2, r3
 8001a54:	095b      	lsrs	r3, r3, #5
 8001a56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a5a:	4419      	add	r1, r3
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	009a      	lsls	r2, r3, #2
 8001a66:	441a      	add	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <UART_SetConfig+0x1b0>)
 8001a74:	fba3 0302 	umull	r0, r3, r3, r2
 8001a78:	095b      	lsrs	r3, r3, #5
 8001a7a:	2064      	movs	r0, #100	; 0x64
 8001a7c:	fb00 f303 	mul.w	r3, r0, r3
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	011b      	lsls	r3, r3, #4
 8001a84:	3332      	adds	r3, #50	; 0x32
 8001a86:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <UART_SetConfig+0x1b0>)
 8001a88:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8c:	095b      	lsrs	r3, r3, #5
 8001a8e:	f003 020f 	and.w	r2, r3, #15
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	440a      	add	r2, r1
 8001a98:	609a      	str	r2, [r3, #8]
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40013800 	.word	0x40013800
 8001aa8:	51eb851f 	.word	0x51eb851f

08001aac <LCD_Write4Bit>:

#include "main.h"
#include "LCD_display2.h"
#include <stdio.h>

void LCD_Write4Bit(uint8_t data){
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(D4_LCD_GPIO_Port, D4_LCD_Pin, ((data>>0)&1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ac4:	4814      	ldr	r0, [pc, #80]	; (8001b18 <LCD_Write4Bit+0x6c>)
 8001ac6:	f7fe fe2a 	bl	800071e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_LCD_GPIO_Port, D5_LCD_Pin, ((data>>1)&1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	085b      	lsrs	r3, r3, #1
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001adc:	480e      	ldr	r0, [pc, #56]	; (8001b18 <LCD_Write4Bit+0x6c>)
 8001ade:	f7fe fe1e 	bl	800071e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_LCD_GPIO_Port, D6_LCD_Pin, ((data>>2)&1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	461a      	mov	r2, r3
 8001af0:	2108      	movs	r1, #8
 8001af2:	480a      	ldr	r0, [pc, #40]	; (8001b1c <LCD_Write4Bit+0x70>)
 8001af4:	f7fe fe13 	bl	800071e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_LCD_GPIO_Port, D7_LCD_Pin, ((data>>3)&1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	08db      	lsrs	r3, r3, #3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	2110      	movs	r1, #16
 8001b08:	4804      	ldr	r0, [pc, #16]	; (8001b1c <LCD_Write4Bit+0x70>)
 8001b0a:	f7fe fe08 	bl	800071e <HAL_GPIO_WritePin>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40010800 	.word	0x40010800
 8001b1c:	40010c00 	.word	0x40010c00

08001b20 <LCD_send>:
void LCD_send(_Bool mode, uint8_t data){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	460a      	mov	r2, r1
 8001b2a:	71fb      	strb	r3, [r7, #7]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	71bb      	strb	r3, [r7, #6]
	if (mode) {RS_LCD(1);}
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d006      	beq.n	8001b44 <LCD_send+0x24>
 8001b36:	2201      	movs	r2, #1
 8001b38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b3c:	482d      	ldr	r0, [pc, #180]	; (8001bf4 <LCD_send+0xd4>)
 8001b3e:	f7fe fdee 	bl	800071e <HAL_GPIO_WritePin>
 8001b42:	e005      	b.n	8001b50 <LCD_send+0x30>
	else { RS_LCD(0);}
 8001b44:	2200      	movs	r2, #0
 8001b46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b4a:	482a      	ldr	r0, [pc, #168]	; (8001bf4 <LCD_send+0xd4>)
 8001b4c:	f7fe fde7 	bl	800071e <HAL_GPIO_WritePin>

	LCD_Write4Bit(data>>4);
 8001b50:	79bb      	ldrb	r3, [r7, #6]
 8001b52:	091b      	lsrs	r3, r3, #4
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ffa8 	bl	8001aac <LCD_Write4Bit>
	E_LCD();
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b62:	4824      	ldr	r0, [pc, #144]	; (8001bf4 <LCD_send+0xd4>)
 8001b64:	f7fe fddb 	bl	800071e <HAL_GPIO_WritePin>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	81fb      	strh	r3, [r7, #14]
 8001b6c:	e002      	b.n	8001b74 <LCD_send+0x54>
 8001b6e:	89fb      	ldrh	r3, [r7, #14]
 8001b70:	3301      	adds	r3, #1
 8001b72:	81fb      	strh	r3, [r7, #14]
 8001b74:	89fb      	ldrh	r3, [r7, #14]
 8001b76:	f240 62d5 	movw	r2, #1749	; 0x6d5
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d9f7      	bls.n	8001b6e <LCD_send+0x4e>
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b84:	481b      	ldr	r0, [pc, #108]	; (8001bf4 <LCD_send+0xd4>)
 8001b86:	f7fe fdca 	bl	800071e <HAL_GPIO_WritePin>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	81bb      	strh	r3, [r7, #12]
 8001b8e:	e002      	b.n	8001b96 <LCD_send+0x76>
 8001b90:	89bb      	ldrh	r3, [r7, #12]
 8001b92:	3301      	adds	r3, #1
 8001b94:	81bb      	strh	r3, [r7, #12]
 8001b96:	89bb      	ldrh	r3, [r7, #12]
 8001b98:	f240 62d5 	movw	r2, #1749	; 0x6d5
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d9f7      	bls.n	8001b90 <LCD_send+0x70>
	LCD_Write4Bit(data);
 8001ba0:	79bb      	ldrb	r3, [r7, #6]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff82 	bl	8001aac <LCD_Write4Bit>
	E_LCD();
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bae:	4811      	ldr	r0, [pc, #68]	; (8001bf4 <LCD_send+0xd4>)
 8001bb0:	f7fe fdb5 	bl	800071e <HAL_GPIO_WritePin>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	817b      	strh	r3, [r7, #10]
 8001bb8:	e002      	b.n	8001bc0 <LCD_send+0xa0>
 8001bba:	897b      	ldrh	r3, [r7, #10]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	817b      	strh	r3, [r7, #10]
 8001bc0:	897b      	ldrh	r3, [r7, #10]
 8001bc2:	f240 62d5 	movw	r2, #1749	; 0x6d5
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d9f7      	bls.n	8001bba <LCD_send+0x9a>
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bd0:	4808      	ldr	r0, [pc, #32]	; (8001bf4 <LCD_send+0xd4>)
 8001bd2:	f7fe fda4 	bl	800071e <HAL_GPIO_WritePin>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	813b      	strh	r3, [r7, #8]
 8001bda:	e002      	b.n	8001be2 <LCD_send+0xc2>
 8001bdc:	893b      	ldrh	r3, [r7, #8]
 8001bde:	3301      	adds	r3, #1
 8001be0:	813b      	strh	r3, [r7, #8]
 8001be2:	893b      	ldrh	r3, [r7, #8]
 8001be4:	f240 62d5 	movw	r2, #1749	; 0x6d5
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d9f7      	bls.n	8001bdc <LCD_send+0xbc>

}
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40010c00 	.word	0x40010c00

08001bf8 <LCD_clear>:
void LCD_clear(void){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
	LCD_Commend(0x01);
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f7ff ff8e 	bl	8001b20 <LCD_send>
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <LCD_init>:
void LCD_init(void){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
	LCD_Commend(0x33);
 8001c0c:	2133      	movs	r1, #51	; 0x33
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f7ff ff86 	bl	8001b20 <LCD_send>
	LCD_Commend(0x32);
 8001c14:	2132      	movs	r1, #50	; 0x32
 8001c16:	2000      	movs	r0, #0
 8001c18:	f7ff ff82 	bl	8001b20 <LCD_send>
	LCD_Commend(0x28);
 8001c1c:	2128      	movs	r1, #40	; 0x28
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f7ff ff7e 	bl	8001b20 <LCD_send>
	LCD_Commend(0x0c);
 8001c24:	210c      	movs	r1, #12
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff ff7a 	bl	8001b20 <LCD_send>
	LCD_Commend(0x06);
 8001c2c:	2106      	movs	r1, #6
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f7ff ff76 	bl	8001b20 <LCD_send>
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <LCD_print>:
void LCD_print(char *pData){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	while(*pData){
 8001c40:	e007      	b.n	8001c52 <LCD_print+0x1a>
		LCD_Data(*pData++);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f7ff ff67 	bl	8001b20 <LCD_send>
	while(*pData){
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f3      	bne.n	8001c42 <LCD_print+0xa>
	}
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <LCD_SetCursor>:
void LCD_SetCursor(uint8_t x, uint8_t y){
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	460a      	mov	r2, r1
 8001c6c:	71fb      	strb	r3, [r7, #7]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	71bb      	strb	r3, [r7, #6]
	if (y == 0) LCD_Commend( 0x80 + x);
 8001c72:	79bb      	ldrb	r3, [r7, #6]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d106      	bne.n	8001c86 <LCD_SetCursor+0x24>
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	3b80      	subs	r3, #128	; 0x80
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	4619      	mov	r1, r3
 8001c80:	2000      	movs	r0, #0
 8001c82:	f7ff ff4d 	bl	8001b20 <LCD_send>
	if (y == 1) LCD_Commend( 0xc0 + x);
 8001c86:	79bb      	ldrb	r3, [r7, #6]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d106      	bne.n	8001c9a <LCD_SetCursor+0x38>
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	3b40      	subs	r3, #64	; 0x40
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4619      	mov	r1, r3
 8001c94:	2000      	movs	r0, #0
 8001c96:	f7ff ff43 	bl	8001b20 <LCD_send>
	if (y == 2) LCD_Commend( 0x94 + x);
 8001c9a:	79bb      	ldrb	r3, [r7, #6]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d106      	bne.n	8001cae <LCD_SetCursor+0x4c>
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	3b6c      	subs	r3, #108	; 0x6c
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f7ff ff39 	bl	8001b20 <LCD_send>
	if (y == 3) LCD_Commend( 0xd4 + x);
 8001cae:	79bb      	ldrb	r3, [r7, #6]
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d106      	bne.n	8001cc2 <LCD_SetCursor+0x60>
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	3b2c      	subs	r3, #44	; 0x2c
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	4619      	mov	r1, r3
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f7ff ff2f 	bl	8001b20 <LCD_send>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <LCD_printnum>:

void LCD_printnum(uint16_t num){
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	80fb      	strh	r3, [r7, #6]
	char isi[20];
	sprintf(isi, "%d", num);
 8001cd6:	88fa      	ldrh	r2, [r7, #6]
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	4906      	ldr	r1, [pc, #24]	; (8001cf8 <LCD_printnum+0x2c>)
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f001 f886 	bl	8002df0 <siprintf>
	LCD_print(isi);
 8001ce4:	f107 030c 	add.w	r3, r7, #12
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ffa5 	bl	8001c38 <LCD_print>
}
 8001cee:	bf00      	nop
 8001cf0:	3720      	adds	r7, #32
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	08003640 	.word	0x08003640

08001cfc <SystemClock_Config>:
#include "stm32f1xx_it.h"
#include "main.h"
#include "hardwareinit.h"

void SystemClock_Config(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b090      	sub	sp, #64	; 0x40
 8001d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d02:	f107 0318 	add.w	r3, r7, #24
 8001d06:	2228      	movs	r2, #40	; 0x28
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f001 f868 	bl	8002de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
 8001d1c:	611a      	str	r2, [r3, #16]


  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d30:	2302      	movs	r3, #2
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d3a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d40:	f107 0318 	add.w	r3, r7, #24
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fd03 	bl	8000750 <HAL_RCC_OscConfig>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001d50:	f000 f8ba 	bl	8001ec8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d54:	230f      	movs	r3, #15
 8001d56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	2102      	movs	r1, #2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe ff6e 	bl	8000c50 <HAL_RCC_ClockConfig>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001d7a:	f000 f8a5 	bl	8001ec8 <Error_Handler>
  }
}
 8001d7e:	bf00      	nop
 8001d80:	3740      	adds	r7, #64	; 0x40
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8e:	f107 0310 	add.w	r3, r7, #16
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9c:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <MX_GPIO_Init+0x104>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	4a3a      	ldr	r2, [pc, #232]	; (8001e8c <MX_GPIO_Init+0x104>)
 8001da2:	f043 0310 	orr.w	r3, r3, #16
 8001da6:	6193      	str	r3, [r2, #24]
 8001da8:	4b38      	ldr	r3, [pc, #224]	; (8001e8c <MX_GPIO_Init+0x104>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db4:	4b35      	ldr	r3, [pc, #212]	; (8001e8c <MX_GPIO_Init+0x104>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	4a34      	ldr	r2, [pc, #208]	; (8001e8c <MX_GPIO_Init+0x104>)
 8001dba:	f043 0320 	orr.w	r3, r3, #32
 8001dbe:	6193      	str	r3, [r2, #24]
 8001dc0:	4b32      	ldr	r3, [pc, #200]	; (8001e8c <MX_GPIO_Init+0x104>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dcc:	4b2f      	ldr	r3, [pc, #188]	; (8001e8c <MX_GPIO_Init+0x104>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	4a2e      	ldr	r2, [pc, #184]	; (8001e8c <MX_GPIO_Init+0x104>)
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	6193      	str	r3, [r2, #24]
 8001dd8:	4b2c      	ldr	r3, [pc, #176]	; (8001e8c <MX_GPIO_Init+0x104>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de4:	4b29      	ldr	r3, [pc, #164]	; (8001e8c <MX_GPIO_Init+0x104>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	4a28      	ldr	r2, [pc, #160]	; (8001e8c <MX_GPIO_Init+0x104>)
 8001dea:	f043 0308 	orr.w	r3, r3, #8
 8001dee:	6193      	str	r3, [r2, #24]
 8001df0:	4b26      	ldr	r3, [pc, #152]	; (8001e8c <MX_GPIO_Init+0x104>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENA1_LAP_Pin|ENA2_LAP_Pin|ENA3_LAP_Pin|D0_LAP_Pin
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f249 01f0 	movw	r1, #37104	; 0x90f0
 8001e02:	4823      	ldr	r0, [pc, #140]	; (8001e90 <MX_GPIO_Init+0x108>)
 8001e04:	f7fe fc8b 	bl	800071e <HAL_GPIO_WritePin>
                          |D4_LCD_Pin|D5_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D1_LAP_Pin|D2_LAP_Pin|D3_LAP_Pin|buzzer_Pin
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f24a 411f 	movw	r1, #42015	; 0xa41f
 8001e0e:	4821      	ldr	r0, [pc, #132]	; (8001e94 <MX_GPIO_Init+0x10c>)
 8001e10:	f7fe fc85 	bl	800071e <HAL_GPIO_WritePin>
                          |RS_LCD_Pin|E_LCD_Pin|D6_LCD_Pin|D7_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button_RESET_Pin Button_StartStop_Pin */
  GPIO_InitStruct.Pin = Button_RESET_Pin|Button_StartStop_Pin;
 8001e14:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e22:	f107 0310 	add.w	r3, r7, #16
 8001e26:	4619      	mov	r1, r3
 8001e28:	481b      	ldr	r0, [pc, #108]	; (8001e98 <MX_GPIO_Init+0x110>)
 8001e2a:	f7fe fb07 	bl	800043c <HAL_GPIO_Init>

  /*Configure GPIO pins : sens1_Pin sens2_Pin sens3_Pin */
  GPIO_InitStruct.Pin = sens1_Pin|sens2_Pin|sens3_Pin;
 8001e2e:	2307      	movs	r3, #7
 8001e30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4813      	ldr	r0, [pc, #76]	; (8001e90 <MX_GPIO_Init+0x108>)
 8001e42:	f7fe fafb 	bl	800043c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENA1_LAP_Pin ENA2_LAP_Pin ENA3_LAP_Pin D0_LAP_Pin
                           D4_LCD_Pin D5_LCD_Pin */
  GPIO_InitStruct.Pin = ENA1_LAP_Pin|ENA2_LAP_Pin|ENA3_LAP_Pin|D0_LAP_Pin
 8001e46:	f249 03f0 	movw	r3, #37104	; 0x90f0
 8001e4a:	613b      	str	r3, [r7, #16]
                          |D4_LCD_Pin|D5_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2302      	movs	r3, #2
 8001e56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e58:	f107 0310 	add.w	r3, r7, #16
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	480c      	ldr	r0, [pc, #48]	; (8001e90 <MX_GPIO_Init+0x108>)
 8001e60:	f7fe faec 	bl	800043c <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_LAP_Pin D2_LAP_Pin D3_LAP_Pin buzzer_Pin
                           RS_LCD_Pin E_LCD_Pin D6_LCD_Pin D7_LCD_Pin */
  GPIO_InitStruct.Pin = D1_LAP_Pin|D2_LAP_Pin|D3_LAP_Pin|buzzer_Pin
 8001e64:	f24a 431f 	movw	r3, #42015	; 0xa41f
 8001e68:	613b      	str	r3, [r7, #16]
                          |RS_LCD_Pin|E_LCD_Pin|D6_LCD_Pin|D7_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2302      	movs	r3, #2
 8001e74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e76:	f107 0310 	add.w	r3, r7, #16
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4805      	ldr	r0, [pc, #20]	; (8001e94 <MX_GPIO_Init+0x10c>)
 8001e7e:	f7fe fadd 	bl	800043c <HAL_GPIO_Init>

}
 8001e82:	bf00      	nop
 8001e84:	3720      	adds	r7, #32
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40010800 	.word	0x40010800
 8001e94:	40010c00 	.word	0x40010c00
 8001e98:	40011000 	.word	0x40011000

08001e9c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ea0:	f7fe f95c 	bl	800015c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001ea4:	f7ff ff2a 	bl	8001cfc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ea8:	f7ff ff6e 	bl	8001d88 <MX_GPIO_Init>
	MX_TIM2_Init();
 8001eac:	f000 fe36 	bl	8002b1c <MX_TIM2_Init>
	MX_TIM3_Init();
 8001eb0:	f000 fe80 	bl	8002bb4 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8001eb4:	f000 ff20 	bl	8002cf8 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	LCD_init();
 8001eb8:	f7ff fea6 	bl	8001c08 <LCD_init>

	HAL_TIM_Base_Start_IT(&htim2);
 8001ebc:	4801      	ldr	r0, [pc, #4]	; (8001ec4 <main+0x28>)
 8001ebe:	f7ff f88e 	bl	8000fde <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001ec2:	e7fe      	b.n	8001ec2 <main+0x26>
 8001ec4:	20000130 	.word	0x20000130

08001ec8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_MspInit+0x5c>)
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <HAL_MspInit+0x5c>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6193      	str	r3, [r2, #24]
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_MspInit+0x5c>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_MspInit+0x5c>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <HAL_MspInit+0x5c>)
 8001ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efc:	61d3      	str	r3, [r2, #28]
 8001efe:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <HAL_MspInit+0x5c>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_MspInit+0x60>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HAL_MspInit+0x60>)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40010000 	.word	0x40010000

08001f38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f48:	d114      	bne.n	8001f74 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <HAL_TIM_Base_MspInit+0x68>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	4a14      	ldr	r2, [pc, #80]	; (8001fa0 <HAL_TIM_Base_MspInit+0x68>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	61d3      	str	r3, [r2, #28]
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_TIM_Base_MspInit+0x68>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2100      	movs	r1, #0
 8001f66:	201c      	movs	r0, #28
 8001f68:	f7fe fa31 	bl	80003ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f6c:	201c      	movs	r0, #28
 8001f6e:	f7fe fa4a 	bl	8000406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f72:	e010      	b.n	8001f96 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <HAL_TIM_Base_MspInit+0x6c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d10b      	bne.n	8001f96 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <HAL_TIM_Base_MspInit+0x68>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	4a07      	ldr	r2, [pc, #28]	; (8001fa0 <HAL_TIM_Base_MspInit+0x68>)
 8001f84:	f043 0302 	orr.w	r3, r3, #2
 8001f88:	61d3      	str	r3, [r2, #28]
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <HAL_TIM_Base_MspInit+0x68>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40000400 	.word	0x40000400

08001fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <HAL_UART_MspInit+0x8c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d131      	bne.n	800202c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_UART_MspInit+0x90>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a1a      	ldr	r2, [pc, #104]	; (8002038 <HAL_UART_MspInit+0x90>)
 8001fce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	4b18      	ldr	r3, [pc, #96]	; (8002038 <HAL_UART_MspInit+0x90>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe0:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_UART_MspInit+0x90>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4a14      	ldr	r2, [pc, #80]	; (8002038 <HAL_UART_MspInit+0x90>)
 8001fe6:	f043 0304 	orr.w	r3, r3, #4
 8001fea:	6193      	str	r3, [r2, #24]
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_UART_MspInit+0x90>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ffc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002002:	2303      	movs	r3, #3
 8002004:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002006:	f107 0310 	add.w	r3, r7, #16
 800200a:	4619      	mov	r1, r3
 800200c:	480b      	ldr	r0, [pc, #44]	; (800203c <HAL_UART_MspInit+0x94>)
 800200e:	f7fe fa15 	bl	800043c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002020:	f107 0310 	add.w	r3, r7, #16
 8002024:	4619      	mov	r1, r3
 8002026:	4805      	ldr	r0, [pc, #20]	; (800203c <HAL_UART_MspInit+0x94>)
 8002028:	f7fe fa08 	bl	800043c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800202c:	bf00      	nop
 800202e:	3720      	adds	r7, #32
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40013800 	.word	0x40013800
 8002038:	40021000 	.word	0x40021000
 800203c:	40010800 	.word	0x40010800

08002040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <HardFault_Handler+0x4>

08002052 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002056:	e7fe      	b.n	8002056 <MemManage_Handler+0x4>

08002058 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205c:	e7fe      	b.n	800205c <BusFault_Handler+0x4>

0800205e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002062:	e7fe      	b.n	8002062 <UsageFault_Handler+0x4>

08002064 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800208c:	f7fe f8ac 	bl	80001e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}

08002094 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002098:	4804      	ldr	r0, [pc, #16]	; (80020ac <TIM2_IRQHandler+0x18>)
 800209a:	f7fe ffc3 	bl	8001024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  task_mulai();
 800209e:	f000 f901 	bl	80022a4 <task_mulai>
  Stopwatch();
 80020a2:	f000 f865 	bl	8002170 <Stopwatch>
//  HAL_GPIO_WritePin(ENA1_LAP_GPIO_Port, ENA1_LAP_Pin, GPIO_PIN_SET);
//  HAL_GPIO_TogglePin(D0_LAP_GPIO_Port, D0_LAP_Pin);
  /* USER CODE END TIM2_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000130 	.word	0x20000130

080020b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <_sbrk+0x50>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d102      	bne.n	80020c6 <_sbrk+0x16>
		heap_end = &end;
 80020c0:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <_sbrk+0x50>)
 80020c2:	4a10      	ldr	r2, [pc, #64]	; (8002104 <_sbrk+0x54>)
 80020c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80020c6:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <_sbrk+0x50>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <_sbrk+0x50>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4413      	add	r3, r2
 80020d4:	466a      	mov	r2, sp
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d907      	bls.n	80020ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80020da:	f000 fe57 	bl	8002d8c <__errno>
 80020de:	4602      	mov	r2, r0
 80020e0:	230c      	movs	r3, #12
 80020e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80020e4:	f04f 33ff 	mov.w	r3, #4294967295
 80020e8:	e006      	b.n	80020f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <_sbrk+0x50>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	4a03      	ldr	r2, [pc, #12]	; (8002100 <_sbrk+0x50>)
 80020f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80020f6:	68fb      	ldr	r3, [r7, #12]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000094 	.word	0x20000094
 8002104:	200001e0 	.word	0x200001e0

08002108 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <SystemInit+0x5c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a14      	ldr	r2, [pc, #80]	; (8002164 <SystemInit+0x5c>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <SystemInit+0x5c>)
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	4911      	ldr	r1, [pc, #68]	; (8002164 <SystemInit+0x5c>)
 800211e:	4b12      	ldr	r3, [pc, #72]	; (8002168 <SystemInit+0x60>)
 8002120:	4013      	ands	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002124:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <SystemInit+0x5c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <SystemInit+0x5c>)
 800212a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800212e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002132:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <SystemInit+0x5c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <SystemInit+0x5c>)
 800213a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <SystemInit+0x5c>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a07      	ldr	r2, [pc, #28]	; (8002164 <SystemInit+0x5c>)
 8002146:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800214a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <SystemInit+0x5c>)
 800214e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002152:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <SystemInit+0x64>)
 8002156:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800215a:	609a      	str	r2, [r3, #8]
#endif 
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	40021000 	.word	0x40021000
 8002168:	f8ff0000 	.word	0xf8ff0000
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <Stopwatch>:
	LCD_print("BALAPAN MOBIL");
	LCD_SetCursor(3,2);
	LCD_print("by : FIRMANWM");
}

void Stopwatch(void){
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
	if(stopwatchEna){
 8002174:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <Stopwatch+0x54>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01f      	beq.n	80021bc <Stopwatch+0x4c>
		miliSecond++;
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <Stopwatch+0x58>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	3301      	adds	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <Stopwatch+0x58>)
 8002186:	801a      	strh	r2, [r3, #0]
		if(miliSecond>99){
 8002188:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <Stopwatch+0x58>)
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	2b63      	cmp	r3, #99	; 0x63
 800218e:	d915      	bls.n	80021bc <Stopwatch+0x4c>
			miliSecond=0;
 8002190:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <Stopwatch+0x58>)
 8002192:	2200      	movs	r2, #0
 8002194:	801a      	strh	r2, [r3, #0]
			second++;
 8002196:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <Stopwatch+0x5c>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	3301      	adds	r3, #1
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <Stopwatch+0x5c>)
 80021a0:	701a      	strb	r2, [r3, #0]
			if(second>59){
 80021a2:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <Stopwatch+0x5c>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b3b      	cmp	r3, #59	; 0x3b
 80021a8:	d908      	bls.n	80021bc <Stopwatch+0x4c>
				second=0;
 80021aa:	4b08      	ldr	r3, [pc, #32]	; (80021cc <Stopwatch+0x5c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
				minute++;
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <Stopwatch+0x60>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	3301      	adds	r3, #1
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <Stopwatch+0x60>)
 80021ba:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	2000017d 	.word	0x2000017d
 80021c8:	20000178 	.word	0x20000178
 80021cc:	20000174 	.word	0x20000174
 80021d0:	20000175 	.word	0x20000175

080021d4 <Stopwatch_Reset>:
void Stopwatch_Reset(void){
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
	miliSecond=0; second=0; minute=0;
 80021da:	4b23      	ldr	r3, [pc, #140]	; (8002268 <Stopwatch_Reset+0x94>)
 80021dc:	2200      	movs	r2, #0
 80021de:	801a      	strh	r2, [r3, #0]
 80021e0:	4b22      	ldr	r3, [pc, #136]	; (800226c <Stopwatch_Reset+0x98>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
 80021e6:	4b22      	ldr	r3, [pc, #136]	; (8002270 <Stopwatch_Reset+0x9c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]

	lap_1=0;	lap_2=0;	lap_3=0;
 80021ec:	4b21      	ldr	r3, [pc, #132]	; (8002274 <Stopwatch_Reset+0xa0>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
 80021f2:	4b21      	ldr	r3, [pc, #132]	; (8002278 <Stopwatch_Reset+0xa4>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
 80021f8:	4b20      	ldr	r3, [pc, #128]	; (800227c <Stopwatch_Reset+0xa8>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<5; i++){
 80021fe:	2300      	movs	r3, #0
 8002200:	71fb      	strb	r3, [r7, #7]
 8002202:	e029      	b.n	8002258 <Stopwatch_Reset+0x84>
		milisecondA[i]=0;	milisecondB[i]=0;	milisecondC[i]=0;
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	4a1e      	ldr	r2, [pc, #120]	; (8002280 <Stopwatch_Reset+0xac>)
 8002208:	2100      	movs	r1, #0
 800220a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	4a1c      	ldr	r2, [pc, #112]	; (8002284 <Stopwatch_Reset+0xb0>)
 8002212:	2100      	movs	r1, #0
 8002214:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	4a1b      	ldr	r2, [pc, #108]	; (8002288 <Stopwatch_Reset+0xb4>)
 800221c:	2100      	movs	r1, #0
 800221e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		secondA[i]=0;	secondB[i]=0;	secondC[i]=0;
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	4a19      	ldr	r2, [pc, #100]	; (800228c <Stopwatch_Reset+0xb8>)
 8002226:	2100      	movs	r1, #0
 8002228:	54d1      	strb	r1, [r2, r3]
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	4a18      	ldr	r2, [pc, #96]	; (8002290 <Stopwatch_Reset+0xbc>)
 800222e:	2100      	movs	r1, #0
 8002230:	54d1      	strb	r1, [r2, r3]
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	4a17      	ldr	r2, [pc, #92]	; (8002294 <Stopwatch_Reset+0xc0>)
 8002236:	2100      	movs	r1, #0
 8002238:	54d1      	strb	r1, [r2, r3]
		minuteA[i]=0;	minuteB[i]=0;	minuteC[i]=0;
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	4a16      	ldr	r2, [pc, #88]	; (8002298 <Stopwatch_Reset+0xc4>)
 800223e:	2100      	movs	r1, #0
 8002240:	54d1      	strb	r1, [r2, r3]
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	4a15      	ldr	r2, [pc, #84]	; (800229c <Stopwatch_Reset+0xc8>)
 8002246:	2100      	movs	r1, #0
 8002248:	54d1      	strb	r1, [r2, r3]
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <Stopwatch_Reset+0xcc>)
 800224e:	2100      	movs	r1, #0
 8002250:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<5; i++){
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	3301      	adds	r3, #1
 8002256:	71fb      	strb	r3, [r7, #7]
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	2b04      	cmp	r3, #4
 800225c:	d9d2      	bls.n	8002204 <Stopwatch_Reset+0x30>
	}
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	20000178 	.word	0x20000178
 800226c:	20000174 	.word	0x20000174
 8002270:	20000175 	.word	0x20000175
 8002274:	20000170 	.word	0x20000170
 8002278:	2000017b 	.word	0x2000017b
 800227c:	20000176 	.word	0x20000176
 8002280:	20000190 	.word	0x20000190
 8002284:	2000019c 	.word	0x2000019c
 8002288:	200001bc 	.word	0x200001bc
 800228c:	200001c8 	.word	0x200001c8
 8002290:	200001ac 	.word	0x200001ac
 8002294:	20000188 	.word	0x20000188
 8002298:	200001d0 	.word	0x200001d0
 800229c:	20000180 	.word	0x20000180
 80022a0:	200001b4 	.word	0x200001b4

080022a4 <task_mulai>:

void task_mulai(void){
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(Button_StartStop_GPIO_Port, Button_StartStop_Pin)==GPIO_PIN_RESET){
 80022a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022ac:	4886      	ldr	r0, [pc, #536]	; (80024c8 <task_mulai+0x224>)
 80022ae:	f7fe fa1f 	bl	80006f0 <HAL_GPIO_ReadPin>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d11e      	bne.n	80022f6 <task_mulai+0x52>
		if(timeout1++ > timeoutVal){
 80022b8:	4b84      	ldr	r3, [pc, #528]	; (80024cc <task_mulai+0x228>)
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	b291      	uxth	r1, r2
 80022c0:	4a82      	ldr	r2, [pc, #520]	; (80024cc <task_mulai+0x228>)
 80022c2:	8011      	strh	r1, [r2, #0]
 80022c4:	4a82      	ldr	r2, [pc, #520]	; (80024d0 <task_mulai+0x22c>)
 80022c6:	8812      	ldrh	r2, [r2, #0]
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d909      	bls.n	80022e0 <task_mulai+0x3c>
			stopwatchEna = 1;
 80022cc:	4b81      	ldr	r3, [pc, #516]	; (80024d4 <task_mulai+0x230>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
			LCD_clear();
 80022d2:	f7ff fc91 	bl	8001bf8 <LCD_clear>
			task_errordis(1, "Button START/STOP Error");
 80022d6:	4980      	ldr	r1, [pc, #512]	; (80024d8 <task_mulai+0x234>)
 80022d8:	2001      	movs	r0, #1
 80022da:	f000 f9e9 	bl	80026b0 <task_errordis>
 80022de:	e013      	b.n	8002308 <task_mulai+0x64>
		}
		else
			bouncing1 = (bouncing1<<1)|1;
 80022e0:	4b7e      	ldr	r3, [pc, #504]	; (80024dc <task_mulai+0x238>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	b25b      	sxtb	r3, r3
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	b25b      	sxtb	r3, r3
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	4b7a      	ldr	r3, [pc, #488]	; (80024dc <task_mulai+0x238>)
 80022f2:	701a      	strb	r2, [r3, #0]
 80022f4:	e008      	b.n	8002308 <task_mulai+0x64>
	}
	else{
		timeout1 = 0;
 80022f6:	4b75      	ldr	r3, [pc, #468]	; (80024cc <task_mulai+0x228>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	801a      	strh	r2, [r3, #0]
		bouncing1 = bouncing1<<1;
 80022fc:	4b77      	ldr	r3, [pc, #476]	; (80024dc <task_mulai+0x238>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	b2da      	uxtb	r2, r3
 8002304:	4b75      	ldr	r3, [pc, #468]	; (80024dc <task_mulai+0x238>)
 8002306:	701a      	strb	r2, [r3, #0]
	}
	if (bouncing1==3){
 8002308:	4b74      	ldr	r3, [pc, #464]	; (80024dc <task_mulai+0x238>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b03      	cmp	r3, #3
 800230e:	d113      	bne.n	8002338 <task_mulai+0x94>
		stopwatchEna = !(stopwatchEna);
 8002310:	4b70      	ldr	r3, [pc, #448]	; (80024d4 <task_mulai+0x230>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	bf14      	ite	ne
 8002318:	2301      	movne	r3, #1
 800231a:	2300      	moveq	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	f083 0301 	eor.w	r3, r3, #1
 8002322:	b2db      	uxtb	r3, r3
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4b6a      	ldr	r3, [pc, #424]	; (80024d4 <task_mulai+0x230>)
 800232c:	701a      	strb	r2, [r3, #0]
		task_display(stopwatchEna);
 800232e:	4b69      	ldr	r3, [pc, #420]	; (80024d4 <task_mulai+0x230>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f000 fa02 	bl	800273c <task_display>

	}
	if (HAL_GPIO_ReadPin(Button_RESET_GPIO_Port, Button_RESET_Pin)==GPIO_PIN_RESET){
 8002338:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800233c:	4862      	ldr	r0, [pc, #392]	; (80024c8 <task_mulai+0x224>)
 800233e:	f7fe f9d7 	bl	80006f0 <HAL_GPIO_ReadPin>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d11c      	bne.n	8002382 <task_mulai+0xde>
		if(timeout2++ > timeoutVal){
 8002348:	4b65      	ldr	r3, [pc, #404]	; (80024e0 <task_mulai+0x23c>)
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	b291      	uxth	r1, r2
 8002350:	4a63      	ldr	r2, [pc, #396]	; (80024e0 <task_mulai+0x23c>)
 8002352:	8011      	strh	r1, [r2, #0]
 8002354:	4a5e      	ldr	r2, [pc, #376]	; (80024d0 <task_mulai+0x22c>)
 8002356:	8812      	ldrh	r2, [r2, #0]
 8002358:	4293      	cmp	r3, r2
 800235a:	d907      	bls.n	800236c <task_mulai+0xc8>
			stopwatchEna = 1;
 800235c:	4b5d      	ldr	r3, [pc, #372]	; (80024d4 <task_mulai+0x230>)
 800235e:	2201      	movs	r2, #1
 8002360:	701a      	strb	r2, [r3, #0]
			task_errordis(1, "Button Reset Error");
 8002362:	4960      	ldr	r1, [pc, #384]	; (80024e4 <task_mulai+0x240>)
 8002364:	2001      	movs	r0, #1
 8002366:	f000 f9a3 	bl	80026b0 <task_errordis>
 800236a:	e013      	b.n	8002394 <task_mulai+0xf0>

		}
		else
			bouncing2 = (bouncing2<<1)|1;
 800236c:	4b5e      	ldr	r3, [pc, #376]	; (80024e8 <task_mulai+0x244>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	b25b      	sxtb	r3, r3
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	b25b      	sxtb	r3, r3
 800237a:	b2da      	uxtb	r2, r3
 800237c:	4b5a      	ldr	r3, [pc, #360]	; (80024e8 <task_mulai+0x244>)
 800237e:	701a      	strb	r2, [r3, #0]
 8002380:	e008      	b.n	8002394 <task_mulai+0xf0>
	}
	else{
		timeout2 = 0;
 8002382:	4b57      	ldr	r3, [pc, #348]	; (80024e0 <task_mulai+0x23c>)
 8002384:	2200      	movs	r2, #0
 8002386:	801a      	strh	r2, [r3, #0]
		bouncing2 = bouncing2<<1;
 8002388:	4b57      	ldr	r3, [pc, #348]	; (80024e8 <task_mulai+0x244>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	b2da      	uxtb	r2, r3
 8002390:	4b55      	ldr	r3, [pc, #340]	; (80024e8 <task_mulai+0x244>)
 8002392:	701a      	strb	r2, [r3, #0]
	}
	if (bouncing2==3){
 8002394:	4b54      	ldr	r3, [pc, #336]	; (80024e8 <task_mulai+0x244>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b03      	cmp	r3, #3
 800239a:	d105      	bne.n	80023a8 <task_mulai+0x104>
		LCD_clear();
 800239c:	f7ff fc2c 	bl	8001bf8 <LCD_clear>
		task_displayreset();
 80023a0:	f000 f9a4 	bl	80026ec <task_displayreset>
		Stopwatch_Reset();
 80023a4:	f7ff ff16 	bl	80021d4 <Stopwatch_Reset>
	}

	//sensor aktif saat stopwatch aktif

	if (stopwatchEna){
 80023a8:	4b4a      	ldr	r3, [pc, #296]	; (80024d4 <task_mulai+0x230>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 8157 	beq.w	8002660 <task_mulai+0x3bc>
		//sensor 1
		if (HAL_GPIO_ReadPin(sens1_GPIO_Port, sens1_Pin)==GPIO_PIN_RESET){
 80023b2:	2101      	movs	r1, #1
 80023b4:	484d      	ldr	r0, [pc, #308]	; (80024ec <task_mulai+0x248>)
 80023b6:	f7fe f99b 	bl	80006f0 <HAL_GPIO_ReadPin>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d121      	bne.n	8002404 <task_mulai+0x160>
			if (timeout3++ >= timeoutVal){
 80023c0:	4b4b      	ldr	r3, [pc, #300]	; (80024f0 <task_mulai+0x24c>)
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	b291      	uxth	r1, r2
 80023c8:	4a49      	ldr	r2, [pc, #292]	; (80024f0 <task_mulai+0x24c>)
 80023ca:	8011      	strh	r1, [r2, #0]
 80023cc:	4a40      	ldr	r2, [pc, #256]	; (80024d0 <task_mulai+0x22c>)
 80023ce:	8812      	ldrh	r2, [r2, #0]
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d30c      	bcc.n	80023ee <task_mulai+0x14a>
				stopwatchEna = 0;
 80023d4:	4b3f      	ldr	r3, [pc, #252]	; (80024d4 <task_mulai+0x230>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
				LCD_clear();
 80023da:	f7ff fc0d 	bl	8001bf8 <LCD_clear>
				task_errordis(1, "Sensor 1 Error");
 80023de:	4945      	ldr	r1, [pc, #276]	; (80024f4 <task_mulai+0x250>)
 80023e0:	2001      	movs	r0, #1
 80023e2:	f000 f965 	bl	80026b0 <task_errordis>
				uart_println("Sensor 1 ERROR");
 80023e6:	4844      	ldr	r0, [pc, #272]	; (80024f8 <task_mulai+0x254>)
 80023e8:	f000 fc46 	bl	8002c78 <uart_println>
 80023ec:	e013      	b.n	8002416 <task_mulai+0x172>
				//LCD_SetCursor(1, 4); LCD_print("sensor 1 Error");
			}
			else
				bouncing3 = (bouncing3<<1)|1;
 80023ee:	4b43      	ldr	r3, [pc, #268]	; (80024fc <task_mulai+0x258>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	b25b      	sxtb	r3, r3
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	b25b      	sxtb	r3, r3
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4b3f      	ldr	r3, [pc, #252]	; (80024fc <task_mulai+0x258>)
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	e008      	b.n	8002416 <task_mulai+0x172>
		}
		else {
			timeout3=0;
 8002404:	4b3a      	ldr	r3, [pc, #232]	; (80024f0 <task_mulai+0x24c>)
 8002406:	2200      	movs	r2, #0
 8002408:	801a      	strh	r2, [r3, #0]
			bouncing3 = bouncing3<<1;
 800240a:	4b3c      	ldr	r3, [pc, #240]	; (80024fc <task_mulai+0x258>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4b3a      	ldr	r3, [pc, #232]	; (80024fc <task_mulai+0x258>)
 8002414:	701a      	strb	r2, [r3, #0]
		}
		if (bouncing3==3){
 8002416:	4b39      	ldr	r3, [pc, #228]	; (80024fc <task_mulai+0x258>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d12d      	bne.n	800247a <task_mulai+0x1d6>
			lap_1++;
 800241e:	4b38      	ldr	r3, [pc, #224]	; (8002500 <task_mulai+0x25c>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	3301      	adds	r3, #1
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4b36      	ldr	r3, [pc, #216]	; (8002500 <task_mulai+0x25c>)
 8002428:	701a      	strb	r2, [r3, #0]
			if (lap_1 > n) lap_1 = n;
 800242a:	4b35      	ldr	r3, [pc, #212]	; (8002500 <task_mulai+0x25c>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b05      	cmp	r3, #5
 8002430:	d902      	bls.n	8002438 <task_mulai+0x194>
 8002432:	4b33      	ldr	r3, [pc, #204]	; (8002500 <task_mulai+0x25c>)
 8002434:	2205      	movs	r2, #5
 8002436:	701a      	strb	r2, [r3, #0]
			milisecondA[lap_1] = miliSecond;
 8002438:	4b31      	ldr	r3, [pc, #196]	; (8002500 <task_mulai+0x25c>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	4b31      	ldr	r3, [pc, #196]	; (8002504 <task_mulai+0x260>)
 8002440:	8819      	ldrh	r1, [r3, #0]
 8002442:	4b31      	ldr	r3, [pc, #196]	; (8002508 <task_mulai+0x264>)
 8002444:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			secondA[lap_1] = second;
 8002448:	4b2d      	ldr	r3, [pc, #180]	; (8002500 <task_mulai+0x25c>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b2f      	ldr	r3, [pc, #188]	; (800250c <task_mulai+0x268>)
 8002450:	7819      	ldrb	r1, [r3, #0]
 8002452:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <task_mulai+0x26c>)
 8002454:	5499      	strb	r1, [r3, r2]
			minuteA[lap_1] = minute;
 8002456:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <task_mulai+0x25c>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	4b2d      	ldr	r3, [pc, #180]	; (8002514 <task_mulai+0x270>)
 800245e:	7819      	ldrb	r1, [r3, #0]
 8002460:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <task_mulai+0x274>)
 8002462:	5499      	strb	r1, [r3, r2]
			task_display(stopwatchEna);
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <task_mulai+0x230>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f000 f967 	bl	800273c <task_display>
			task_LED(lap_1, 1);
 800246e:	4b24      	ldr	r3, [pc, #144]	; (8002500 <task_mulai+0x25c>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2101      	movs	r1, #1
 8002474:	4618      	mov	r0, r3
 8002476:	f000 fa8b 	bl	8002990 <task_LED>
			//task_LED(lap_2, 2);
			//task_LED(lap_3, 3);
		}
		///sensor2
		if (HAL_GPIO_ReadPin(sens2_GPIO_Port, sens2_Pin)==GPIO_PIN_RESET){
 800247a:	2102      	movs	r1, #2
 800247c:	481b      	ldr	r0, [pc, #108]	; (80024ec <task_mulai+0x248>)
 800247e:	f7fe f937 	bl	80006f0 <HAL_GPIO_ReadPin>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d14f      	bne.n	8002528 <task_mulai+0x284>
			if(timeout4++ >= timeoutVal){
 8002488:	4b24      	ldr	r3, [pc, #144]	; (800251c <task_mulai+0x278>)
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	b291      	uxth	r1, r2
 8002490:	4a22      	ldr	r2, [pc, #136]	; (800251c <task_mulai+0x278>)
 8002492:	8011      	strh	r1, [r2, #0]
 8002494:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <task_mulai+0x22c>)
 8002496:	8812      	ldrh	r2, [r2, #0]
 8002498:	4293      	cmp	r3, r2
 800249a:	d309      	bcc.n	80024b0 <task_mulai+0x20c>
				stopwatchEna=0;
 800249c:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <task_mulai+0x230>)
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
				LCD_clear();
 80024a2:	f7ff fba9 	bl	8001bf8 <LCD_clear>
				task_errordis(1, "Sensor 2 Error");
 80024a6:	491e      	ldr	r1, [pc, #120]	; (8002520 <task_mulai+0x27c>)
 80024a8:	2001      	movs	r0, #1
 80024aa:	f000 f901 	bl	80026b0 <task_errordis>
 80024ae:	e044      	b.n	800253a <task_mulai+0x296>
			}
			else
				bouncing4 = (bouncing4<<1)|1;
 80024b0:	4b1c      	ldr	r3, [pc, #112]	; (8002524 <task_mulai+0x280>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	b25b      	sxtb	r3, r3
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	b25b      	sxtb	r3, r3
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	4b18      	ldr	r3, [pc, #96]	; (8002524 <task_mulai+0x280>)
 80024c2:	701a      	strb	r2, [r3, #0]
 80024c4:	e039      	b.n	800253a <task_mulai+0x296>
 80024c6:	bf00      	nop
 80024c8:	40011000 	.word	0x40011000
 80024cc:	20000098 	.word	0x20000098
 80024d0:	2000000c 	.word	0x2000000c
 80024d4:	2000017d 	.word	0x2000017d
 80024d8:	08003664 	.word	0x08003664
 80024dc:	2000000e 	.word	0x2000000e
 80024e0:	2000009a 	.word	0x2000009a
 80024e4:	0800367c 	.word	0x0800367c
 80024e8:	2000000f 	.word	0x2000000f
 80024ec:	40010800 	.word	0x40010800
 80024f0:	2000009c 	.word	0x2000009c
 80024f4:	08003690 	.word	0x08003690
 80024f8:	080036a0 	.word	0x080036a0
 80024fc:	20000010 	.word	0x20000010
 8002500:	20000170 	.word	0x20000170
 8002504:	20000178 	.word	0x20000178
 8002508:	20000190 	.word	0x20000190
 800250c:	20000174 	.word	0x20000174
 8002510:	200001c8 	.word	0x200001c8
 8002514:	20000175 	.word	0x20000175
 8002518:	200001d0 	.word	0x200001d0
 800251c:	2000009e 	.word	0x2000009e
 8002520:	080036b0 	.word	0x080036b0
 8002524:	20000011 	.word	0x20000011
		}
		else {
			timeout4=0;
 8002528:	4b4e      	ldr	r3, [pc, #312]	; (8002664 <task_mulai+0x3c0>)
 800252a:	2200      	movs	r2, #0
 800252c:	801a      	strh	r2, [r3, #0]
			bouncing4 = bouncing4<<1;
 800252e:	4b4e      	ldr	r3, [pc, #312]	; (8002668 <task_mulai+0x3c4>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	b2da      	uxtb	r2, r3
 8002536:	4b4c      	ldr	r3, [pc, #304]	; (8002668 <task_mulai+0x3c4>)
 8002538:	701a      	strb	r2, [r3, #0]
		}

		if (bouncing4==3){
 800253a:	4b4b      	ldr	r3, [pc, #300]	; (8002668 <task_mulai+0x3c4>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b03      	cmp	r3, #3
 8002540:	d12d      	bne.n	800259e <task_mulai+0x2fa>
			lap_2++;
 8002542:	4b4a      	ldr	r3, [pc, #296]	; (800266c <task_mulai+0x3c8>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	3301      	adds	r3, #1
 8002548:	b2da      	uxtb	r2, r3
 800254a:	4b48      	ldr	r3, [pc, #288]	; (800266c <task_mulai+0x3c8>)
 800254c:	701a      	strb	r2, [r3, #0]
			if(lap_2 > n) lap_2=n;
 800254e:	4b47      	ldr	r3, [pc, #284]	; (800266c <task_mulai+0x3c8>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b05      	cmp	r3, #5
 8002554:	d902      	bls.n	800255c <task_mulai+0x2b8>
 8002556:	4b45      	ldr	r3, [pc, #276]	; (800266c <task_mulai+0x3c8>)
 8002558:	2205      	movs	r2, #5
 800255a:	701a      	strb	r2, [r3, #0]
			milisecondB[lap_2] = miliSecond;
 800255c:	4b43      	ldr	r3, [pc, #268]	; (800266c <task_mulai+0x3c8>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	4b43      	ldr	r3, [pc, #268]	; (8002670 <task_mulai+0x3cc>)
 8002564:	8819      	ldrh	r1, [r3, #0]
 8002566:	4b43      	ldr	r3, [pc, #268]	; (8002674 <task_mulai+0x3d0>)
 8002568:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			secondB[lap_2] = second;
 800256c:	4b3f      	ldr	r3, [pc, #252]	; (800266c <task_mulai+0x3c8>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	4b41      	ldr	r3, [pc, #260]	; (8002678 <task_mulai+0x3d4>)
 8002574:	7819      	ldrb	r1, [r3, #0]
 8002576:	4b41      	ldr	r3, [pc, #260]	; (800267c <task_mulai+0x3d8>)
 8002578:	5499      	strb	r1, [r3, r2]
			minuteB[lap_2] = minute;
 800257a:	4b3c      	ldr	r3, [pc, #240]	; (800266c <task_mulai+0x3c8>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <task_mulai+0x3dc>)
 8002582:	7819      	ldrb	r1, [r3, #0]
 8002584:	4b3f      	ldr	r3, [pc, #252]	; (8002684 <task_mulai+0x3e0>)
 8002586:	5499      	strb	r1, [r3, r2]
			task_display(stopwatchEna);
 8002588:	4b3f      	ldr	r3, [pc, #252]	; (8002688 <task_mulai+0x3e4>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f000 f8d5 	bl	800273c <task_display>
			//task_LED(lap_1, 1);
			task_LED(lap_2, 2);
 8002592:	4b36      	ldr	r3, [pc, #216]	; (800266c <task_mulai+0x3c8>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2102      	movs	r1, #2
 8002598:	4618      	mov	r0, r3
 800259a:	f000 f9f9 	bl	8002990 <task_LED>
			//task_LED(lap_3, 3);
		}
		//sensor3
		if (HAL_GPIO_ReadPin(sens3_GPIO_Port, sens3_Pin)==GPIO_PIN_RESET){
 800259e:	2104      	movs	r1, #4
 80025a0:	483a      	ldr	r0, [pc, #232]	; (800268c <task_mulai+0x3e8>)
 80025a2:	f7fe f8a5 	bl	80006f0 <HAL_GPIO_ReadPin>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d11e      	bne.n	80025ea <task_mulai+0x346>
			if(timeout5++ > timeoutVal){
 80025ac:	4b38      	ldr	r3, [pc, #224]	; (8002690 <task_mulai+0x3ec>)
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	b291      	uxth	r1, r2
 80025b4:	4a36      	ldr	r2, [pc, #216]	; (8002690 <task_mulai+0x3ec>)
 80025b6:	8011      	strh	r1, [r2, #0]
 80025b8:	4a36      	ldr	r2, [pc, #216]	; (8002694 <task_mulai+0x3f0>)
 80025ba:	8812      	ldrh	r2, [r2, #0]
 80025bc:	4293      	cmp	r3, r2
 80025be:	d909      	bls.n	80025d4 <task_mulai+0x330>
				stopwatchEna=0;
 80025c0:	4b31      	ldr	r3, [pc, #196]	; (8002688 <task_mulai+0x3e4>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
				LCD_clear();
 80025c6:	f7ff fb17 	bl	8001bf8 <LCD_clear>
				task_errordis(1, "Sensor 3 Error");
 80025ca:	4933      	ldr	r1, [pc, #204]	; (8002698 <task_mulai+0x3f4>)
 80025cc:	2001      	movs	r0, #1
 80025ce:	f000 f86f 	bl	80026b0 <task_errordis>
 80025d2:	e013      	b.n	80025fc <task_mulai+0x358>
			}
			else
				bouncing5 = (bouncing5<<1)|1;
 80025d4:	4b31      	ldr	r3, [pc, #196]	; (800269c <task_mulai+0x3f8>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	b25b      	sxtb	r3, r3
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	b25b      	sxtb	r3, r3
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	4b2d      	ldr	r3, [pc, #180]	; (800269c <task_mulai+0x3f8>)
 80025e6:	701a      	strb	r2, [r3, #0]
 80025e8:	e008      	b.n	80025fc <task_mulai+0x358>
		}
		else {
			timeout5=0;
 80025ea:	4b29      	ldr	r3, [pc, #164]	; (8002690 <task_mulai+0x3ec>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	801a      	strh	r2, [r3, #0]
			bouncing5 = bouncing5<<1;
 80025f0:	4b2a      	ldr	r3, [pc, #168]	; (800269c <task_mulai+0x3f8>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	4b28      	ldr	r3, [pc, #160]	; (800269c <task_mulai+0x3f8>)
 80025fa:	701a      	strb	r2, [r3, #0]
		}

		if (bouncing5==3){
 80025fc:	4b27      	ldr	r3, [pc, #156]	; (800269c <task_mulai+0x3f8>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d12d      	bne.n	8002660 <task_mulai+0x3bc>
			lap_3++;
 8002604:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <task_mulai+0x3fc>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	3301      	adds	r3, #1
 800260a:	b2da      	uxtb	r2, r3
 800260c:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <task_mulai+0x3fc>)
 800260e:	701a      	strb	r2, [r3, #0]
			if(lap_3 > n) lap_3=n;
 8002610:	4b23      	ldr	r3, [pc, #140]	; (80026a0 <task_mulai+0x3fc>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b05      	cmp	r3, #5
 8002616:	d902      	bls.n	800261e <task_mulai+0x37a>
 8002618:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <task_mulai+0x3fc>)
 800261a:	2205      	movs	r2, #5
 800261c:	701a      	strb	r2, [r3, #0]
			milisecondC[lap_3] = miliSecond;
 800261e:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <task_mulai+0x3fc>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <task_mulai+0x3cc>)
 8002626:	8819      	ldrh	r1, [r3, #0]
 8002628:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <task_mulai+0x400>)
 800262a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			secondC[lap_3] = second;
 800262e:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <task_mulai+0x3fc>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	4b10      	ldr	r3, [pc, #64]	; (8002678 <task_mulai+0x3d4>)
 8002636:	7819      	ldrb	r1, [r3, #0]
 8002638:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <task_mulai+0x404>)
 800263a:	5499      	strb	r1, [r3, r2]
			minuteC[lap_3] = minute;
 800263c:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <task_mulai+0x3fc>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <task_mulai+0x3dc>)
 8002644:	7819      	ldrb	r1, [r3, #0]
 8002646:	4b19      	ldr	r3, [pc, #100]	; (80026ac <task_mulai+0x408>)
 8002648:	5499      	strb	r1, [r3, r2]
			task_display(stopwatchEna);
 800264a:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <task_mulai+0x3e4>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f874 	bl	800273c <task_display>
			//task_LED(lap_1, 1);
			//task_LED(lap_2, 2);
			task_LED(lap_3, 3);
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <task_mulai+0x3fc>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2103      	movs	r1, #3
 800265a:	4618      	mov	r0, r3
 800265c:	f000 f998 	bl	8002990 <task_LED>
		}
	}
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}
 8002664:	2000009e 	.word	0x2000009e
 8002668:	20000011 	.word	0x20000011
 800266c:	2000017b 	.word	0x2000017b
 8002670:	20000178 	.word	0x20000178
 8002674:	2000019c 	.word	0x2000019c
 8002678:	20000174 	.word	0x20000174
 800267c:	200001ac 	.word	0x200001ac
 8002680:	20000175 	.word	0x20000175
 8002684:	20000180 	.word	0x20000180
 8002688:	2000017d 	.word	0x2000017d
 800268c:	40010800 	.word	0x40010800
 8002690:	200000a0 	.word	0x200000a0
 8002694:	2000000c 	.word	0x2000000c
 8002698:	080036c0 	.word	0x080036c0
 800269c:	20000012 	.word	0x20000012
 80026a0:	20000176 	.word	0x20000176
 80026a4:	200001bc 	.word	0x200001bc
 80026a8:	20000188 	.word	0x20000188
 80026ac:	200001b4 	.word	0x200001b4

080026b0 <task_errordis>:

void task_errordis(_Bool state, char *msg){
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	71fb      	strb	r3, [r7, #7]
	LCD_clear(); LCD_SetCursor(0, 0);LCD_SetCursor(1, 4); LCD_print(msg);
 80026bc:	f7ff fa9c 	bl	8001bf8 <LCD_clear>
 80026c0:	2100      	movs	r1, #0
 80026c2:	2000      	movs	r0, #0
 80026c4:	f7ff facd 	bl	8001c62 <LCD_SetCursor>
 80026c8:	2104      	movs	r1, #4
 80026ca:	2001      	movs	r0, #1
 80026cc:	f7ff fac9 	bl	8001c62 <LCD_SetCursor>
 80026d0:	6838      	ldr	r0, [r7, #0]
 80026d2:	f7ff fab1 	bl	8001c38 <LCD_print>
	uart_printdata(msg); uart_println(msg);
 80026d6:	6838      	ldr	r0, [r7, #0]
 80026d8:	f000 faba 	bl	8002c50 <uart_printdata>
 80026dc:	6838      	ldr	r0, [r7, #0]
 80026de:	f000 facb 	bl	8002c78 <uart_println>
	//task_displayreset();
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <task_displayreset>:

void task_displayreset(void){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
	LCD_clear();
 80026f0:	f7ff fa82 	bl	8001bf8 <LCD_clear>
	LCD_SetCursor(3,1);
 80026f4:	2101      	movs	r1, #1
 80026f6:	2003      	movs	r0, #3
 80026f8:	f7ff fab3 	bl	8001c62 <LCD_SetCursor>
	LCD_print("BALAPAN MOBIL");
 80026fc:	480c      	ldr	r0, [pc, #48]	; (8002730 <task_displayreset+0x44>)
 80026fe:	f7ff fa9b 	bl	8001c38 <LCD_print>
	LCD_SetCursor(3,2);
 8002702:	2102      	movs	r1, #2
 8002704:	2003      	movs	r0, #3
 8002706:	f7ff faac 	bl	8001c62 <LCD_SetCursor>
	LCD_print("by : FIRMANWM");
 800270a:	480a      	ldr	r0, [pc, #40]	; (8002734 <task_displayreset+0x48>)
 800270c:	f7ff fa94 	bl	8001c38 <LCD_print>
	if(resetDisplay++ > 20){
 8002710:	4b09      	ldr	r3, [pc, #36]	; (8002738 <task_displayreset+0x4c>)
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	b291      	uxth	r1, r2
 8002718:	4a07      	ldr	r2, [pc, #28]	; (8002738 <task_displayreset+0x4c>)
 800271a:	8011      	strh	r1, [r2, #0]
 800271c:	2b14      	cmp	r3, #20
 800271e:	d904      	bls.n	800272a <task_displayreset+0x3e>
		resetDisplay = 0;
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <task_displayreset+0x4c>)
 8002722:	2200      	movs	r2, #0
 8002724:	801a      	strh	r2, [r3, #0]
		LCD_clear();
 8002726:	f7ff fa67 	bl	8001bf8 <LCD_clear>
	}
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	08003644 	.word	0x08003644
 8002734:	08003654 	.word	0x08003654
 8002738:	200001ba 	.word	0x200001ba

0800273c <task_display>:

void task_display(_Bool state){
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	71fb      	strb	r3, [r7, #7]
	if (state){
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80f1 	beq.w	8002930 <task_display+0x1f4>
		//lcd
		LCD_clear();
 800274e:	f7ff fa53 	bl	8001bf8 <LCD_clear>
		LCD_SetCursor(0,0); LCD_print("LAP :"); LCD_SetCursor(8, 0); LCD_print("TIME :");
 8002752:	2100      	movs	r1, #0
 8002754:	2000      	movs	r0, #0
 8002756:	f7ff fa84 	bl	8001c62 <LCD_SetCursor>
 800275a:	4877      	ldr	r0, [pc, #476]	; (8002938 <task_display+0x1fc>)
 800275c:	f7ff fa6c 	bl	8001c38 <LCD_print>
 8002760:	2100      	movs	r1, #0
 8002762:	2008      	movs	r0, #8
 8002764:	f7ff fa7d 	bl	8001c62 <LCD_SetCursor>
 8002768:	4874      	ldr	r0, [pc, #464]	; (800293c <task_display+0x200>)
 800276a:	f7ff fa65 	bl	8001c38 <LCD_print>
		LCD_SetCursor(0, 1); LCD_print("A :"); LCD_printnum(lap_1);
 800276e:	2101      	movs	r1, #1
 8002770:	2000      	movs	r0, #0
 8002772:	f7ff fa76 	bl	8001c62 <LCD_SetCursor>
 8002776:	4872      	ldr	r0, [pc, #456]	; (8002940 <task_display+0x204>)
 8002778:	f7ff fa5e 	bl	8001c38 <LCD_print>
 800277c:	4b71      	ldr	r3, [pc, #452]	; (8002944 <task_display+0x208>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff faa2 	bl	8001ccc <LCD_printnum>
		LCD_SetCursor(0, 2); LCD_print("B :"); LCD_printnum(lap_2);
 8002788:	2102      	movs	r1, #2
 800278a:	2000      	movs	r0, #0
 800278c:	f7ff fa69 	bl	8001c62 <LCD_SetCursor>
 8002790:	486d      	ldr	r0, [pc, #436]	; (8002948 <task_display+0x20c>)
 8002792:	f7ff fa51 	bl	8001c38 <LCD_print>
 8002796:	4b6d      	ldr	r3, [pc, #436]	; (800294c <task_display+0x210>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fa95 	bl	8001ccc <LCD_printnum>
		LCD_SetCursor(0, 3); LCD_print("C :"); LCD_printnum(lap_3);
 80027a2:	2103      	movs	r1, #3
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7ff fa5c 	bl	8001c62 <LCD_SetCursor>
 80027aa:	4869      	ldr	r0, [pc, #420]	; (8002950 <task_display+0x214>)
 80027ac:	f7ff fa44 	bl	8001c38 <LCD_print>
 80027b0:	4b68      	ldr	r3, [pc, #416]	; (8002954 <task_display+0x218>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fa88 	bl	8001ccc <LCD_printnum>
		LCD_SetCursor(8, 1); LCD_printnum(secondA[lap_1]); LCD_print(":"); LCD_printnum(milisecondA[lap_1]);
 80027bc:	2101      	movs	r1, #1
 80027be:	2008      	movs	r0, #8
 80027c0:	f7ff fa4f 	bl	8001c62 <LCD_SetCursor>
 80027c4:	4b5f      	ldr	r3, [pc, #380]	; (8002944 <task_display+0x208>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b63      	ldr	r3, [pc, #396]	; (8002958 <task_display+0x21c>)
 80027cc:	5c9b      	ldrb	r3, [r3, r2]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fa7b 	bl	8001ccc <LCD_printnum>
 80027d6:	4861      	ldr	r0, [pc, #388]	; (800295c <task_display+0x220>)
 80027d8:	f7ff fa2e 	bl	8001c38 <LCD_print>
 80027dc:	4b59      	ldr	r3, [pc, #356]	; (8002944 <task_display+0x208>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b5f      	ldr	r3, [pc, #380]	; (8002960 <task_display+0x224>)
 80027e4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff fa6f 	bl	8001ccc <LCD_printnum>
		LCD_SetCursor(8, 2); LCD_printnum(secondB[lap_2]); LCD_print(":"); LCD_printnum(milisecondB[lap_2]);
 80027ee:	2102      	movs	r1, #2
 80027f0:	2008      	movs	r0, #8
 80027f2:	f7ff fa36 	bl	8001c62 <LCD_SetCursor>
 80027f6:	4b55      	ldr	r3, [pc, #340]	; (800294c <task_display+0x210>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	4b59      	ldr	r3, [pc, #356]	; (8002964 <task_display+0x228>)
 80027fe:	5c9b      	ldrb	r3, [r3, r2]
 8002800:	b29b      	uxth	r3, r3
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fa62 	bl	8001ccc <LCD_printnum>
 8002808:	4854      	ldr	r0, [pc, #336]	; (800295c <task_display+0x220>)
 800280a:	f7ff fa15 	bl	8001c38 <LCD_print>
 800280e:	4b4f      	ldr	r3, [pc, #316]	; (800294c <task_display+0x210>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	4b54      	ldr	r3, [pc, #336]	; (8002968 <task_display+0x22c>)
 8002816:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fa56 	bl	8001ccc <LCD_printnum>
		LCD_SetCursor(8, 3); LCD_printnum(secondC[lap_3]); LCD_print(":"); LCD_printnum(milisecondC[lap_3]);
 8002820:	2103      	movs	r1, #3
 8002822:	2008      	movs	r0, #8
 8002824:	f7ff fa1d 	bl	8001c62 <LCD_SetCursor>
 8002828:	4b4a      	ldr	r3, [pc, #296]	; (8002954 <task_display+0x218>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	4b4f      	ldr	r3, [pc, #316]	; (800296c <task_display+0x230>)
 8002830:	5c9b      	ldrb	r3, [r3, r2]
 8002832:	b29b      	uxth	r3, r3
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fa49 	bl	8001ccc <LCD_printnum>
 800283a:	4848      	ldr	r0, [pc, #288]	; (800295c <task_display+0x220>)
 800283c:	f7ff f9fc 	bl	8001c38 <LCD_print>
 8002840:	4b44      	ldr	r3, [pc, #272]	; (8002954 <task_display+0x218>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	461a      	mov	r2, r3
 8002846:	4b4a      	ldr	r3, [pc, #296]	; (8002970 <task_display+0x234>)
 8002848:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fa3d 	bl	8001ccc <LCD_printnum>

		//uart
		uart_println(" >>>>>>>>>>>>>>>>>> DATA LAPANGAN DAN TIMER <<<<<<<<<<<<<<<<<<<<<< ");
 8002852:	4848      	ldr	r0, [pc, #288]	; (8002974 <task_display+0x238>)
 8002854:	f000 fa10 	bl	8002c78 <uart_println>
		uart_printdata("LAP A : "); uart_printangka(lap_1); uart_printdata(" >> "); uart_printangka(secondA[lap_1]); uart_printdata(":"); uart_printangka(milisecondA[lap_1]);
 8002858:	4847      	ldr	r0, [pc, #284]	; (8002978 <task_display+0x23c>)
 800285a:	f000 f9f9 	bl	8002c50 <uart_printdata>
 800285e:	4b39      	ldr	r3, [pc, #228]	; (8002944 <task_display+0x208>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f000 fa26 	bl	8002cb4 <uart_printangka>
 8002868:	4844      	ldr	r0, [pc, #272]	; (800297c <task_display+0x240>)
 800286a:	f000 f9f1 	bl	8002c50 <uart_printdata>
 800286e:	4b35      	ldr	r3, [pc, #212]	; (8002944 <task_display+0x208>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	4b38      	ldr	r3, [pc, #224]	; (8002958 <task_display+0x21c>)
 8002876:	5c9b      	ldrb	r3, [r3, r2]
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fa1b 	bl	8002cb4 <uart_printangka>
 800287e:	4837      	ldr	r0, [pc, #220]	; (800295c <task_display+0x220>)
 8002880:	f000 f9e6 	bl	8002c50 <uart_printdata>
 8002884:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <task_display+0x208>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	4b35      	ldr	r3, [pc, #212]	; (8002960 <task_display+0x224>)
 800288c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	4618      	mov	r0, r3
 8002894:	f000 fa0e 	bl	8002cb4 <uart_printangka>
		uart_println("\n\r");
 8002898:	4839      	ldr	r0, [pc, #228]	; (8002980 <task_display+0x244>)
 800289a:	f000 f9ed 	bl	8002c78 <uart_println>
		uart_printdata("LAP B : "); uart_printangka(lap_2); uart_printdata(" >> "); uart_printangka(secondB[lap_2]); uart_printdata(":"); uart_printangka(milisecondB[lap_2]);
 800289e:	4839      	ldr	r0, [pc, #228]	; (8002984 <task_display+0x248>)
 80028a0:	f000 f9d6 	bl	8002c50 <uart_printdata>
 80028a4:	4b29      	ldr	r3, [pc, #164]	; (800294c <task_display+0x210>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 fa03 	bl	8002cb4 <uart_printangka>
 80028ae:	4833      	ldr	r0, [pc, #204]	; (800297c <task_display+0x240>)
 80028b0:	f000 f9ce 	bl	8002c50 <uart_printdata>
 80028b4:	4b25      	ldr	r3, [pc, #148]	; (800294c <task_display+0x210>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <task_display+0x228>)
 80028bc:	5c9b      	ldrb	r3, [r3, r2]
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f9f8 	bl	8002cb4 <uart_printangka>
 80028c4:	4825      	ldr	r0, [pc, #148]	; (800295c <task_display+0x220>)
 80028c6:	f000 f9c3 	bl	8002c50 <uart_printdata>
 80028ca:	4b20      	ldr	r3, [pc, #128]	; (800294c <task_display+0x210>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b25      	ldr	r3, [pc, #148]	; (8002968 <task_display+0x22c>)
 80028d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 f9eb 	bl	8002cb4 <uart_printangka>
		uart_println("\n\r");
 80028de:	4828      	ldr	r0, [pc, #160]	; (8002980 <task_display+0x244>)
 80028e0:	f000 f9ca 	bl	8002c78 <uart_println>
		uart_printdata("LAP C : "); uart_printangka(lap_3); uart_printdata(" >> "); uart_printangka(secondC[lap_3]); uart_printdata(":"); uart_printangka(milisecondC[lap_3]);
 80028e4:	4828      	ldr	r0, [pc, #160]	; (8002988 <task_display+0x24c>)
 80028e6:	f000 f9b3 	bl	8002c50 <uart_printdata>
 80028ea:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <task_display+0x218>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f9e0 	bl	8002cb4 <uart_printangka>
 80028f4:	4821      	ldr	r0, [pc, #132]	; (800297c <task_display+0x240>)
 80028f6:	f000 f9ab 	bl	8002c50 <uart_printdata>
 80028fa:	4b16      	ldr	r3, [pc, #88]	; (8002954 <task_display+0x218>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	4b1a      	ldr	r3, [pc, #104]	; (800296c <task_display+0x230>)
 8002902:	5c9b      	ldrb	r3, [r3, r2]
 8002904:	4618      	mov	r0, r3
 8002906:	f000 f9d5 	bl	8002cb4 <uart_printangka>
 800290a:	4814      	ldr	r0, [pc, #80]	; (800295c <task_display+0x220>)
 800290c:	f000 f9a0 	bl	8002c50 <uart_printdata>
 8002910:	4b10      	ldr	r3, [pc, #64]	; (8002954 <task_display+0x218>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	4b16      	ldr	r3, [pc, #88]	; (8002970 <task_display+0x234>)
 8002918:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	4618      	mov	r0, r3
 8002920:	f000 f9c8 	bl	8002cb4 <uart_printangka>
		uart_println("\n\r");
 8002924:	4816      	ldr	r0, [pc, #88]	; (8002980 <task_display+0x244>)
 8002926:	f000 f9a7 	bl	8002c78 <uart_println>
		uart_println("  ");
 800292a:	4818      	ldr	r0, [pc, #96]	; (800298c <task_display+0x250>)
 800292c:	f000 f9a4 	bl	8002c78 <uart_println>

	}

}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	080036d0 	.word	0x080036d0
 800293c:	080036d8 	.word	0x080036d8
 8002940:	080036e0 	.word	0x080036e0
 8002944:	20000170 	.word	0x20000170
 8002948:	080036e4 	.word	0x080036e4
 800294c:	2000017b 	.word	0x2000017b
 8002950:	080036e8 	.word	0x080036e8
 8002954:	20000176 	.word	0x20000176
 8002958:	200001c8 	.word	0x200001c8
 800295c:	080036ec 	.word	0x080036ec
 8002960:	20000190 	.word	0x20000190
 8002964:	200001ac 	.word	0x200001ac
 8002968:	2000019c 	.word	0x2000019c
 800296c:	20000188 	.word	0x20000188
 8002970:	200001bc 	.word	0x200001bc
 8002974:	080036f0 	.word	0x080036f0
 8002978:	08003734 	.word	0x08003734
 800297c:	08003740 	.word	0x08003740
 8002980:	08003748 	.word	0x08003748
 8002984:	0800374c 	.word	0x0800374c
 8002988:	08003758 	.word	0x08003758
 800298c:	08003764 	.word	0x08003764

08002990 <task_LED>:

void task_LED(uint8_t Dled, uint8_t slot){
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	460a      	mov	r2, r1
 800299a:	71fb      	strb	r3, [r7, #7]
 800299c:	4613      	mov	r3, r2
 800299e:	71bb      	strb	r3, [r7, #6]

	switch (Dled) {
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d87a      	bhi.n	8002a9c <task_LED+0x10c>
 80029a6:	a201      	add	r2, pc, #4	; (adr r2, 80029ac <task_LED+0x1c>)
 80029a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ac:	080029c1 	.word	0x080029c1
 80029b0:	080029ed 	.word	0x080029ed
 80029b4:	08002a19 	.word	0x08002a19
 80029b8:	08002a45 	.word	0x08002a45
 80029bc:	08002a71 	.word	0x08002a71
	case 0:
		HAL_GPIO_WritePin(D0_LAP_GPIO_Port, D0_LAP_Pin, GPIO_PIN_SET);
 80029c0:	2201      	movs	r2, #1
 80029c2:	2180      	movs	r1, #128	; 0x80
 80029c4:	4853      	ldr	r0, [pc, #332]	; (8002b14 <task_LED+0x184>)
 80029c6:	f7fd feaa 	bl	800071e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_LAP_GPIO_Port, D1_LAP_Pin, GPIO_PIN_SET);
 80029ca:	2201      	movs	r2, #1
 80029cc:	2101      	movs	r1, #1
 80029ce:	4852      	ldr	r0, [pc, #328]	; (8002b18 <task_LED+0x188>)
 80029d0:	f7fd fea5 	bl	800071e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_LAP_GPIO_Port, D2_LAP_Pin, GPIO_PIN_SET);
 80029d4:	2201      	movs	r2, #1
 80029d6:	2102      	movs	r1, #2
 80029d8:	484f      	ldr	r0, [pc, #316]	; (8002b18 <task_LED+0x188>)
 80029da:	f7fd fea0 	bl	800071e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
 80029de:	2201      	movs	r2, #1
 80029e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029e4:	484c      	ldr	r0, [pc, #304]	; (8002b18 <task_LED+0x188>)
 80029e6:	f7fd fe9a 	bl	800071e <HAL_GPIO_WritePin>
		break;
 80029ea:	e057      	b.n	8002a9c <task_LED+0x10c>
	case 1:
		HAL_GPIO_WritePin(D0_LAP_GPIO_Port, D0_LAP_Pin, GPIO_PIN_RESET);
 80029ec:	2200      	movs	r2, #0
 80029ee:	2180      	movs	r1, #128	; 0x80
 80029f0:	4848      	ldr	r0, [pc, #288]	; (8002b14 <task_LED+0x184>)
 80029f2:	f7fd fe94 	bl	800071e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_LAP_GPIO_Port, D1_LAP_Pin, GPIO_PIN_SET);
 80029f6:	2201      	movs	r2, #1
 80029f8:	2101      	movs	r1, #1
 80029fa:	4847      	ldr	r0, [pc, #284]	; (8002b18 <task_LED+0x188>)
 80029fc:	f7fd fe8f 	bl	800071e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_LAP_GPIO_Port, D2_LAP_Pin, GPIO_PIN_SET);
 8002a00:	2201      	movs	r2, #1
 8002a02:	2102      	movs	r1, #2
 8002a04:	4844      	ldr	r0, [pc, #272]	; (8002b18 <task_LED+0x188>)
 8002a06:	f7fd fe8a 	bl	800071e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a10:	4841      	ldr	r0, [pc, #260]	; (8002b18 <task_LED+0x188>)
 8002a12:	f7fd fe84 	bl	800071e <HAL_GPIO_WritePin>
		break;
 8002a16:	e041      	b.n	8002a9c <task_LED+0x10c>
	case 2:
		HAL_GPIO_WritePin(D0_LAP_GPIO_Port, D0_LAP_Pin, GPIO_PIN_SET);
 8002a18:	2201      	movs	r2, #1
 8002a1a:	2180      	movs	r1, #128	; 0x80
 8002a1c:	483d      	ldr	r0, [pc, #244]	; (8002b14 <task_LED+0x184>)
 8002a1e:	f7fd fe7e 	bl	800071e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_LAP_GPIO_Port, D1_LAP_Pin, GPIO_PIN_RESET);
 8002a22:	2200      	movs	r2, #0
 8002a24:	2101      	movs	r1, #1
 8002a26:	483c      	ldr	r0, [pc, #240]	; (8002b18 <task_LED+0x188>)
 8002a28:	f7fd fe79 	bl	800071e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_LAP_GPIO_Port, D2_LAP_Pin, GPIO_PIN_SET);
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	2102      	movs	r1, #2
 8002a30:	4839      	ldr	r0, [pc, #228]	; (8002b18 <task_LED+0x188>)
 8002a32:	f7fd fe74 	bl	800071e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
 8002a36:	2201      	movs	r2, #1
 8002a38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a3c:	4836      	ldr	r0, [pc, #216]	; (8002b18 <task_LED+0x188>)
 8002a3e:	f7fd fe6e 	bl	800071e <HAL_GPIO_WritePin>
		break;
 8002a42:	e02b      	b.n	8002a9c <task_LED+0x10c>
	case 3:
		HAL_GPIO_WritePin(D0_LAP_GPIO_Port, D0_LAP_Pin, GPIO_PIN_SET);
 8002a44:	2201      	movs	r2, #1
 8002a46:	2180      	movs	r1, #128	; 0x80
 8002a48:	4832      	ldr	r0, [pc, #200]	; (8002b14 <task_LED+0x184>)
 8002a4a:	f7fd fe68 	bl	800071e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_LAP_GPIO_Port, D1_LAP_Pin, GPIO_PIN_SET);
 8002a4e:	2201      	movs	r2, #1
 8002a50:	2101      	movs	r1, #1
 8002a52:	4831      	ldr	r0, [pc, #196]	; (8002b18 <task_LED+0x188>)
 8002a54:	f7fd fe63 	bl	800071e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_LAP_GPIO_Port, D2_LAP_Pin, GPIO_PIN_RESET);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2102      	movs	r1, #2
 8002a5c:	482e      	ldr	r0, [pc, #184]	; (8002b18 <task_LED+0x188>)
 8002a5e:	f7fd fe5e 	bl	800071e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
 8002a62:	2201      	movs	r2, #1
 8002a64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a68:	482b      	ldr	r0, [pc, #172]	; (8002b18 <task_LED+0x188>)
 8002a6a:	f7fd fe58 	bl	800071e <HAL_GPIO_WritePin>
		break;
 8002a6e:	e015      	b.n	8002a9c <task_LED+0x10c>
	case 4:
		HAL_GPIO_WritePin(D0_LAP_GPIO_Port, D0_LAP_Pin, GPIO_PIN_SET);
 8002a70:	2201      	movs	r2, #1
 8002a72:	2180      	movs	r1, #128	; 0x80
 8002a74:	4827      	ldr	r0, [pc, #156]	; (8002b14 <task_LED+0x184>)
 8002a76:	f7fd fe52 	bl	800071e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_LAP_GPIO_Port, D1_LAP_Pin, GPIO_PIN_SET);
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	4826      	ldr	r0, [pc, #152]	; (8002b18 <task_LED+0x188>)
 8002a80:	f7fd fe4d 	bl	800071e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_LAP_GPIO_Port, D2_LAP_Pin, GPIO_PIN_SET);
 8002a84:	2201      	movs	r2, #1
 8002a86:	2102      	movs	r1, #2
 8002a88:	4823      	ldr	r0, [pc, #140]	; (8002b18 <task_LED+0x188>)
 8002a8a:	f7fd fe48 	bl	800071e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a94:	4820      	ldr	r0, [pc, #128]	; (8002b18 <task_LED+0x188>)
 8002a96:	f7fd fe42 	bl	800071e <HAL_GPIO_WritePin>
		break;
 8002a9a:	bf00      	nop
	}
	switch (slot) {
 8002a9c:	79bb      	ldrb	r3, [r7, #6]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d014      	beq.n	8002acc <task_LED+0x13c>
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d022      	beq.n	8002aec <task_LED+0x15c>
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d000      	beq.n	8002aac <task_LED+0x11c>
		HAL_GPIO_WritePin(ENA1_LAP_GPIO_Port, ENA1_LAP_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(ENA2_LAP_GPIO_Port, ENA2_LAP_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(ENA3_LAP_GPIO_Port, ENA3_LAP_Pin, GPIO_PIN_SET);
		break;
	}
}
 8002aaa:	e02f      	b.n	8002b0c <task_LED+0x17c>
		HAL_GPIO_WritePin(ENA1_LAP_GPIO_Port, ENA1_LAP_Pin, GPIO_PIN_SET);
 8002aac:	2201      	movs	r2, #1
 8002aae:	2110      	movs	r1, #16
 8002ab0:	4818      	ldr	r0, [pc, #96]	; (8002b14 <task_LED+0x184>)
 8002ab2:	f7fd fe34 	bl	800071e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENA2_LAP_GPIO_Port, ENA2_LAP_Pin, GPIO_PIN_RESET);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2120      	movs	r1, #32
 8002aba:	4816      	ldr	r0, [pc, #88]	; (8002b14 <task_LED+0x184>)
 8002abc:	f7fd fe2f 	bl	800071e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENA3_LAP_GPIO_Port, ENA3_LAP_Pin, GPIO_PIN_RESET);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2140      	movs	r1, #64	; 0x40
 8002ac4:	4813      	ldr	r0, [pc, #76]	; (8002b14 <task_LED+0x184>)
 8002ac6:	f7fd fe2a 	bl	800071e <HAL_GPIO_WritePin>
		break;
 8002aca:	e01f      	b.n	8002b0c <task_LED+0x17c>
		HAL_GPIO_WritePin(ENA1_LAP_GPIO_Port, ENA1_LAP_Pin, GPIO_PIN_RESET);
 8002acc:	2200      	movs	r2, #0
 8002ace:	2110      	movs	r1, #16
 8002ad0:	4810      	ldr	r0, [pc, #64]	; (8002b14 <task_LED+0x184>)
 8002ad2:	f7fd fe24 	bl	800071e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENA2_LAP_GPIO_Port, ENA2_LAP_Pin, GPIO_PIN_SET);
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	2120      	movs	r1, #32
 8002ada:	480e      	ldr	r0, [pc, #56]	; (8002b14 <task_LED+0x184>)
 8002adc:	f7fd fe1f 	bl	800071e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENA3_LAP_GPIO_Port, ENA3_LAP_Pin, GPIO_PIN_RESET);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2140      	movs	r1, #64	; 0x40
 8002ae4:	480b      	ldr	r0, [pc, #44]	; (8002b14 <task_LED+0x184>)
 8002ae6:	f7fd fe1a 	bl	800071e <HAL_GPIO_WritePin>
		break;
 8002aea:	e00f      	b.n	8002b0c <task_LED+0x17c>
		HAL_GPIO_WritePin(ENA1_LAP_GPIO_Port, ENA1_LAP_Pin, GPIO_PIN_RESET);
 8002aec:	2200      	movs	r2, #0
 8002aee:	2110      	movs	r1, #16
 8002af0:	4808      	ldr	r0, [pc, #32]	; (8002b14 <task_LED+0x184>)
 8002af2:	f7fd fe14 	bl	800071e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENA2_LAP_GPIO_Port, ENA2_LAP_Pin, GPIO_PIN_RESET);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2120      	movs	r1, #32
 8002afa:	4806      	ldr	r0, [pc, #24]	; (8002b14 <task_LED+0x184>)
 8002afc:	f7fd fe0f 	bl	800071e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENA3_LAP_GPIO_Port, ENA3_LAP_Pin, GPIO_PIN_SET);
 8002b00:	2201      	movs	r2, #1
 8002b02:	2140      	movs	r1, #64	; 0x40
 8002b04:	4803      	ldr	r0, [pc, #12]	; (8002b14 <task_LED+0x184>)
 8002b06:	f7fd fe0a 	bl	800071e <HAL_GPIO_WritePin>
		break;
 8002b0a:	bf00      	nop
}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40010800 	.word	0x40010800
 8002b18:	40010c00 	.word	0x40010c00

08002b1c <MX_TIM2_Init>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b22:	f107 0308 	add.w	r3, r7, #8
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	605a      	str	r2, [r3, #4]
 8002b2c:	609a      	str	r2, [r3, #8]
 8002b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b30:	463b      	mov	r3, r7
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b38:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <MX_TIM2_Init+0x94>)
 8002b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8002b40:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <MX_TIM2_Init+0x94>)
 8002b42:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8002b46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b48:	4b19      	ldr	r3, [pc, #100]	; (8002bb0 <MX_TIM2_Init+0x94>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8002b4e:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <MX_TIM2_Init+0x94>)
 8002b50:	22c8      	movs	r2, #200	; 0xc8
 8002b52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b54:	4b16      	ldr	r3, [pc, #88]	; (8002bb0 <MX_TIM2_Init+0x94>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <MX_TIM2_Init+0x94>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b60:	4813      	ldr	r0, [pc, #76]	; (8002bb0 <MX_TIM2_Init+0x94>)
 8002b62:	f7fe fa11 	bl	8000f88 <HAL_TIM_Base_Init>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002b6c:	f7ff f9ac 	bl	8001ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b76:	f107 0308 	add.w	r3, r7, #8
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	480c      	ldr	r0, [pc, #48]	; (8002bb0 <MX_TIM2_Init+0x94>)
 8002b7e:	f7fe fb59 	bl	8001234 <HAL_TIM_ConfigClockSource>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002b88:	f7ff f99e 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b94:	463b      	mov	r3, r7
 8002b96:	4619      	mov	r1, r3
 8002b98:	4805      	ldr	r0, [pc, #20]	; (8002bb0 <MX_TIM2_Init+0x94>)
 8002b9a:	f7fe fd27 	bl	80015ec <HAL_TIMEx_MasterConfigSynchronization>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002ba4:	f7ff f990 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ba8:	bf00      	nop
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000130 	.word	0x20000130

08002bb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bba:	f107 0308 	add.w	r3, r7, #8
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
 8002bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc8:	463b      	mov	r3, r7
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bd0:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <MX_TIM3_Init+0x94>)
 8002bd2:	4a1e      	ldr	r2, [pc, #120]	; (8002c4c <MX_TIM3_Init+0x98>)
 8002bd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35999;
 8002bd6:	4b1c      	ldr	r3, [pc, #112]	; (8002c48 <MX_TIM3_Init+0x94>)
 8002bd8:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8002bdc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bde:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <MX_TIM3_Init+0x94>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8002be4:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <MX_TIM3_Init+0x94>)
 8002be6:	22c8      	movs	r2, #200	; 0xc8
 8002be8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bea:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <MX_TIM3_Init+0x94>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bf0:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <MX_TIM3_Init+0x94>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bf6:	4814      	ldr	r0, [pc, #80]	; (8002c48 <MX_TIM3_Init+0x94>)
 8002bf8:	f7fe f9c6 	bl	8000f88 <HAL_TIM_Base_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002c02:	f7ff f961 	bl	8001ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	4619      	mov	r1, r3
 8002c12:	480d      	ldr	r0, [pc, #52]	; (8002c48 <MX_TIM3_Init+0x94>)
 8002c14:	f7fe fb0e 	bl	8001234 <HAL_TIM_ConfigClockSource>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002c1e:	f7ff f953 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c22:	2300      	movs	r3, #0
 8002c24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c2a:	463b      	mov	r3, r7
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4806      	ldr	r0, [pc, #24]	; (8002c48 <MX_TIM3_Init+0x94>)
 8002c30:	f7fe fcdc 	bl	80015ec <HAL_TIMEx_MasterConfigSynchronization>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002c3a:	f7ff f945 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c3e:	bf00      	nop
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	200000b0 	.word	0x200000b0
 8002c4c:	40000400 	.word	0x40000400

08002c50 <uart_printdata>:
#include "stm32f1xx_it.h"
#include "string.h"
#include "stdio.h"


void uart_printdata(char *pdata){
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)pdata, strlen(pdata), 10);}
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7fd fa77 	bl	800014c <strlen>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	230a      	movs	r3, #10
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4803      	ldr	r0, [pc, #12]	; (8002c74 <uart_printdata+0x24>)
 8002c68:	f7fe fd63 	bl	8001732 <HAL_UART_Transmit>
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	200000f0 	.word	0x200000f0

08002c78 <uart_println>:
void uart_println(char *pdata){
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)pdata, strlen(pdata), 10);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7fd fa63 	bl	800014c <strlen>
 8002c86:	4603      	mov	r3, r0
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	230a      	movs	r3, #10
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4808      	ldr	r0, [pc, #32]	; (8002cb0 <uart_println+0x38>)
 8002c90:	f7fe fd4f 	bl	8001732 <HAL_UART_Transmit>
	char barisbaru[2] = "\r\n";
 8002c94:	f640 230d 	movw	r3, #2573	; 0xa0d
 8002c98:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t *)barisbaru, 2, 10);
 8002c9a:	f107 010c 	add.w	r1, r7, #12
 8002c9e:	230a      	movs	r3, #10
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	4803      	ldr	r0, [pc, #12]	; (8002cb0 <uart_println+0x38>)
 8002ca4:	f7fe fd45 	bl	8001732 <HAL_UART_Transmit>

}
 8002ca8:	bf00      	nop
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	200000f0 	.word	0x200000f0

08002cb4 <uart_printangka>:
void uart_printangka(uint8_t angka){
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b090      	sub	sp, #64	; 0x40
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
	char buff[50];
	sprintf(buff,"%d", angka);
 8002cbe:	79fa      	ldrb	r2, [r7, #7]
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	490a      	ldr	r1, [pc, #40]	; (8002cf0 <uart_printangka+0x3c>)
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f892 	bl	8002df0 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)buff, strlen(buff), 10);
 8002ccc:	f107 030c 	add.w	r3, r7, #12
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fa3b 	bl	800014c <strlen>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	f107 010c 	add.w	r1, r7, #12
 8002cde:	230a      	movs	r3, #10
 8002ce0:	4804      	ldr	r0, [pc, #16]	; (8002cf4 <uart_printangka+0x40>)
 8002ce2:	f7fe fd26 	bl	8001732 <HAL_UART_Transmit>
}
 8002ce6:	bf00      	nop
 8002ce8:	3740      	adds	r7, #64	; 0x40
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	08003768 	.word	0x08003768
 8002cf4:	200000f0 	.word	0x200000f0

08002cf8 <MX_USART1_UART_Init>:
#include "main.h"
#include "usart.h"
#include "uart.h"

void MX_USART1_UART_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b090      	sub	sp, #64	; 0x40
 8002cfc:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cfe:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <MX_USART1_UART_Init+0x44>)
 8002d00:	603b      	str	r3, [r7, #0]
  huart1.Init.BaudRate = 115200;
 8002d02:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002d06:	607b      	str	r3, [r7, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60bb      	str	r3, [r7, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d10:	2300      	movs	r3, #0
 8002d12:	613b      	str	r3, [r7, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d14:	230c      	movs	r3, #12
 8002d16:	617b      	str	r3, [r7, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61bb      	str	r3, [r7, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d20:	463b      	mov	r3, r7
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe fcb8 	bl	8001698 <HAL_UART_Init>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_USART1_UART_Init+0x3a>
  {
    Error_Handler();
 8002d2e:	f7ff f8cb 	bl	8001ec8 <Error_Handler>
  }
}
 8002d32:	bf00      	nop
 8002d34:	3740      	adds	r7, #64	; 0x40
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40013800 	.word	0x40013800

08002d40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d40:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d42:	e003      	b.n	8002d4c <LoopCopyDataInit>

08002d44 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d44:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d46:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d48:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d4a:	3104      	adds	r1, #4

08002d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d4c:	480a      	ldr	r0, [pc, #40]	; (8002d78 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d4e:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d50:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d52:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d54:	d3f6      	bcc.n	8002d44 <CopyDataInit>
  ldr r2, =_sbss
 8002d56:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d58:	e002      	b.n	8002d60 <LoopFillZerobss>

08002d5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d5a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d5c:	f842 3b04 	str.w	r3, [r2], #4

08002d60 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d62:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d64:	d3f9      	bcc.n	8002d5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d66:	f7ff f9cf 	bl	8002108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d6a:	f000 f815 	bl	8002d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d6e:	f7ff f895 	bl	8001e9c <main>
  bx lr
 8002d72:	4770      	bx	lr
  ldr r3, =_sidata
 8002d74:	080037c0 	.word	0x080037c0
  ldr r0, =_sdata
 8002d78:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d7c:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8002d80:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8002d84:	200001dc 	.word	0x200001dc

08002d88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d88:	e7fe      	b.n	8002d88 <ADC1_2_IRQHandler>
	...

08002d8c <__errno>:
 8002d8c:	4b01      	ldr	r3, [pc, #4]	; (8002d94 <__errno+0x8>)
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	20000014 	.word	0x20000014

08002d98 <__libc_init_array>:
 8002d98:	b570      	push	{r4, r5, r6, lr}
 8002d9a:	2500      	movs	r5, #0
 8002d9c:	4e0c      	ldr	r6, [pc, #48]	; (8002dd0 <__libc_init_array+0x38>)
 8002d9e:	4c0d      	ldr	r4, [pc, #52]	; (8002dd4 <__libc_init_array+0x3c>)
 8002da0:	1ba4      	subs	r4, r4, r6
 8002da2:	10a4      	asrs	r4, r4, #2
 8002da4:	42a5      	cmp	r5, r4
 8002da6:	d109      	bne.n	8002dbc <__libc_init_array+0x24>
 8002da8:	f000 fc34 	bl	8003614 <_init>
 8002dac:	2500      	movs	r5, #0
 8002dae:	4e0a      	ldr	r6, [pc, #40]	; (8002dd8 <__libc_init_array+0x40>)
 8002db0:	4c0a      	ldr	r4, [pc, #40]	; (8002ddc <__libc_init_array+0x44>)
 8002db2:	1ba4      	subs	r4, r4, r6
 8002db4:	10a4      	asrs	r4, r4, #2
 8002db6:	42a5      	cmp	r5, r4
 8002db8:	d105      	bne.n	8002dc6 <__libc_init_array+0x2e>
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
 8002dbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dc0:	4798      	blx	r3
 8002dc2:	3501      	adds	r5, #1
 8002dc4:	e7ee      	b.n	8002da4 <__libc_init_array+0xc>
 8002dc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dca:	4798      	blx	r3
 8002dcc:	3501      	adds	r5, #1
 8002dce:	e7f2      	b.n	8002db6 <__libc_init_array+0x1e>
 8002dd0:	080037b8 	.word	0x080037b8
 8002dd4:	080037b8 	.word	0x080037b8
 8002dd8:	080037b8 	.word	0x080037b8
 8002ddc:	080037bc 	.word	0x080037bc

08002de0 <memset>:
 8002de0:	4603      	mov	r3, r0
 8002de2:	4402      	add	r2, r0
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d100      	bne.n	8002dea <memset+0xa>
 8002de8:	4770      	bx	lr
 8002dea:	f803 1b01 	strb.w	r1, [r3], #1
 8002dee:	e7f9      	b.n	8002de4 <memset+0x4>

08002df0 <siprintf>:
 8002df0:	b40e      	push	{r1, r2, r3}
 8002df2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002df6:	b500      	push	{lr}
 8002df8:	b09c      	sub	sp, #112	; 0x70
 8002dfa:	ab1d      	add	r3, sp, #116	; 0x74
 8002dfc:	9002      	str	r0, [sp, #8]
 8002dfe:	9006      	str	r0, [sp, #24]
 8002e00:	9107      	str	r1, [sp, #28]
 8002e02:	9104      	str	r1, [sp, #16]
 8002e04:	4808      	ldr	r0, [pc, #32]	; (8002e28 <siprintf+0x38>)
 8002e06:	4909      	ldr	r1, [pc, #36]	; (8002e2c <siprintf+0x3c>)
 8002e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e0c:	9105      	str	r1, [sp, #20]
 8002e0e:	6800      	ldr	r0, [r0, #0]
 8002e10:	a902      	add	r1, sp, #8
 8002e12:	9301      	str	r3, [sp, #4]
 8002e14:	f000 f866 	bl	8002ee4 <_svfiprintf_r>
 8002e18:	2200      	movs	r2, #0
 8002e1a:	9b02      	ldr	r3, [sp, #8]
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	b01c      	add	sp, #112	; 0x70
 8002e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e24:	b003      	add	sp, #12
 8002e26:	4770      	bx	lr
 8002e28:	20000014 	.word	0x20000014
 8002e2c:	ffff0208 	.word	0xffff0208

08002e30 <__ssputs_r>:
 8002e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e34:	688e      	ldr	r6, [r1, #8]
 8002e36:	4682      	mov	sl, r0
 8002e38:	429e      	cmp	r6, r3
 8002e3a:	460c      	mov	r4, r1
 8002e3c:	4690      	mov	r8, r2
 8002e3e:	4699      	mov	r9, r3
 8002e40:	d837      	bhi.n	8002eb2 <__ssputs_r+0x82>
 8002e42:	898a      	ldrh	r2, [r1, #12]
 8002e44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e48:	d031      	beq.n	8002eae <__ssputs_r+0x7e>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	6825      	ldr	r5, [r4, #0]
 8002e4e:	6909      	ldr	r1, [r1, #16]
 8002e50:	1a6f      	subs	r7, r5, r1
 8002e52:	6965      	ldr	r5, [r4, #20]
 8002e54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e58:	fb95 f5f3 	sdiv	r5, r5, r3
 8002e5c:	f109 0301 	add.w	r3, r9, #1
 8002e60:	443b      	add	r3, r7
 8002e62:	429d      	cmp	r5, r3
 8002e64:	bf38      	it	cc
 8002e66:	461d      	movcc	r5, r3
 8002e68:	0553      	lsls	r3, r2, #21
 8002e6a:	d530      	bpl.n	8002ece <__ssputs_r+0x9e>
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	f000 fb37 	bl	80034e0 <_malloc_r>
 8002e72:	4606      	mov	r6, r0
 8002e74:	b950      	cbnz	r0, 8002e8c <__ssputs_r+0x5c>
 8002e76:	230c      	movs	r3, #12
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7c:	f8ca 3000 	str.w	r3, [sl]
 8002e80:	89a3      	ldrh	r3, [r4, #12]
 8002e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e86:	81a3      	strh	r3, [r4, #12]
 8002e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e8c:	463a      	mov	r2, r7
 8002e8e:	6921      	ldr	r1, [r4, #16]
 8002e90:	f000 fab6 	bl	8003400 <memcpy>
 8002e94:	89a3      	ldrh	r3, [r4, #12]
 8002e96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9e:	81a3      	strh	r3, [r4, #12]
 8002ea0:	6126      	str	r6, [r4, #16]
 8002ea2:	443e      	add	r6, r7
 8002ea4:	6026      	str	r6, [r4, #0]
 8002ea6:	464e      	mov	r6, r9
 8002ea8:	6165      	str	r5, [r4, #20]
 8002eaa:	1bed      	subs	r5, r5, r7
 8002eac:	60a5      	str	r5, [r4, #8]
 8002eae:	454e      	cmp	r6, r9
 8002eb0:	d900      	bls.n	8002eb4 <__ssputs_r+0x84>
 8002eb2:	464e      	mov	r6, r9
 8002eb4:	4632      	mov	r2, r6
 8002eb6:	4641      	mov	r1, r8
 8002eb8:	6820      	ldr	r0, [r4, #0]
 8002eba:	f000 faac 	bl	8003416 <memmove>
 8002ebe:	68a3      	ldr	r3, [r4, #8]
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	1b9b      	subs	r3, r3, r6
 8002ec4:	60a3      	str	r3, [r4, #8]
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	441e      	add	r6, r3
 8002eca:	6026      	str	r6, [r4, #0]
 8002ecc:	e7dc      	b.n	8002e88 <__ssputs_r+0x58>
 8002ece:	462a      	mov	r2, r5
 8002ed0:	f000 fb60 	bl	8003594 <_realloc_r>
 8002ed4:	4606      	mov	r6, r0
 8002ed6:	2800      	cmp	r0, #0
 8002ed8:	d1e2      	bne.n	8002ea0 <__ssputs_r+0x70>
 8002eda:	6921      	ldr	r1, [r4, #16]
 8002edc:	4650      	mov	r0, sl
 8002ede:	f000 fab3 	bl	8003448 <_free_r>
 8002ee2:	e7c8      	b.n	8002e76 <__ssputs_r+0x46>

08002ee4 <_svfiprintf_r>:
 8002ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ee8:	461d      	mov	r5, r3
 8002eea:	898b      	ldrh	r3, [r1, #12]
 8002eec:	b09d      	sub	sp, #116	; 0x74
 8002eee:	061f      	lsls	r7, r3, #24
 8002ef0:	4680      	mov	r8, r0
 8002ef2:	460c      	mov	r4, r1
 8002ef4:	4616      	mov	r6, r2
 8002ef6:	d50f      	bpl.n	8002f18 <_svfiprintf_r+0x34>
 8002ef8:	690b      	ldr	r3, [r1, #16]
 8002efa:	b96b      	cbnz	r3, 8002f18 <_svfiprintf_r+0x34>
 8002efc:	2140      	movs	r1, #64	; 0x40
 8002efe:	f000 faef 	bl	80034e0 <_malloc_r>
 8002f02:	6020      	str	r0, [r4, #0]
 8002f04:	6120      	str	r0, [r4, #16]
 8002f06:	b928      	cbnz	r0, 8002f14 <_svfiprintf_r+0x30>
 8002f08:	230c      	movs	r3, #12
 8002f0a:	f8c8 3000 	str.w	r3, [r8]
 8002f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f12:	e0c8      	b.n	80030a6 <_svfiprintf_r+0x1c2>
 8002f14:	2340      	movs	r3, #64	; 0x40
 8002f16:	6163      	str	r3, [r4, #20]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f22:	2330      	movs	r3, #48	; 0x30
 8002f24:	f04f 0b01 	mov.w	fp, #1
 8002f28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f2c:	9503      	str	r5, [sp, #12]
 8002f2e:	4637      	mov	r7, r6
 8002f30:	463d      	mov	r5, r7
 8002f32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002f36:	b10b      	cbz	r3, 8002f3c <_svfiprintf_r+0x58>
 8002f38:	2b25      	cmp	r3, #37	; 0x25
 8002f3a:	d13e      	bne.n	8002fba <_svfiprintf_r+0xd6>
 8002f3c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002f40:	d00b      	beq.n	8002f5a <_svfiprintf_r+0x76>
 8002f42:	4653      	mov	r3, sl
 8002f44:	4632      	mov	r2, r6
 8002f46:	4621      	mov	r1, r4
 8002f48:	4640      	mov	r0, r8
 8002f4a:	f7ff ff71 	bl	8002e30 <__ssputs_r>
 8002f4e:	3001      	adds	r0, #1
 8002f50:	f000 80a4 	beq.w	800309c <_svfiprintf_r+0x1b8>
 8002f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f56:	4453      	add	r3, sl
 8002f58:	9309      	str	r3, [sp, #36]	; 0x24
 8002f5a:	783b      	ldrb	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 809d 	beq.w	800309c <_svfiprintf_r+0x1b8>
 8002f62:	2300      	movs	r3, #0
 8002f64:	f04f 32ff 	mov.w	r2, #4294967295
 8002f68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f6c:	9304      	str	r3, [sp, #16]
 8002f6e:	9307      	str	r3, [sp, #28]
 8002f70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f74:	931a      	str	r3, [sp, #104]	; 0x68
 8002f76:	462f      	mov	r7, r5
 8002f78:	2205      	movs	r2, #5
 8002f7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002f7e:	4850      	ldr	r0, [pc, #320]	; (80030c0 <_svfiprintf_r+0x1dc>)
 8002f80:	f000 fa30 	bl	80033e4 <memchr>
 8002f84:	9b04      	ldr	r3, [sp, #16]
 8002f86:	b9d0      	cbnz	r0, 8002fbe <_svfiprintf_r+0xda>
 8002f88:	06d9      	lsls	r1, r3, #27
 8002f8a:	bf44      	itt	mi
 8002f8c:	2220      	movmi	r2, #32
 8002f8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f92:	071a      	lsls	r2, r3, #28
 8002f94:	bf44      	itt	mi
 8002f96:	222b      	movmi	r2, #43	; 0x2b
 8002f98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f9c:	782a      	ldrb	r2, [r5, #0]
 8002f9e:	2a2a      	cmp	r2, #42	; 0x2a
 8002fa0:	d015      	beq.n	8002fce <_svfiprintf_r+0xea>
 8002fa2:	462f      	mov	r7, r5
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	250a      	movs	r5, #10
 8002fa8:	9a07      	ldr	r2, [sp, #28]
 8002faa:	4639      	mov	r1, r7
 8002fac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fb0:	3b30      	subs	r3, #48	; 0x30
 8002fb2:	2b09      	cmp	r3, #9
 8002fb4:	d94d      	bls.n	8003052 <_svfiprintf_r+0x16e>
 8002fb6:	b1b8      	cbz	r0, 8002fe8 <_svfiprintf_r+0x104>
 8002fb8:	e00f      	b.n	8002fda <_svfiprintf_r+0xf6>
 8002fba:	462f      	mov	r7, r5
 8002fbc:	e7b8      	b.n	8002f30 <_svfiprintf_r+0x4c>
 8002fbe:	4a40      	ldr	r2, [pc, #256]	; (80030c0 <_svfiprintf_r+0x1dc>)
 8002fc0:	463d      	mov	r5, r7
 8002fc2:	1a80      	subs	r0, r0, r2
 8002fc4:	fa0b f000 	lsl.w	r0, fp, r0
 8002fc8:	4318      	orrs	r0, r3
 8002fca:	9004      	str	r0, [sp, #16]
 8002fcc:	e7d3      	b.n	8002f76 <_svfiprintf_r+0x92>
 8002fce:	9a03      	ldr	r2, [sp, #12]
 8002fd0:	1d11      	adds	r1, r2, #4
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	9103      	str	r1, [sp, #12]
 8002fd6:	2a00      	cmp	r2, #0
 8002fd8:	db01      	blt.n	8002fde <_svfiprintf_r+0xfa>
 8002fda:	9207      	str	r2, [sp, #28]
 8002fdc:	e004      	b.n	8002fe8 <_svfiprintf_r+0x104>
 8002fde:	4252      	negs	r2, r2
 8002fe0:	f043 0302 	orr.w	r3, r3, #2
 8002fe4:	9207      	str	r2, [sp, #28]
 8002fe6:	9304      	str	r3, [sp, #16]
 8002fe8:	783b      	ldrb	r3, [r7, #0]
 8002fea:	2b2e      	cmp	r3, #46	; 0x2e
 8002fec:	d10c      	bne.n	8003008 <_svfiprintf_r+0x124>
 8002fee:	787b      	ldrb	r3, [r7, #1]
 8002ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8002ff2:	d133      	bne.n	800305c <_svfiprintf_r+0x178>
 8002ff4:	9b03      	ldr	r3, [sp, #12]
 8002ff6:	3702      	adds	r7, #2
 8002ff8:	1d1a      	adds	r2, r3, #4
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	9203      	str	r2, [sp, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	bfb8      	it	lt
 8003002:	f04f 33ff 	movlt.w	r3, #4294967295
 8003006:	9305      	str	r3, [sp, #20]
 8003008:	4d2e      	ldr	r5, [pc, #184]	; (80030c4 <_svfiprintf_r+0x1e0>)
 800300a:	2203      	movs	r2, #3
 800300c:	7839      	ldrb	r1, [r7, #0]
 800300e:	4628      	mov	r0, r5
 8003010:	f000 f9e8 	bl	80033e4 <memchr>
 8003014:	b138      	cbz	r0, 8003026 <_svfiprintf_r+0x142>
 8003016:	2340      	movs	r3, #64	; 0x40
 8003018:	1b40      	subs	r0, r0, r5
 800301a:	fa03 f000 	lsl.w	r0, r3, r0
 800301e:	9b04      	ldr	r3, [sp, #16]
 8003020:	3701      	adds	r7, #1
 8003022:	4303      	orrs	r3, r0
 8003024:	9304      	str	r3, [sp, #16]
 8003026:	7839      	ldrb	r1, [r7, #0]
 8003028:	2206      	movs	r2, #6
 800302a:	4827      	ldr	r0, [pc, #156]	; (80030c8 <_svfiprintf_r+0x1e4>)
 800302c:	1c7e      	adds	r6, r7, #1
 800302e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003032:	f000 f9d7 	bl	80033e4 <memchr>
 8003036:	2800      	cmp	r0, #0
 8003038:	d038      	beq.n	80030ac <_svfiprintf_r+0x1c8>
 800303a:	4b24      	ldr	r3, [pc, #144]	; (80030cc <_svfiprintf_r+0x1e8>)
 800303c:	bb13      	cbnz	r3, 8003084 <_svfiprintf_r+0x1a0>
 800303e:	9b03      	ldr	r3, [sp, #12]
 8003040:	3307      	adds	r3, #7
 8003042:	f023 0307 	bic.w	r3, r3, #7
 8003046:	3308      	adds	r3, #8
 8003048:	9303      	str	r3, [sp, #12]
 800304a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800304c:	444b      	add	r3, r9
 800304e:	9309      	str	r3, [sp, #36]	; 0x24
 8003050:	e76d      	b.n	8002f2e <_svfiprintf_r+0x4a>
 8003052:	fb05 3202 	mla	r2, r5, r2, r3
 8003056:	2001      	movs	r0, #1
 8003058:	460f      	mov	r7, r1
 800305a:	e7a6      	b.n	8002faa <_svfiprintf_r+0xc6>
 800305c:	2300      	movs	r3, #0
 800305e:	250a      	movs	r5, #10
 8003060:	4619      	mov	r1, r3
 8003062:	3701      	adds	r7, #1
 8003064:	9305      	str	r3, [sp, #20]
 8003066:	4638      	mov	r0, r7
 8003068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800306c:	3a30      	subs	r2, #48	; 0x30
 800306e:	2a09      	cmp	r2, #9
 8003070:	d903      	bls.n	800307a <_svfiprintf_r+0x196>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0c8      	beq.n	8003008 <_svfiprintf_r+0x124>
 8003076:	9105      	str	r1, [sp, #20]
 8003078:	e7c6      	b.n	8003008 <_svfiprintf_r+0x124>
 800307a:	fb05 2101 	mla	r1, r5, r1, r2
 800307e:	2301      	movs	r3, #1
 8003080:	4607      	mov	r7, r0
 8003082:	e7f0      	b.n	8003066 <_svfiprintf_r+0x182>
 8003084:	ab03      	add	r3, sp, #12
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	4622      	mov	r2, r4
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <_svfiprintf_r+0x1ec>)
 800308c:	a904      	add	r1, sp, #16
 800308e:	4640      	mov	r0, r8
 8003090:	f3af 8000 	nop.w
 8003094:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003098:	4681      	mov	r9, r0
 800309a:	d1d6      	bne.n	800304a <_svfiprintf_r+0x166>
 800309c:	89a3      	ldrh	r3, [r4, #12]
 800309e:	065b      	lsls	r3, r3, #25
 80030a0:	f53f af35 	bmi.w	8002f0e <_svfiprintf_r+0x2a>
 80030a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030a6:	b01d      	add	sp, #116	; 0x74
 80030a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030ac:	ab03      	add	r3, sp, #12
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	4622      	mov	r2, r4
 80030b2:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <_svfiprintf_r+0x1ec>)
 80030b4:	a904      	add	r1, sp, #16
 80030b6:	4640      	mov	r0, r8
 80030b8:	f000 f882 	bl	80031c0 <_printf_i>
 80030bc:	e7ea      	b.n	8003094 <_svfiprintf_r+0x1b0>
 80030be:	bf00      	nop
 80030c0:	08003784 	.word	0x08003784
 80030c4:	0800378a 	.word	0x0800378a
 80030c8:	0800378e 	.word	0x0800378e
 80030cc:	00000000 	.word	0x00000000
 80030d0:	08002e31 	.word	0x08002e31

080030d4 <_printf_common>:
 80030d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030d8:	4691      	mov	r9, r2
 80030da:	461f      	mov	r7, r3
 80030dc:	688a      	ldr	r2, [r1, #8]
 80030de:	690b      	ldr	r3, [r1, #16]
 80030e0:	4606      	mov	r6, r0
 80030e2:	4293      	cmp	r3, r2
 80030e4:	bfb8      	it	lt
 80030e6:	4613      	movlt	r3, r2
 80030e8:	f8c9 3000 	str.w	r3, [r9]
 80030ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030f0:	460c      	mov	r4, r1
 80030f2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030f6:	b112      	cbz	r2, 80030fe <_printf_common+0x2a>
 80030f8:	3301      	adds	r3, #1
 80030fa:	f8c9 3000 	str.w	r3, [r9]
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	0699      	lsls	r1, r3, #26
 8003102:	bf42      	ittt	mi
 8003104:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003108:	3302      	addmi	r3, #2
 800310a:	f8c9 3000 	strmi.w	r3, [r9]
 800310e:	6825      	ldr	r5, [r4, #0]
 8003110:	f015 0506 	ands.w	r5, r5, #6
 8003114:	d107      	bne.n	8003126 <_printf_common+0x52>
 8003116:	f104 0a19 	add.w	sl, r4, #25
 800311a:	68e3      	ldr	r3, [r4, #12]
 800311c:	f8d9 2000 	ldr.w	r2, [r9]
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	42ab      	cmp	r3, r5
 8003124:	dc29      	bgt.n	800317a <_printf_common+0xa6>
 8003126:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800312a:	6822      	ldr	r2, [r4, #0]
 800312c:	3300      	adds	r3, #0
 800312e:	bf18      	it	ne
 8003130:	2301      	movne	r3, #1
 8003132:	0692      	lsls	r2, r2, #26
 8003134:	d42e      	bmi.n	8003194 <_printf_common+0xc0>
 8003136:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800313a:	4639      	mov	r1, r7
 800313c:	4630      	mov	r0, r6
 800313e:	47c0      	blx	r8
 8003140:	3001      	adds	r0, #1
 8003142:	d021      	beq.n	8003188 <_printf_common+0xb4>
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	68e5      	ldr	r5, [r4, #12]
 8003148:	f003 0306 	and.w	r3, r3, #6
 800314c:	2b04      	cmp	r3, #4
 800314e:	bf18      	it	ne
 8003150:	2500      	movne	r5, #0
 8003152:	f8d9 2000 	ldr.w	r2, [r9]
 8003156:	f04f 0900 	mov.w	r9, #0
 800315a:	bf08      	it	eq
 800315c:	1aad      	subeq	r5, r5, r2
 800315e:	68a3      	ldr	r3, [r4, #8]
 8003160:	6922      	ldr	r2, [r4, #16]
 8003162:	bf08      	it	eq
 8003164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003168:	4293      	cmp	r3, r2
 800316a:	bfc4      	itt	gt
 800316c:	1a9b      	subgt	r3, r3, r2
 800316e:	18ed      	addgt	r5, r5, r3
 8003170:	341a      	adds	r4, #26
 8003172:	454d      	cmp	r5, r9
 8003174:	d11a      	bne.n	80031ac <_printf_common+0xd8>
 8003176:	2000      	movs	r0, #0
 8003178:	e008      	b.n	800318c <_printf_common+0xb8>
 800317a:	2301      	movs	r3, #1
 800317c:	4652      	mov	r2, sl
 800317e:	4639      	mov	r1, r7
 8003180:	4630      	mov	r0, r6
 8003182:	47c0      	blx	r8
 8003184:	3001      	adds	r0, #1
 8003186:	d103      	bne.n	8003190 <_printf_common+0xbc>
 8003188:	f04f 30ff 	mov.w	r0, #4294967295
 800318c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003190:	3501      	adds	r5, #1
 8003192:	e7c2      	b.n	800311a <_printf_common+0x46>
 8003194:	2030      	movs	r0, #48	; 0x30
 8003196:	18e1      	adds	r1, r4, r3
 8003198:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031a2:	4422      	add	r2, r4
 80031a4:	3302      	adds	r3, #2
 80031a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031aa:	e7c4      	b.n	8003136 <_printf_common+0x62>
 80031ac:	2301      	movs	r3, #1
 80031ae:	4622      	mov	r2, r4
 80031b0:	4639      	mov	r1, r7
 80031b2:	4630      	mov	r0, r6
 80031b4:	47c0      	blx	r8
 80031b6:	3001      	adds	r0, #1
 80031b8:	d0e6      	beq.n	8003188 <_printf_common+0xb4>
 80031ba:	f109 0901 	add.w	r9, r9, #1
 80031be:	e7d8      	b.n	8003172 <_printf_common+0x9e>

080031c0 <_printf_i>:
 80031c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80031c8:	460c      	mov	r4, r1
 80031ca:	7e09      	ldrb	r1, [r1, #24]
 80031cc:	b085      	sub	sp, #20
 80031ce:	296e      	cmp	r1, #110	; 0x6e
 80031d0:	4617      	mov	r7, r2
 80031d2:	4606      	mov	r6, r0
 80031d4:	4698      	mov	r8, r3
 80031d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80031d8:	f000 80b3 	beq.w	8003342 <_printf_i+0x182>
 80031dc:	d822      	bhi.n	8003224 <_printf_i+0x64>
 80031de:	2963      	cmp	r1, #99	; 0x63
 80031e0:	d036      	beq.n	8003250 <_printf_i+0x90>
 80031e2:	d80a      	bhi.n	80031fa <_printf_i+0x3a>
 80031e4:	2900      	cmp	r1, #0
 80031e6:	f000 80b9 	beq.w	800335c <_printf_i+0x19c>
 80031ea:	2958      	cmp	r1, #88	; 0x58
 80031ec:	f000 8083 	beq.w	80032f6 <_printf_i+0x136>
 80031f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80031f8:	e032      	b.n	8003260 <_printf_i+0xa0>
 80031fa:	2964      	cmp	r1, #100	; 0x64
 80031fc:	d001      	beq.n	8003202 <_printf_i+0x42>
 80031fe:	2969      	cmp	r1, #105	; 0x69
 8003200:	d1f6      	bne.n	80031f0 <_printf_i+0x30>
 8003202:	6820      	ldr	r0, [r4, #0]
 8003204:	6813      	ldr	r3, [r2, #0]
 8003206:	0605      	lsls	r5, r0, #24
 8003208:	f103 0104 	add.w	r1, r3, #4
 800320c:	d52a      	bpl.n	8003264 <_printf_i+0xa4>
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6011      	str	r1, [r2, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	da03      	bge.n	800321e <_printf_i+0x5e>
 8003216:	222d      	movs	r2, #45	; 0x2d
 8003218:	425b      	negs	r3, r3
 800321a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800321e:	486f      	ldr	r0, [pc, #444]	; (80033dc <_printf_i+0x21c>)
 8003220:	220a      	movs	r2, #10
 8003222:	e039      	b.n	8003298 <_printf_i+0xd8>
 8003224:	2973      	cmp	r1, #115	; 0x73
 8003226:	f000 809d 	beq.w	8003364 <_printf_i+0x1a4>
 800322a:	d808      	bhi.n	800323e <_printf_i+0x7e>
 800322c:	296f      	cmp	r1, #111	; 0x6f
 800322e:	d020      	beq.n	8003272 <_printf_i+0xb2>
 8003230:	2970      	cmp	r1, #112	; 0x70
 8003232:	d1dd      	bne.n	80031f0 <_printf_i+0x30>
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	f043 0320 	orr.w	r3, r3, #32
 800323a:	6023      	str	r3, [r4, #0]
 800323c:	e003      	b.n	8003246 <_printf_i+0x86>
 800323e:	2975      	cmp	r1, #117	; 0x75
 8003240:	d017      	beq.n	8003272 <_printf_i+0xb2>
 8003242:	2978      	cmp	r1, #120	; 0x78
 8003244:	d1d4      	bne.n	80031f0 <_printf_i+0x30>
 8003246:	2378      	movs	r3, #120	; 0x78
 8003248:	4865      	ldr	r0, [pc, #404]	; (80033e0 <_printf_i+0x220>)
 800324a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800324e:	e055      	b.n	80032fc <_printf_i+0x13c>
 8003250:	6813      	ldr	r3, [r2, #0]
 8003252:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003256:	1d19      	adds	r1, r3, #4
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6011      	str	r1, [r2, #0]
 800325c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003260:	2301      	movs	r3, #1
 8003262:	e08c      	b.n	800337e <_printf_i+0x1be>
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f010 0f40 	tst.w	r0, #64	; 0x40
 800326a:	6011      	str	r1, [r2, #0]
 800326c:	bf18      	it	ne
 800326e:	b21b      	sxthne	r3, r3
 8003270:	e7cf      	b.n	8003212 <_printf_i+0x52>
 8003272:	6813      	ldr	r3, [r2, #0]
 8003274:	6825      	ldr	r5, [r4, #0]
 8003276:	1d18      	adds	r0, r3, #4
 8003278:	6010      	str	r0, [r2, #0]
 800327a:	0628      	lsls	r0, r5, #24
 800327c:	d501      	bpl.n	8003282 <_printf_i+0xc2>
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	e002      	b.n	8003288 <_printf_i+0xc8>
 8003282:	0668      	lsls	r0, r5, #25
 8003284:	d5fb      	bpl.n	800327e <_printf_i+0xbe>
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	296f      	cmp	r1, #111	; 0x6f
 800328a:	bf14      	ite	ne
 800328c:	220a      	movne	r2, #10
 800328e:	2208      	moveq	r2, #8
 8003290:	4852      	ldr	r0, [pc, #328]	; (80033dc <_printf_i+0x21c>)
 8003292:	2100      	movs	r1, #0
 8003294:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003298:	6865      	ldr	r5, [r4, #4]
 800329a:	2d00      	cmp	r5, #0
 800329c:	60a5      	str	r5, [r4, #8]
 800329e:	f2c0 8095 	blt.w	80033cc <_printf_i+0x20c>
 80032a2:	6821      	ldr	r1, [r4, #0]
 80032a4:	f021 0104 	bic.w	r1, r1, #4
 80032a8:	6021      	str	r1, [r4, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d13d      	bne.n	800332a <_printf_i+0x16a>
 80032ae:	2d00      	cmp	r5, #0
 80032b0:	f040 808e 	bne.w	80033d0 <_printf_i+0x210>
 80032b4:	4665      	mov	r5, ip
 80032b6:	2a08      	cmp	r2, #8
 80032b8:	d10b      	bne.n	80032d2 <_printf_i+0x112>
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	07db      	lsls	r3, r3, #31
 80032be:	d508      	bpl.n	80032d2 <_printf_i+0x112>
 80032c0:	6923      	ldr	r3, [r4, #16]
 80032c2:	6862      	ldr	r2, [r4, #4]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	bfde      	ittt	le
 80032c8:	2330      	movle	r3, #48	; 0x30
 80032ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032d2:	ebac 0305 	sub.w	r3, ip, r5
 80032d6:	6123      	str	r3, [r4, #16]
 80032d8:	f8cd 8000 	str.w	r8, [sp]
 80032dc:	463b      	mov	r3, r7
 80032de:	aa03      	add	r2, sp, #12
 80032e0:	4621      	mov	r1, r4
 80032e2:	4630      	mov	r0, r6
 80032e4:	f7ff fef6 	bl	80030d4 <_printf_common>
 80032e8:	3001      	adds	r0, #1
 80032ea:	d14d      	bne.n	8003388 <_printf_i+0x1c8>
 80032ec:	f04f 30ff 	mov.w	r0, #4294967295
 80032f0:	b005      	add	sp, #20
 80032f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032f6:	4839      	ldr	r0, [pc, #228]	; (80033dc <_printf_i+0x21c>)
 80032f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80032fc:	6813      	ldr	r3, [r2, #0]
 80032fe:	6821      	ldr	r1, [r4, #0]
 8003300:	1d1d      	adds	r5, r3, #4
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6015      	str	r5, [r2, #0]
 8003306:	060a      	lsls	r2, r1, #24
 8003308:	d50b      	bpl.n	8003322 <_printf_i+0x162>
 800330a:	07ca      	lsls	r2, r1, #31
 800330c:	bf44      	itt	mi
 800330e:	f041 0120 	orrmi.w	r1, r1, #32
 8003312:	6021      	strmi	r1, [r4, #0]
 8003314:	b91b      	cbnz	r3, 800331e <_printf_i+0x15e>
 8003316:	6822      	ldr	r2, [r4, #0]
 8003318:	f022 0220 	bic.w	r2, r2, #32
 800331c:	6022      	str	r2, [r4, #0]
 800331e:	2210      	movs	r2, #16
 8003320:	e7b7      	b.n	8003292 <_printf_i+0xd2>
 8003322:	064d      	lsls	r5, r1, #25
 8003324:	bf48      	it	mi
 8003326:	b29b      	uxthmi	r3, r3
 8003328:	e7ef      	b.n	800330a <_printf_i+0x14a>
 800332a:	4665      	mov	r5, ip
 800332c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003330:	fb02 3311 	mls	r3, r2, r1, r3
 8003334:	5cc3      	ldrb	r3, [r0, r3]
 8003336:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800333a:	460b      	mov	r3, r1
 800333c:	2900      	cmp	r1, #0
 800333e:	d1f5      	bne.n	800332c <_printf_i+0x16c>
 8003340:	e7b9      	b.n	80032b6 <_printf_i+0xf6>
 8003342:	6813      	ldr	r3, [r2, #0]
 8003344:	6825      	ldr	r5, [r4, #0]
 8003346:	1d18      	adds	r0, r3, #4
 8003348:	6961      	ldr	r1, [r4, #20]
 800334a:	6010      	str	r0, [r2, #0]
 800334c:	0628      	lsls	r0, r5, #24
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	d501      	bpl.n	8003356 <_printf_i+0x196>
 8003352:	6019      	str	r1, [r3, #0]
 8003354:	e002      	b.n	800335c <_printf_i+0x19c>
 8003356:	066a      	lsls	r2, r5, #25
 8003358:	d5fb      	bpl.n	8003352 <_printf_i+0x192>
 800335a:	8019      	strh	r1, [r3, #0]
 800335c:	2300      	movs	r3, #0
 800335e:	4665      	mov	r5, ip
 8003360:	6123      	str	r3, [r4, #16]
 8003362:	e7b9      	b.n	80032d8 <_printf_i+0x118>
 8003364:	6813      	ldr	r3, [r2, #0]
 8003366:	1d19      	adds	r1, r3, #4
 8003368:	6011      	str	r1, [r2, #0]
 800336a:	681d      	ldr	r5, [r3, #0]
 800336c:	6862      	ldr	r2, [r4, #4]
 800336e:	2100      	movs	r1, #0
 8003370:	4628      	mov	r0, r5
 8003372:	f000 f837 	bl	80033e4 <memchr>
 8003376:	b108      	cbz	r0, 800337c <_printf_i+0x1bc>
 8003378:	1b40      	subs	r0, r0, r5
 800337a:	6060      	str	r0, [r4, #4]
 800337c:	6863      	ldr	r3, [r4, #4]
 800337e:	6123      	str	r3, [r4, #16]
 8003380:	2300      	movs	r3, #0
 8003382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003386:	e7a7      	b.n	80032d8 <_printf_i+0x118>
 8003388:	6923      	ldr	r3, [r4, #16]
 800338a:	462a      	mov	r2, r5
 800338c:	4639      	mov	r1, r7
 800338e:	4630      	mov	r0, r6
 8003390:	47c0      	blx	r8
 8003392:	3001      	adds	r0, #1
 8003394:	d0aa      	beq.n	80032ec <_printf_i+0x12c>
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	079b      	lsls	r3, r3, #30
 800339a:	d413      	bmi.n	80033c4 <_printf_i+0x204>
 800339c:	68e0      	ldr	r0, [r4, #12]
 800339e:	9b03      	ldr	r3, [sp, #12]
 80033a0:	4298      	cmp	r0, r3
 80033a2:	bfb8      	it	lt
 80033a4:	4618      	movlt	r0, r3
 80033a6:	e7a3      	b.n	80032f0 <_printf_i+0x130>
 80033a8:	2301      	movs	r3, #1
 80033aa:	464a      	mov	r2, r9
 80033ac:	4639      	mov	r1, r7
 80033ae:	4630      	mov	r0, r6
 80033b0:	47c0      	blx	r8
 80033b2:	3001      	adds	r0, #1
 80033b4:	d09a      	beq.n	80032ec <_printf_i+0x12c>
 80033b6:	3501      	adds	r5, #1
 80033b8:	68e3      	ldr	r3, [r4, #12]
 80033ba:	9a03      	ldr	r2, [sp, #12]
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	42ab      	cmp	r3, r5
 80033c0:	dcf2      	bgt.n	80033a8 <_printf_i+0x1e8>
 80033c2:	e7eb      	b.n	800339c <_printf_i+0x1dc>
 80033c4:	2500      	movs	r5, #0
 80033c6:	f104 0919 	add.w	r9, r4, #25
 80033ca:	e7f5      	b.n	80033b8 <_printf_i+0x1f8>
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1ac      	bne.n	800332a <_printf_i+0x16a>
 80033d0:	7803      	ldrb	r3, [r0, #0]
 80033d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033da:	e76c      	b.n	80032b6 <_printf_i+0xf6>
 80033dc:	08003795 	.word	0x08003795
 80033e0:	080037a6 	.word	0x080037a6

080033e4 <memchr>:
 80033e4:	b510      	push	{r4, lr}
 80033e6:	b2c9      	uxtb	r1, r1
 80033e8:	4402      	add	r2, r0
 80033ea:	4290      	cmp	r0, r2
 80033ec:	4603      	mov	r3, r0
 80033ee:	d101      	bne.n	80033f4 <memchr+0x10>
 80033f0:	2300      	movs	r3, #0
 80033f2:	e003      	b.n	80033fc <memchr+0x18>
 80033f4:	781c      	ldrb	r4, [r3, #0]
 80033f6:	3001      	adds	r0, #1
 80033f8:	428c      	cmp	r4, r1
 80033fa:	d1f6      	bne.n	80033ea <memchr+0x6>
 80033fc:	4618      	mov	r0, r3
 80033fe:	bd10      	pop	{r4, pc}

08003400 <memcpy>:
 8003400:	b510      	push	{r4, lr}
 8003402:	1e43      	subs	r3, r0, #1
 8003404:	440a      	add	r2, r1
 8003406:	4291      	cmp	r1, r2
 8003408:	d100      	bne.n	800340c <memcpy+0xc>
 800340a:	bd10      	pop	{r4, pc}
 800340c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003410:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003414:	e7f7      	b.n	8003406 <memcpy+0x6>

08003416 <memmove>:
 8003416:	4288      	cmp	r0, r1
 8003418:	b510      	push	{r4, lr}
 800341a:	eb01 0302 	add.w	r3, r1, r2
 800341e:	d807      	bhi.n	8003430 <memmove+0x1a>
 8003420:	1e42      	subs	r2, r0, #1
 8003422:	4299      	cmp	r1, r3
 8003424:	d00a      	beq.n	800343c <memmove+0x26>
 8003426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800342a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800342e:	e7f8      	b.n	8003422 <memmove+0xc>
 8003430:	4283      	cmp	r3, r0
 8003432:	d9f5      	bls.n	8003420 <memmove+0xa>
 8003434:	1881      	adds	r1, r0, r2
 8003436:	1ad2      	subs	r2, r2, r3
 8003438:	42d3      	cmn	r3, r2
 800343a:	d100      	bne.n	800343e <memmove+0x28>
 800343c:	bd10      	pop	{r4, pc}
 800343e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003442:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003446:	e7f7      	b.n	8003438 <memmove+0x22>

08003448 <_free_r>:
 8003448:	b538      	push	{r3, r4, r5, lr}
 800344a:	4605      	mov	r5, r0
 800344c:	2900      	cmp	r1, #0
 800344e:	d043      	beq.n	80034d8 <_free_r+0x90>
 8003450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003454:	1f0c      	subs	r4, r1, #4
 8003456:	2b00      	cmp	r3, #0
 8003458:	bfb8      	it	lt
 800345a:	18e4      	addlt	r4, r4, r3
 800345c:	f000 f8d0 	bl	8003600 <__malloc_lock>
 8003460:	4a1e      	ldr	r2, [pc, #120]	; (80034dc <_free_r+0x94>)
 8003462:	6813      	ldr	r3, [r2, #0]
 8003464:	4610      	mov	r0, r2
 8003466:	b933      	cbnz	r3, 8003476 <_free_r+0x2e>
 8003468:	6063      	str	r3, [r4, #4]
 800346a:	6014      	str	r4, [r2, #0]
 800346c:	4628      	mov	r0, r5
 800346e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003472:	f000 b8c6 	b.w	8003602 <__malloc_unlock>
 8003476:	42a3      	cmp	r3, r4
 8003478:	d90b      	bls.n	8003492 <_free_r+0x4a>
 800347a:	6821      	ldr	r1, [r4, #0]
 800347c:	1862      	adds	r2, r4, r1
 800347e:	4293      	cmp	r3, r2
 8003480:	bf01      	itttt	eq
 8003482:	681a      	ldreq	r2, [r3, #0]
 8003484:	685b      	ldreq	r3, [r3, #4]
 8003486:	1852      	addeq	r2, r2, r1
 8003488:	6022      	streq	r2, [r4, #0]
 800348a:	6063      	str	r3, [r4, #4]
 800348c:	6004      	str	r4, [r0, #0]
 800348e:	e7ed      	b.n	800346c <_free_r+0x24>
 8003490:	4613      	mov	r3, r2
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	b10a      	cbz	r2, 800349a <_free_r+0x52>
 8003496:	42a2      	cmp	r2, r4
 8003498:	d9fa      	bls.n	8003490 <_free_r+0x48>
 800349a:	6819      	ldr	r1, [r3, #0]
 800349c:	1858      	adds	r0, r3, r1
 800349e:	42a0      	cmp	r0, r4
 80034a0:	d10b      	bne.n	80034ba <_free_r+0x72>
 80034a2:	6820      	ldr	r0, [r4, #0]
 80034a4:	4401      	add	r1, r0
 80034a6:	1858      	adds	r0, r3, r1
 80034a8:	4282      	cmp	r2, r0
 80034aa:	6019      	str	r1, [r3, #0]
 80034ac:	d1de      	bne.n	800346c <_free_r+0x24>
 80034ae:	6810      	ldr	r0, [r2, #0]
 80034b0:	6852      	ldr	r2, [r2, #4]
 80034b2:	4401      	add	r1, r0
 80034b4:	6019      	str	r1, [r3, #0]
 80034b6:	605a      	str	r2, [r3, #4]
 80034b8:	e7d8      	b.n	800346c <_free_r+0x24>
 80034ba:	d902      	bls.n	80034c2 <_free_r+0x7a>
 80034bc:	230c      	movs	r3, #12
 80034be:	602b      	str	r3, [r5, #0]
 80034c0:	e7d4      	b.n	800346c <_free_r+0x24>
 80034c2:	6820      	ldr	r0, [r4, #0]
 80034c4:	1821      	adds	r1, r4, r0
 80034c6:	428a      	cmp	r2, r1
 80034c8:	bf01      	itttt	eq
 80034ca:	6811      	ldreq	r1, [r2, #0]
 80034cc:	6852      	ldreq	r2, [r2, #4]
 80034ce:	1809      	addeq	r1, r1, r0
 80034d0:	6021      	streq	r1, [r4, #0]
 80034d2:	6062      	str	r2, [r4, #4]
 80034d4:	605c      	str	r4, [r3, #4]
 80034d6:	e7c9      	b.n	800346c <_free_r+0x24>
 80034d8:	bd38      	pop	{r3, r4, r5, pc}
 80034da:	bf00      	nop
 80034dc:	200000a4 	.word	0x200000a4

080034e0 <_malloc_r>:
 80034e0:	b570      	push	{r4, r5, r6, lr}
 80034e2:	1ccd      	adds	r5, r1, #3
 80034e4:	f025 0503 	bic.w	r5, r5, #3
 80034e8:	3508      	adds	r5, #8
 80034ea:	2d0c      	cmp	r5, #12
 80034ec:	bf38      	it	cc
 80034ee:	250c      	movcc	r5, #12
 80034f0:	2d00      	cmp	r5, #0
 80034f2:	4606      	mov	r6, r0
 80034f4:	db01      	blt.n	80034fa <_malloc_r+0x1a>
 80034f6:	42a9      	cmp	r1, r5
 80034f8:	d903      	bls.n	8003502 <_malloc_r+0x22>
 80034fa:	230c      	movs	r3, #12
 80034fc:	6033      	str	r3, [r6, #0]
 80034fe:	2000      	movs	r0, #0
 8003500:	bd70      	pop	{r4, r5, r6, pc}
 8003502:	f000 f87d 	bl	8003600 <__malloc_lock>
 8003506:	4a21      	ldr	r2, [pc, #132]	; (800358c <_malloc_r+0xac>)
 8003508:	6814      	ldr	r4, [r2, #0]
 800350a:	4621      	mov	r1, r4
 800350c:	b991      	cbnz	r1, 8003534 <_malloc_r+0x54>
 800350e:	4c20      	ldr	r4, [pc, #128]	; (8003590 <_malloc_r+0xb0>)
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	b91b      	cbnz	r3, 800351c <_malloc_r+0x3c>
 8003514:	4630      	mov	r0, r6
 8003516:	f000 f863 	bl	80035e0 <_sbrk_r>
 800351a:	6020      	str	r0, [r4, #0]
 800351c:	4629      	mov	r1, r5
 800351e:	4630      	mov	r0, r6
 8003520:	f000 f85e 	bl	80035e0 <_sbrk_r>
 8003524:	1c43      	adds	r3, r0, #1
 8003526:	d124      	bne.n	8003572 <_malloc_r+0x92>
 8003528:	230c      	movs	r3, #12
 800352a:	4630      	mov	r0, r6
 800352c:	6033      	str	r3, [r6, #0]
 800352e:	f000 f868 	bl	8003602 <__malloc_unlock>
 8003532:	e7e4      	b.n	80034fe <_malloc_r+0x1e>
 8003534:	680b      	ldr	r3, [r1, #0]
 8003536:	1b5b      	subs	r3, r3, r5
 8003538:	d418      	bmi.n	800356c <_malloc_r+0x8c>
 800353a:	2b0b      	cmp	r3, #11
 800353c:	d90f      	bls.n	800355e <_malloc_r+0x7e>
 800353e:	600b      	str	r3, [r1, #0]
 8003540:	18cc      	adds	r4, r1, r3
 8003542:	50cd      	str	r5, [r1, r3]
 8003544:	4630      	mov	r0, r6
 8003546:	f000 f85c 	bl	8003602 <__malloc_unlock>
 800354a:	f104 000b 	add.w	r0, r4, #11
 800354e:	1d23      	adds	r3, r4, #4
 8003550:	f020 0007 	bic.w	r0, r0, #7
 8003554:	1ac3      	subs	r3, r0, r3
 8003556:	d0d3      	beq.n	8003500 <_malloc_r+0x20>
 8003558:	425a      	negs	r2, r3
 800355a:	50e2      	str	r2, [r4, r3]
 800355c:	e7d0      	b.n	8003500 <_malloc_r+0x20>
 800355e:	684b      	ldr	r3, [r1, #4]
 8003560:	428c      	cmp	r4, r1
 8003562:	bf16      	itet	ne
 8003564:	6063      	strne	r3, [r4, #4]
 8003566:	6013      	streq	r3, [r2, #0]
 8003568:	460c      	movne	r4, r1
 800356a:	e7eb      	b.n	8003544 <_malloc_r+0x64>
 800356c:	460c      	mov	r4, r1
 800356e:	6849      	ldr	r1, [r1, #4]
 8003570:	e7cc      	b.n	800350c <_malloc_r+0x2c>
 8003572:	1cc4      	adds	r4, r0, #3
 8003574:	f024 0403 	bic.w	r4, r4, #3
 8003578:	42a0      	cmp	r0, r4
 800357a:	d005      	beq.n	8003588 <_malloc_r+0xa8>
 800357c:	1a21      	subs	r1, r4, r0
 800357e:	4630      	mov	r0, r6
 8003580:	f000 f82e 	bl	80035e0 <_sbrk_r>
 8003584:	3001      	adds	r0, #1
 8003586:	d0cf      	beq.n	8003528 <_malloc_r+0x48>
 8003588:	6025      	str	r5, [r4, #0]
 800358a:	e7db      	b.n	8003544 <_malloc_r+0x64>
 800358c:	200000a4 	.word	0x200000a4
 8003590:	200000a8 	.word	0x200000a8

08003594 <_realloc_r>:
 8003594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003596:	4607      	mov	r7, r0
 8003598:	4614      	mov	r4, r2
 800359a:	460e      	mov	r6, r1
 800359c:	b921      	cbnz	r1, 80035a8 <_realloc_r+0x14>
 800359e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80035a2:	4611      	mov	r1, r2
 80035a4:	f7ff bf9c 	b.w	80034e0 <_malloc_r>
 80035a8:	b922      	cbnz	r2, 80035b4 <_realloc_r+0x20>
 80035aa:	f7ff ff4d 	bl	8003448 <_free_r>
 80035ae:	4625      	mov	r5, r4
 80035b0:	4628      	mov	r0, r5
 80035b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035b4:	f000 f826 	bl	8003604 <_malloc_usable_size_r>
 80035b8:	42a0      	cmp	r0, r4
 80035ba:	d20f      	bcs.n	80035dc <_realloc_r+0x48>
 80035bc:	4621      	mov	r1, r4
 80035be:	4638      	mov	r0, r7
 80035c0:	f7ff ff8e 	bl	80034e0 <_malloc_r>
 80035c4:	4605      	mov	r5, r0
 80035c6:	2800      	cmp	r0, #0
 80035c8:	d0f2      	beq.n	80035b0 <_realloc_r+0x1c>
 80035ca:	4631      	mov	r1, r6
 80035cc:	4622      	mov	r2, r4
 80035ce:	f7ff ff17 	bl	8003400 <memcpy>
 80035d2:	4631      	mov	r1, r6
 80035d4:	4638      	mov	r0, r7
 80035d6:	f7ff ff37 	bl	8003448 <_free_r>
 80035da:	e7e9      	b.n	80035b0 <_realloc_r+0x1c>
 80035dc:	4635      	mov	r5, r6
 80035de:	e7e7      	b.n	80035b0 <_realloc_r+0x1c>

080035e0 <_sbrk_r>:
 80035e0:	b538      	push	{r3, r4, r5, lr}
 80035e2:	2300      	movs	r3, #0
 80035e4:	4c05      	ldr	r4, [pc, #20]	; (80035fc <_sbrk_r+0x1c>)
 80035e6:	4605      	mov	r5, r0
 80035e8:	4608      	mov	r0, r1
 80035ea:	6023      	str	r3, [r4, #0]
 80035ec:	f7fe fd60 	bl	80020b0 <_sbrk>
 80035f0:	1c43      	adds	r3, r0, #1
 80035f2:	d102      	bne.n	80035fa <_sbrk_r+0x1a>
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	b103      	cbz	r3, 80035fa <_sbrk_r+0x1a>
 80035f8:	602b      	str	r3, [r5, #0]
 80035fa:	bd38      	pop	{r3, r4, r5, pc}
 80035fc:	200001d8 	.word	0x200001d8

08003600 <__malloc_lock>:
 8003600:	4770      	bx	lr

08003602 <__malloc_unlock>:
 8003602:	4770      	bx	lr

08003604 <_malloc_usable_size_r>:
 8003604:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003608:	1f18      	subs	r0, r3, #4
 800360a:	2b00      	cmp	r3, #0
 800360c:	bfbc      	itt	lt
 800360e:	580b      	ldrlt	r3, [r1, r0]
 8003610:	18c0      	addlt	r0, r0, r3
 8003612:	4770      	bx	lr

08003614 <_init>:
 8003614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003616:	bf00      	nop
 8003618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800361a:	bc08      	pop	{r3}
 800361c:	469e      	mov	lr, r3
 800361e:	4770      	bx	lr

08003620 <_fini>:
 8003620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003622:	bf00      	nop
 8003624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003626:	bc08      	pop	{r3}
 8003628:	469e      	mov	lr, r3
 800362a:	4770      	bx	lr
